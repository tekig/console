{"version":3,"file":"static/js/455.1720a69d.chunk.js","mappings":"4OA0FMA,GAAYC,EAAAA,EAAAA,IAAQ,KAAM,CAC9BC,qBAAAA,EAAAA,KAGF,UAAeF,GA3DK,SAAC,GAMK,IALxBG,EAKuB,EALvBA,2BACAC,EAIuB,EAJvBA,WACAC,EAGuB,EAHvBA,eACAC,EAEuB,EAFvBA,YACAJ,EACuB,EADvBA,qBAMA,GAAyCK,EAAAA,EAAAA,IAJpB,kBAAMJ,GAA2B,MACnC,SAACK,GAAD,OAA+BN,EAAqBM,MAGvE,eAAOC,EAAP,KAAsBC,EAAtB,KAEA,IAAKL,EACH,OAAO,KAuBT,OACE,SAAC,IAAD,CACEM,MAAK,eACLC,YAAa,SACbC,OAAQT,EACRU,WAAW,SAAC,KAAD,IACXC,UAAWN,EACXO,UA3BoB,WACtB,GAAoB,OAAhBV,EAAJ,CAIA,IAAMW,EAASC,GAAAA,CAAIZ,EAAa,SAAU,IACpCa,EAASD,GAAAA,CAAIZ,EAAa,SAAU,IACpCc,EAASF,GAAAA,CAAIZ,EAAa,SAAU,IAE1CI,EACE,SADa,0BAEML,EAFN,mBAE+BC,EAAYe,KACxD,CACEJ,OAAAA,EACAE,OAAAA,EACAC,OAAAA,MAaFE,QApCY,kBAAMnB,GAA2B,IAqC7CoB,qBACE,SAAC,IAAD,gE,0DCnDR,IAvBe,SACbC,EACAC,GAEA,OAAkCC,EAAAA,EAAAA,WAAkB,GAApD,eAAOX,EAAP,KAAkBY,EAAlB,KAgBA,MAAO,CAACZ,EAdQ,SAACa,EAAgBC,EAAaC,GAC5CH,GAAa,GACbI,EAAAA,EAAAA,OACUH,EAAQC,EAAKC,GACpBE,MAAK,SAACC,GACLN,GAAa,GACbH,EAAUS,MAEXC,OAAM,SAAC1B,GACNmB,GAAa,GACbF,EAAQjB","sources":["screens/Console/Buckets/BucketDetails/DeleteEvent.tsx","screens/Console/Common/Hooks/useApi.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport get from \"lodash/get\";\nimport { connect } from \"react-redux\";\nimport { DialogContentText } from \"@mui/material\";\nimport { BucketEvent } from \"../types\";\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport useApi from \"../../Common/Hooks/useApi\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport { ConfirmDeleteIcon } from \"../../../../icons\";\n\ninterface IDeleteEventProps {\n  closeDeleteModalAndRefresh: (refresh: boolean) => void;\n  deleteOpen: boolean;\n  selectedBucket: string;\n  bucketEvent: BucketEvent | null;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n}\n\nconst DeleteEvent = ({\n  closeDeleteModalAndRefresh,\n  deleteOpen,\n  selectedBucket,\n  bucketEvent,\n  setErrorSnackMessage,\n}: IDeleteEventProps) => {\n  const onDelSuccess = () => closeDeleteModalAndRefresh(true);\n  const onDelError = (err: ErrorResponseHandler) => setErrorSnackMessage(err);\n  const onClose = () => closeDeleteModalAndRefresh(false);\n\n  const [deleteLoading, invokeDeleteApi] = useApi(onDelSuccess, onDelError);\n\n  if (!selectedBucket) {\n    return null;\n  }\n\n  const onConfirmDelete = () => {\n    if (bucketEvent === null) {\n      return;\n    }\n\n    const events = get(bucketEvent, \"events\", []);\n    const prefix = get(bucketEvent, \"prefix\", \"\");\n    const suffix = get(bucketEvent, \"suffix\", \"\");\n\n    invokeDeleteApi(\n      \"DELETE\",\n      `/api/v1/buckets/${selectedBucket}/events/${bucketEvent.arn}`,\n      {\n        events,\n        prefix,\n        suffix,\n      }\n    );\n  };\n\n  return (\n    <ConfirmDialog\n      title={`Delete Event`}\n      confirmText={\"Delete\"}\n      isOpen={deleteOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={deleteLoading}\n      onConfirm={onConfirmDelete}\n      onClose={onClose}\n      confirmationContent={\n        <DialogContentText>\n          Are you sure you want to delete this event?\n        </DialogContentText>\n      }\n    />\n  );\n};\n\nconst connector = connect(null, {\n  setErrorSnackMessage,\n});\n\nexport default connector(DeleteEvent);\n","import { useState } from \"react\";\nimport api from \"../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\n\ntype NoReturnFunction = (param?: any) => void;\ntype ApiMethodToInvoke = (method: string, url: string, data?: any) => void;\ntype IsApiInProgress = boolean;\n\nconst useApi = (\n  onSuccess: NoReturnFunction,\n  onError: NoReturnFunction\n): [IsApiInProgress, ApiMethodToInvoke] => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const callApi = (method: string, url: string, data?: any) => {\n    setIsLoading(true);\n    api\n      .invoke(method, url, data)\n      .then((res: any) => {\n        setIsLoading(false);\n        onSuccess(res);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setIsLoading(false);\n        onError(err);\n      });\n  };\n\n  return [isLoading, callApi];\n};\n\nexport default useApi;\n"],"names":["connector","connect","setErrorSnackMessage","closeDeleteModalAndRefresh","deleteOpen","selectedBucket","bucketEvent","useApi","err","deleteLoading","invokeDeleteApi","title","confirmText","isOpen","titleIcon","isLoading","onConfirm","events","get","prefix","suffix","arn","onClose","confirmationContent","onSuccess","onError","useState","setIsLoading","method","url","data","api","then","res","catch"],"sourceRoot":""}