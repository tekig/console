{"version":3,"file":"static/js/2653.d0c6bbf1.chunk.js","mappings":"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","sources":["screens/Console/Account/AddServiceAccount.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Grid from \"@mui/material/Grid\";\nimport { Box, Button, LinearProgress } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  modalStyleUtils,\n  serviceAccountStyles,\n} from \"../Common/FormComponents/common/styleLibrary\";\nimport { NewServiceAccount } from \"../Common/CredentialsPrompt/types\";\nimport { setModalErrorSnackMessage } from \"../../../actions\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\nimport api from \"../../../common/api\";\nimport CodeMirrorWrapper from \"../Common/FormComponents/CodeMirrorWrapper/CodeMirrorWrapper\";\nimport FormSwitchWrapper from \"../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport InputBoxWrapper from \"../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { AccountIcon } from \"../../../icons\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...serviceAccountStyles,\n    ...modalStyleUtils,\n  });\n\ninterface IAddServiceAccountProps {\n  classes: any;\n  open: boolean;\n  closeModalAndRefresh: (res: NewServiceAccount | null) => void;\n  setModalErrorSnackMessage: typeof setModalErrorSnackMessage;\n}\n\nconst AddServiceAccount = ({\n  classes,\n  open,\n  closeModalAndRefresh,\n  setModalErrorSnackMessage,\n}: IAddServiceAccountProps) => {\n  const [addSending, setAddSending] = useState<boolean>(false);\n  const [policyDefinition, setPolicyDefinition] = useState<string>(\"\");\n  const [accessKey, setAccessKey] = useState<string>(\"\");\n  const [secretKey, setSecretKey] = useState<string>(\"\");\n  const [isRestrictedByPolicy, setIsRestrictedByPolicy] =\n    useState<boolean>(false);\n  const [addCredentials, setAddCredentials] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (addSending) {\n      if (addCredentials) {\n        api\n          .invoke(\"POST\", `/api/v1/service-account-credentials`, {\n            policy: policyDefinition,\n            accessKey: accessKey,\n            secretKey: secretKey,\n          })\n          .then((res) => {\n            setAddSending(false);\n            closeModalAndRefresh(res);\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setAddSending(false);\n            setModalErrorSnackMessage(err);\n          });\n      } else {\n        api\n          .invoke(\"POST\", `/api/v1/service-accounts`, {\n            policy: policyDefinition,\n          })\n          .then((res) => {\n            setAddSending(false);\n            closeModalAndRefresh(res);\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setAddSending(false);\n            setModalErrorSnackMessage(err);\n          });\n      }\n    }\n  }, [\n    addSending,\n    setAddSending,\n    setModalErrorSnackMessage,\n    policyDefinition,\n    closeModalAndRefresh,\n    addCredentials,\n    accessKey,\n    secretKey,\n  ]);\n\n  const addServiceAccount = (e: React.FormEvent) => {\n    e.preventDefault();\n    setAddSending(true);\n  };\n\n  const resetForm = () => {\n    setPolicyDefinition(\"\");\n  };\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={() => {\n        closeModalAndRefresh(null);\n      }}\n      title={`Create Service Account`}\n      titleIcon={<AccountIcon />}\n    >\n      <form\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n          addServiceAccount(e);\n        }}\n      >\n        {addSending && (\n          <Grid item xs={12}>\n            <LinearProgress />\n          </Grid>\n        )}\n        <Grid container className={classes.modalFormScrollable}>\n          <Grid item xs={12}>\n            <div className={classes.infoDetails}>\n              Service Accounts inherit the policy explicitly attached to the\n              parent user and the policy attached to each group in which the\n              parent user has membership. You can specify an optional\n              JSON-formatted policy below to restrict the Service Account access\n              to a subset of actions and resources explicitly allowed for the\n              parent user.\n              <Box sx={{ paddingTop: \"15px\", paddingBottom: \"15px\" }}>\n                You cannot modify the Service Account optional policy after\n                saving.\n              </Box>\n            </div>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid item xs={12}>\n              <FormSwitchWrapper\n                value=\"locking\"\n                id=\"locking\"\n                name=\"locking\"\n                checked={addCredentials}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setAddCredentials(event.target.checked);\n                }}\n                label={\"Customize Credentials\"}\n              />\n              {addCredentials && (\n                <Grid item xs={12}>\n                  <div className={classes.stackedInputs}>\n                    <InputBoxWrapper\n                      value={accessKey}\n                      label={\"Access Key\"}\n                      id={\"accessKey\"}\n                      name={\"accessKey\"}\n                      placeholder={\"Enter Access Key\"}\n                      onChange={(e) => {\n                        setAccessKey(e.target.value);\n                      }}\n                    />\n                    <InputBoxWrapper\n                      value={secretKey}\n                      label={\"Secret Key\"}\n                      id={\"secretKey\"}\n                      name={\"secretKey\"}\n                      placeholder={\"Enter Secret Key\"}\n                      onChange={(e) => {\n                        setSecretKey(e.target.value);\n                      }}\n                    />\n                  </div>\n                </Grid>\n              )}\n            </Grid>\n            <Grid item xs={12}>\n              <FormSwitchWrapper\n                value=\"locking\"\n                id=\"locking\"\n                name=\"locking\"\n                checked={isRestrictedByPolicy}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setIsRestrictedByPolicy(event.target.checked);\n                }}\n                label={\"Restrict with policy\"}\n              />\n              {isRestrictedByPolicy && (\n                <Grid item xs={12} className={classes.codeMirrorContainer}>\n                  <CodeMirrorWrapper\n                    label={\"Policy \"}\n                    value={policyDefinition}\n                    onBeforeChange={(editor, data, value) => {\n                      setPolicyDefinition(value);\n                    }}\n                  />\n                </Grid>\n              )}\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid container>\n          <Grid item xs={12} className={classes.modalButtonBar}>\n            <Button\n              type=\"button\"\n              color=\"primary\"\n              variant=\"outlined\"\n              onClick={resetForm}\n            >\n              Clear\n            </Button>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={addSending}\n            >\n              Create\n            </Button>\n          </Grid>\n        </Grid>\n      </form>\n    </ModalWrapper>\n  );\n};\n\nconst mapDispatchToProps = {\n  setModalErrorSnackMessage,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default withStyles(styles)(connector(AddServiceAccount));\n"],"names":["mapDispatchToProps","setModalErrorSnackMessage","connector","connect","withStyles","theme","createStyles","serviceAccountStyles","modalStyleUtils","classes","open","closeModalAndRefresh","useState","addSending","setAddSending","policyDefinition","setPolicyDefinition","accessKey","setAccessKey","secretKey","setSecretKey","isRestrictedByPolicy","setIsRestrictedByPolicy","addCredentials","setAddCredentials","useEffect","api","policy","then","res","catch","err","modalOpen","onClose","title","titleIcon","noValidate","autoComplete","onSubmit","e","preventDefault","addServiceAccount","item","xs","container","className","modalFormScrollable","infoDetails","sx","paddingTop","paddingBottom","value","id","name","checked","onChange","event","target","label","stackedInputs","placeholder","codeMirrorContainer","onBeforeChange","editor","data","modalButtonBar","type","color","variant","onClick","disabled"],"sourceRoot":""}