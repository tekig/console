{"version":3,"file":"static/js/6683.0a047d81.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/FileSelector/FileSelector.tsx","screens/Console/Common/FormComponents/FileSelector/utils.ts","icons/CertificateIcon.tsx","screens/Console/Common/TLSCertificate/TLSCertificate.tsx","screens/Console/Tenants/TenantDetails/TenantEncryption.tsx","screens/shared/ErrorBlock.tsx","../node_modules/@mui/icons-material/RemoveRedEye.js","../node_modules/@mui/icons-material/VisibilityOff.js"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport get from \"lodash/get\";\nimport { Grid, InputLabel, Tooltip } from \"@mui/material\";\nimport IconButton from \"@mui/material/IconButton\";\nimport AttachFileIcon from \"@mui/icons-material/AttachFile\";\nimport CancelIcon from \"@mui/icons-material/Cancel\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  fieldBasic,\n  fileInputStyles,\n  tooltipHelper,\n} from \"../common/styleLibrary\";\nimport { fileProcess } from \"./utils\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\nimport ErrorBlock from \"../../../../shared/ErrorBlock\";\n\ninterface InputBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: string, i: string) => void;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  required?: boolean;\n  error?: string;\n  accept?: string;\n  value?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    valueString: {\n      maxWidth: 350,\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      marginTop: 2,\n    },\n    fileInputField: {\n      margin: \"13px 0\",\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    ...fileInputStyles,\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      fontWeight: \"normal\",\n    },\n    textBoxContainer: {\n      ...fieldBasic.textBoxContainer,\n      maxWidth: \"100%\",\n      border: \"1px solid #eaeaea\",\n      paddingLeft: \"15px\",\n    },\n  });\n\nconst FileSelector = ({\n  label,\n  classes,\n  onChange,\n  id,\n  name,\n  disabled = false,\n  tooltip = \"\",\n  required,\n  error = \"\",\n  accept = \"\",\n  value = \"\",\n}: InputBoxProps) => {\n  const [showFileSelector, setShowSelector] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Grid\n        item\n        xs={12}\n        className={`${classes.fileInputField} ${classes.fieldBottom} ${\n          classes.fieldContainer\n        } ${error !== \"\" ? classes.errorInField : \"\"}`}\n      >\n        {label !== \"\" && (\n          <InputLabel\n            htmlFor={id}\n            className={`${error !== \"\" ? classes.fieldLabelError : \"\"} ${\n              classes.inputLabel\n            }`}\n          >\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        {showFileSelector || value === \"\" ? (\n          <div className={classes.textBoxContainer}>\n            <input\n              type=\"file\"\n              name={name}\n              onChange={(e) => {\n                const fileName = get(e, \"target.files[0].name\", \"\");\n                fileProcess(e, (data: any) => {\n                  onChange(data, fileName);\n                });\n              }}\n              accept={accept}\n              required={required}\n              disabled={disabled}\n              className={classes.fileInputField}\n            />\n\n            {value !== \"\" && (\n              <IconButton\n                color=\"primary\"\n                aria-label=\"upload picture\"\n                component=\"span\"\n                onClick={() => {\n                  setShowSelector(false);\n                }}\n                disableRipple={false}\n                disableFocusRipple={false}\n                size=\"small\"\n              >\n                <CancelIcon />\n              </IconButton>\n            )}\n\n            {error !== \"\" && <ErrorBlock errorMessage={error} />}\n          </div>\n        ) : (\n          <div className={classes.fileReselect}>\n            <div className={classes.valueString}>{value}</div>\n            <IconButton\n              color=\"primary\"\n              aria-label=\"upload picture\"\n              component=\"span\"\n              onClick={() => {\n                setShowSelector(true);\n              }}\n              disableRipple={false}\n              disableFocusRipple={false}\n              size=\"small\"\n            >\n              <AttachFileIcon />\n            </IconButton>\n          </div>\n        )}\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(FileSelector);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nexport const fileProcess = (evt: any, callback: any) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n\n  reader.onload = () => {\n    // reader.readAsDataURL(file) output will be something like: data:application/x-x509-ca-cert;base64,LS0tLS1CRUdJTiBDRVJUSU\n    // we care only about the actual base64 part (everything after \"data:application/x-x509-ca-cert;base64,\")\n    const fileBase64 = reader.result;\n    if (fileBase64) {\n      const fileArray = fileBase64.toString().split(\"base64,\");\n\n      if (fileArray.length === 2) {\n        callback(fileArray[1]);\n      }\n    }\n  };\n};\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport * as React from \"react\";\nimport { SVGProps } from \"react\";\n\nconst CertificateIcon = (props: SVGProps<SVGSVGElement>) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={`min-icon`}\n      fill={\"currentcolor\"}\n      viewBox=\"0 0 256 256\"\n      {...props}\n    >\n      <defs>\n        <clipPath id=\"certificate_svg__a\">\n          <path\n            data-name=\"Rect\\xE1ngulo 2156\"\n            fill=\"#07193e\"\n            d=\"M0 0h256v222.048H0z\"\n          />\n        </clipPath>\n      </defs>\n      <g\n        data-name=\"Grupo 4763\"\n        transform=\"translate(0 17)\"\n        clipPath=\"url(#certificate_svg__a)\"\n        fill=\"#07193e\"\n      >\n        <path\n          data-name=\"Trazado 8152\"\n          d=\"M240-.002H16a16 16 0 0 0-16 16v160a16 16 0 0 0 16 16h120l4.64-5.6 7.44-9.12A66.72 66.72 0 0 1 256 98.958v-82.96a16 16 0 0 0-16-16m-130.96 149.7H47.3a7.3 7.3 0 1 1 0-14.592h61.74a7.3 7.3 0 1 1 0 14.592m0-56H47.3a7.3 7.3 0 1 1 0-14.592h61.74a7.3 7.3 0 0 1 0 14.592m66.96-39.3a6.419 6.419 0 0 1-6.4 6.4H46.4a6.419 6.419 0 0 1-6.4-6.4v-1.792a6.419 6.419 0 0 1 6.4-6.4h123.2a6.419 6.419 0 0 1 6.4 6.4Z\"\n        />\n        <path\n          data-name=\"Trazado 8153\"\n          d=\"M256 137.486a50.96 50.96 0 1 0-86.16 36.72l-15.52 18.96 7.2 28.88 29.28-35.68a50.018 50.018 0 0 0 28.4 0l29.28 35.68 7.2-28.88-15.52-18.96a50.75 50.75 0 0 0 15.84-36.72m-50.928 29.688a29.688 29.688 0 0 1-.072-59.376h.072a29.688 29.688 0 0 1 0 59.376\"\n        />\n      </g>\n      <path data-name=\"Rect\\xE1ngulo 2157\" fill=\"none\" d=\"M0 0h256v256H0z\" />\n    </svg>\n  );\n};\nexport default CertificateIcon;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { ICertificateInfo } from \"../../Tenants/types\";\nimport LanguageIcon from \"@mui/icons-material/Language\";\nimport Chip from \"@mui/material/Chip\";\nimport {\n  Typography,\n  Divider,\n  Box,\n  Grid,\n  Container,\n  ListItemText,\n  List,\n  ListItem,\n  ListItemAvatar,\n} from \"@mui/material\";\nimport EventBusyIcon from \"@mui/icons-material/EventBusy\";\nimport Moment from \"react-moment\";\nimport CertificateIcon from \"../../../../icons/CertificateIcon\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      padding: 0,\n      margin: 0,\n      border: 0,\n      backgroundColor: \"transparent\",\n      textDecoration: \"underline\",\n      cursor: \"pointer\",\n      fontSize: \"inherit\",\n      color: theme.palette.info.main,\n      fontFamily: \"Lato, sans-serif\",\n    },\n    certificateIcon: {\n      float: \"left\",\n      paddingTop: \"5px !important\",\n      paddingRight: \"10px !important\",\n    },\n    certificateInfo: { float: \"right\" },\n    certificateWrapper: {\n      height: \"auto\",\n      margin: 5,\n      border: \"1px solid #E2E2E2\",\n      userSelect: \"text\",\n      borderRadius: 4,\n      \"& h6\": {\n        fontWeight: \"bold\",\n      },\n      \"& div\": {\n        padding: 0,\n      },\n    },\n    certificateExpiry: {\n      color: \"#616161\",\n      display: \"flex\",\n      alignItems: \"center\",\n      flexWrap: \"wrap\",\n      marginBottom: 5,\n      \"& .label\": {\n        fontWeight: \"bold\",\n      },\n    },\n    certificateDomains: {\n      color: \"#616161\",\n      \"& .label\": {\n        fontWeight: \"bold\",\n      },\n    },\n    certificatesList: {\n      border: \"1px solid #E2E2E2\",\n      borderRadius: 4,\n      color: \"#616161\",\n      textTransform: \"lowercase\",\n      overflowY: \"scroll\",\n      maxHeight: 145,\n      marginBottom: 10,\n    },\n    certificatesListItem: {\n      padding: \"0px 16px\",\n      borderBottom: \"1px solid #E2E2E2\",\n      \"& div\": {\n        minWidth: 0,\n      },\n      \"& svg\": {\n        fontSize: 12,\n        marginRight: 10,\n        opacity: 0.5,\n      },\n      \"& span\": {\n        fontSize: 12,\n      },\n    },\n  });\n\ninterface ITLSCertificate {\n  classes: any;\n  certificateInfo: ICertificateInfo;\n  onDelete: any;\n}\n\nconst TLSCertificate = ({\n  classes,\n  certificateInfo,\n  onDelete = () => {},\n}: ITLSCertificate) => {\n  const certificates = certificateInfo.domains || [];\n  return (\n    <Chip\n      key={certificateInfo.name}\n      variant=\"outlined\"\n      color=\"primary\"\n      className={classes.certificateWrapper}\n      label={\n        <Container>\n          <Grid item xs={1} className={classes.certificateIcon}>\n            <CertificateIcon />\n          </Grid>\n          <Grid item xs={11} className={classes.certificateInfo}>\n            <Typography variant=\"subtitle1\" display=\"block\" gutterBottom>\n              {certificateInfo.name}\n            </Typography>\n            <Box className={classes.certificateExpiry}>\n              <EventBusyIcon color=\"inherit\" fontSize=\"small\" />\n              &nbsp;\n              <span className={\"label\"}>Expiry:&nbsp;</span>\n              <span>\n                <Moment format=\"YYYY/MM/DD\">{certificateInfo.expiry}</Moment>\n              </span>\n            </Box>\n            <Divider />\n            <br />\n            <Box className={classes.certificateDomains}>\n              <span className=\"label\">{`${certificates.length} Domain (s):`}</span>\n            </Box>\n            <List className={classes.certificatesList}>\n              {certificates.map((dom) => (\n                <ListItem className={classes.certificatesListItem}>\n                  <ListItemAvatar>\n                    <LanguageIcon />\n                  </ListItemAvatar>\n                  <ListItemText primary={dom} />\n                </ListItem>\n              ))}\n            </List>\n          </Grid>\n        </Container>\n      }\n      onDelete={onDelete}\n    />\n  );\n};\n\nexport default withStyles(styles)(TLSCertificate);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { ITenant } from \"../ListTenants/types\";\nimport {\n  ICertificateInfo,\n  ISecurityContext,\n  ITenantEncryptionResponse,\n} from \"../types\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  containerForHeader,\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  spacingUtils,\n  tenantDetailsStyles,\n  wizardCommon,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../../../../store\";\nimport { setTenantDetailsLoad } from \"../actions\";\nimport api from \"../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\n\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport Grid from \"@mui/material/Grid\";\nimport FileSelector from \"../../Common/FormComponents/FileSelector/FileSelector\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport RadioGroupSelector from \"../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport { Button, DialogContentText } from \"@mui/material\";\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\nimport RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\nimport { KeyPair } from \"../ListTenants/utils\";\nimport { clearValidationError } from \"../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../utils/validationFunctions\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport TLSCertificate from \"../../Common/TLSCertificate/TLSCertificate\";\nimport SectionTitle from \"../../Common/SectionTitle\";\n\ninterface ITenantEncryption {\n  classes: any;\n  loadingTenant: boolean;\n  tenant: ITenant | null;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n  setTenantDetailsLoad: typeof setTenantDetailsLoad;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...tenantDetailsStyles,\n    ...spacingUtils,\n    loaderAlign: {\n      textAlign: \"center\",\n    },\n    title: {\n      marginTop: 35,\n    },\n    bold: { fontWeight: \"bold\" },\n    italic: { fontStyle: \"italic\" },\n    paperContainer: {\n      padding: \"15px 15px 15px 50px\",\n    },\n    certificateInfo: {\n      height: \"auto\",\n      margin: 5,\n    },\n    fileItem: {\n      marginRight: 10,\n      display: \"flex\",\n      \"& div label\": {\n        minWidth: 50,\n      },\n\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    certInputRow: {\n      display: \"flex\",\n      alignItems: \"center\",\n      borderBottom: \"1px solid #eaeaea\",\n      marginBottom: 8,\n    },\n    caCertsRow: {\n      borderBottom: \"1px solid #eaeaea\",\n      display: \"flex\",\n      alignItems: \"center\",\n      marginBottom: 8,\n    },\n    ...containerForHeader(theme.spacing(4)),\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst TenantEncryption = ({\n  classes,\n  tenant,\n  setErrorSnackMessage,\n}: ITenantEncryption) => {\n  const [encryptionEnabled, setEncryptionEnabled] = useState<boolean>(false);\n  const [encryptionType, setEncryptionType] = useState<string>(\"vault\");\n  const [replicas, setReplicas] = useState<string>(\"2\");\n  const [image, setImage] = useState<string>(\"\");\n  const [refreshEncryptionInfo, setRefreshEncryptionInfo] =\n    useState<boolean>(false);\n  const [securityContext, setSecurityContext] = useState<ISecurityContext>({\n    fsGroup: \"1000\",\n    runAsGroup: \"1000\",\n    runAsNonRoot: true,\n    runAsUser: \"1000\",\n  });\n  const [vaultConfiguration, setVaultConfiguration] = useState<any>(null);\n  const [awsConfiguration, setAWSConfiguration] = useState<any>(null);\n  const [gemaltoConfiguration, setGemaltoConfiguration] = useState<any>(null);\n  const [azureConfiguration, setAzureConfiguration] = useState<any>(null);\n  const [gcpConfiguration, setGCPConfiguration] = useState<any>(null);\n  const [enabledCustomCertificates, setEnabledCustomCertificates] =\n    useState<boolean>(false);\n  const [updatingEncryption, setUpdatingEncryption] = useState<boolean>(false);\n  const [serverTLSCertificateSecret, setServerTLSCertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [mTLSCertificateSecret, setMTLSCertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [mTLSCertificate, setMTLSCertificate] = useState<KeyPair | null>(null);\n  const [certificatesToBeRemoved, setCertificatesToBeRemoved] = useState<\n    string[]\n  >([]);\n  const [showVaultAppRoleID, setShowVaultAppRoleID] = useState<boolean>(false);\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\n  const [showVaultAppRoleSecret, setShowVaultAppRoleSecret] =\n    useState<boolean>(false);\n  const [vaultClientCertificateSecret, setVaultClientCertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [vaultCACertificateSecret, setVaultCACertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [vaultClientCertificate, setVaultClientCertificate] =\n    useState<KeyPair | null>(null);\n  const [serverCertificate, setServerCertificate] = useState<KeyPair | null>(\n    null\n  );\n  const [vaultCACertificate, setVaultCACertificate] = useState<KeyPair | null>(\n    null\n  );\n  const [gemaltoCACertificateSecret, setGemaltoCACertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [gemaltoCACertificate, setGemaltotCACertificate] =\n    useState<KeyPair | null>(null);\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n  const [confirmOpen, setConfirmOpen] = useState<boolean>(false);\n\n  // Validation\n  useEffect(() => {\n    let encryptionValidation: IValidation[] = [];\n\n    if (encryptionEnabled) {\n      encryptionValidation = [\n        ...encryptionValidation,\n        {\n          fieldKey: \"replicas\",\n          required: true,\n          value: replicas,\n          customValidation: parseInt(replicas) < 1,\n          customValidationMessage: \"Replicas needs to be 1 or greater\",\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsUser\",\n          required: true,\n          value: securityContext.runAsUser,\n          customValidation:\n            securityContext.runAsUser === \"\" ||\n            parseInt(securityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsGroup\",\n          required: true,\n          value: securityContext.runAsGroup,\n          customValidation:\n            securityContext.runAsGroup === \"\" ||\n            parseInt(securityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_fsGroup\",\n          required: true,\n          value: securityContext.fsGroup,\n          customValidation:\n            securityContext.fsGroup === \"\" ||\n            parseInt(securityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n\n      if (enabledCustomCertificates) {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"serverKey\",\n            required: false,\n            value: serverCertificate?.encoded_key || \"\",\n          },\n          {\n            fieldKey: \"serverCert\",\n            required: false,\n            value: serverCertificate?.encoded_cert || \"\",\n          },\n          {\n            fieldKey: \"clientKey\",\n            required: false,\n            value: mTLSCertificate?.encoded_key || \"\",\n          },\n          {\n            fieldKey: \"clientCert\",\n            required: false,\n            value: mTLSCertificate?.encoded_cert || \"\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"vault\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"vault_endpoint\",\n            required: true,\n            value: vaultConfiguration?.endpoint,\n          },\n          {\n            fieldKey: \"vault_id\",\n            required: true,\n            value: vaultConfiguration?.approle?.id,\n          },\n          {\n            fieldKey: \"vault_secret\",\n            required: true,\n            value: vaultConfiguration?.approle?.secret,\n          },\n          {\n            fieldKey: \"vault_ping\",\n            required: false,\n            value: vaultConfiguration?.status?.ping,\n            customValidation: parseInt(vaultConfiguration?.status?.ping) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n          {\n            fieldKey: \"vault_retry\",\n            required: false,\n            value: vaultConfiguration?.approle?.retry,\n            customValidation: parseInt(vaultConfiguration?.approle?.retry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"aws\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"aws_endpoint\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.endpoint,\n          },\n          {\n            fieldKey: \"aws_region\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.region,\n          },\n          {\n            fieldKey: \"aws_accessKey\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.credentials?.accesskey,\n          },\n          {\n            fieldKey: \"aws_secretKey\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.credentials?.secretkey,\n          },\n        ];\n      }\n\n      if (encryptionType === \"gemalto\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"gemalto_endpoint\",\n            required: true,\n            value: gemaltoConfiguration?.keysecure?.endpoint,\n          },\n          {\n            fieldKey: \"gemalto_token\",\n            required: true,\n            value: gemaltoConfiguration?.keysecure?.credentials?.token,\n          },\n          {\n            fieldKey: \"gemalto_domain\",\n            required: true,\n            value: gemaltoConfiguration?.keysecure?.credentials?.domain,\n          },\n          {\n            fieldKey: \"gemalto_retry\",\n            required: false,\n            value: gemaltoConfiguration?.keysecure?.credentials?.retry,\n            customValidation:\n              parseInt(gemaltoConfiguration?.keysecure?.credentials?.retry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"azure\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"azure_endpoint\",\n            required: true,\n            value: azureConfiguration?.keyvault?.endpoint,\n          },\n          {\n            fieldKey: \"azure_tenant_id\",\n            required: true,\n            value: azureConfiguration?.keyvault?.credentials?.tenant_id,\n          },\n          {\n            fieldKey: \"azure_client_id\",\n            required: true,\n            value: azureConfiguration?.keyvault?.credentials?.client_id,\n          },\n          {\n            fieldKey: \"azure_client_secret\",\n            required: true,\n            value: azureConfiguration?.keyvault?.credentials?.client_secret,\n          },\n        ];\n      }\n    }\n\n    const commonVal = commonFormValidation(encryptionValidation);\n\n    setIsFormValid(Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    enabledCustomCertificates,\n    encryptionEnabled,\n    encryptionType,\n    serverCertificate?.encoded_key,\n    serverCertificate?.encoded_cert,\n    mTLSCertificate?.encoded_key,\n    mTLSCertificate?.encoded_cert,\n    vaultClientCertificate?.encoded_key,\n    vaultClientCertificate?.encoded_cert,\n    vaultCACertificate?.encoded_key,\n    vaultCACertificate?.encoded_cert,\n    securityContext,\n    vaultConfiguration,\n    awsConfiguration,\n    gemaltoConfiguration,\n    azureConfiguration,\n    gcpConfiguration,\n    replicas,\n  ]);\n\n  const fetchEncryptionInfo = () => {\n    if (!refreshEncryptionInfo) {\n      setRefreshEncryptionInfo(true);\n      api\n        .invoke(\n          \"GET\",\n          `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`\n        )\n        .then((resp: ITenantEncryptionResponse) => {\n          if (resp.vault) {\n            setEncryptionType(\"vault\");\n            setVaultConfiguration(resp.vault);\n            if (resp.vault.tls) {\n              setVaultClientCertificateSecret(resp.vault.tls.crt);\n              setVaultCACertificateSecret(resp.vault.tls.ca);\n            }\n          } else if (resp.aws) {\n            setEncryptionType(\"aws\");\n            setAWSConfiguration(resp.aws);\n          } else if (resp.gemalto) {\n            setEncryptionType(\"gemalto\");\n            setGemaltoConfiguration(resp.gemalto);\n            if (resp.gemalto.keysecure.tls) {\n              setGemaltoCACertificateSecret(resp.gemalto.keysecure.tls.ca);\n            }\n          } else if (resp.gcp) {\n            setEncryptionType(\"gcp\");\n            setGCPConfiguration(resp.gcp);\n          } else if (resp.azure) {\n            setEncryptionType(\"azure\");\n            setAzureConfiguration(resp.azure);\n          }\n\n          setEncryptionEnabled(true);\n          setImage(resp.image);\n          setReplicas(resp.replicas);\n          if (resp.securityContext) {\n            setSecurityContext(resp.securityContext);\n          }\n          if (resp.server || resp.mtls_client) {\n            setEnabledCustomCertificates(true);\n          }\n          if (resp.server) {\n            setServerTLSCertificateSecret(resp.server);\n          }\n          if (resp.mtls_client) {\n            setMTLSCertificateSecret(resp.mtls_client);\n          }\n          setRefreshEncryptionInfo(false);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          console.log(err);\n          setRefreshEncryptionInfo(false);\n        });\n    }\n  };\n\n  useEffect(() => {\n    fetchEncryptionInfo();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const removeCertificate = (certificateInfo: ICertificateInfo) => {\n    setCertificatesToBeRemoved([\n      ...certificatesToBeRemoved,\n      certificateInfo.name,\n    ]);\n    if (certificateInfo.name === serverTLSCertificateSecret?.name) {\n      setServerTLSCertificateSecret(null);\n    }\n    if (certificateInfo.name === mTLSCertificateSecret?.name) {\n      setMTLSCertificateSecret(null);\n    }\n    if (certificateInfo.name === vaultClientCertificateSecret?.name) {\n      setVaultClientCertificateSecret(null);\n    }\n    if (certificateInfo.name === vaultCACertificateSecret?.name) {\n      setVaultCACertificateSecret(null);\n    }\n    if (certificateInfo.name === gemaltoCACertificateSecret?.name) {\n      setGemaltoCACertificateSecret(null);\n    }\n  };\n\n  const updateEncryptionConfiguration = () => {\n    if (encryptionEnabled) {\n      let insertEncrypt = {};\n      switch (encryptionType) {\n        case \"gemalto\":\n          let gemaltoCAIntroduce = {};\n\n          if (gemaltoCACertificate?.encoded_cert) {\n            gemaltoCAIntroduce = {\n              tls: {\n                ca: gemaltoCACertificate?.encoded_cert,\n              },\n            };\n          }\n          insertEncrypt = {\n            gemalto: {\n              keysecure: {\n                endpoint: gemaltoConfiguration?.keysecure?.endpoint || \"\",\n                credentials: {\n                  token:\n                    gemaltoConfiguration?.keysecure?.credentials?.token || \"\",\n                  domain:\n                    gemaltoConfiguration?.keysecure?.credentials?.domain || \"\",\n                  retry: parseInt(\n                    gemaltoConfiguration?.keysecure?.credentials?.retry\n                  ),\n                },\n                ...gemaltoCAIntroduce,\n              },\n            },\n          };\n          break;\n        case \"aws\":\n          insertEncrypt = {\n            aws: {\n              secretsmanager: {\n                endpoint: awsConfiguration?.secretsmanager?.endpoint || \"\",\n                region: awsConfiguration?.secretsmanager?.region || \"\",\n                kmskey: awsConfiguration?.secretsmanager?.kmskey || \"\",\n                credentials: {\n                  accesskey:\n                    awsConfiguration?.secretsmanager?.credentials?.accesskey ||\n                    \"\",\n                  secretkey:\n                    awsConfiguration?.secretsmanager?.credentials?.secretkey ||\n                    \"\",\n                  token:\n                    awsConfiguration?.secretsmanager?.credentials?.token || \"\",\n                },\n              },\n            },\n          };\n          break;\n        case \"azure\":\n          insertEncrypt = {\n            azure: {\n              keyvault: {\n                endpoint: azureConfiguration?.keyvault?.endpoint || \"\",\n                credentials: {\n                  tenant_id:\n                    azureConfiguration?.keyvault?.credentials?.tenant_id || \"\",\n                  client_id:\n                    azureConfiguration?.keyvault?.credentials?.client_id || \"\",\n                  client_secret:\n                    azureConfiguration?.keyvault?.credentials?.client_secret ||\n                    \"\",\n                },\n              },\n            },\n          };\n          break;\n        case \"gcp\":\n          insertEncrypt = {\n            gcp: {\n              secretmanager: {\n                project_id: gcpConfiguration?.secretmanager?.project_id || \"\",\n                endpoint: gcpConfiguration?.secretmanager?.endpoint || \"\",\n                credentials: {\n                  client_email:\n                    gcpConfiguration?.secretmanager?.credentials\n                      ?.client_email || \"\",\n                  client_id:\n                    gcpConfiguration?.secretmanager?.credentials?.client_id ||\n                    \"\",\n                  private_key_id:\n                    gcpConfiguration?.secretmanager?.credentials\n                      ?.private_key_id || \"\",\n                  private_key:\n                    gcpConfiguration?.secretmanager?.credentials?.private_key ||\n                    \"\",\n                },\n              },\n            },\n          };\n          break;\n        case \"vault\":\n          let vaultKeyPair = null;\n          let vaultCAInsert = null;\n          if (\n            vaultClientCertificate?.encoded_key &&\n            vaultClientCertificate?.encoded_cert\n          ) {\n            vaultKeyPair = {\n              key: vaultClientCertificate?.encoded_key,\n              crt: vaultClientCertificate?.encoded_cert,\n            };\n          }\n          if (vaultCACertificate?.encoded_cert) {\n            vaultCAInsert = {\n              ca: vaultCACertificate?.encoded_cert,\n            };\n          }\n          let vaultTLS = null;\n          if (vaultKeyPair || vaultCAInsert) {\n            vaultTLS = {\n              tls: {\n                ...vaultKeyPair,\n                ...vaultCAInsert,\n              },\n            };\n          }\n          insertEncrypt = {\n            vault: {\n              endpoint: vaultConfiguration?.endpoint || \"\",\n              engine: vaultConfiguration?.engine || \"\",\n              namespace: vaultConfiguration?.namespace || \"\",\n              prefix: vaultConfiguration?.prefix || \"\",\n              approle: {\n                engine: vaultConfiguration?.approle?.engine || \"\",\n                id: vaultConfiguration?.approle?.id || \"\",\n                secret: vaultConfiguration?.approle?.secret || \"\",\n                retry: parseInt(vaultConfiguration?.approle?.retry),\n              },\n              ...vaultTLS,\n              status: {\n                ping: parseInt(vaultConfiguration?.status?.ping),\n              },\n            },\n          };\n          break;\n      }\n\n      let encryptionServerKeyPair: any = {};\n      let encryptionClientKeyPair: any = {};\n\n      if (mTLSCertificate?.encoded_key && mTLSCertificate?.encoded_cert) {\n        encryptionClientKeyPair = {\n          client: {\n            key: mTLSCertificate?.encoded_key,\n            crt: mTLSCertificate?.encoded_cert,\n          },\n        };\n      }\n\n      if (serverCertificate?.encoded_key && serverCertificate?.encoded_cert) {\n        encryptionServerKeyPair = {\n          server: {\n            key: serverCertificate?.encoded_key,\n            crt: serverCertificate?.encoded_cert,\n          },\n        };\n      }\n      const dataSend = {\n        secretsToBeDeleted: certificatesToBeRemoved || [],\n        replicas: replicas,\n        securityContext: securityContext,\n        image: image,\n        ...encryptionClientKeyPair,\n        ...encryptionServerKeyPair,\n        ...insertEncrypt,\n      };\n      if (!updatingEncryption) {\n        setUpdatingEncryption(true);\n        api\n          .invoke(\n            \"PUT\",\n            `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`,\n            dataSend\n          )\n          .then(() => {\n            setConfirmOpen(false);\n            setUpdatingEncryption(false);\n            fetchEncryptionInfo();\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setUpdatingEncryption(false);\n            setConfirmOpen(false);\n            setErrorSnackMessage(err);\n          });\n      }\n    } else {\n      if (!updatingEncryption) {\n        setUpdatingEncryption(true);\n        api\n          .invoke(\n            \"DELETE\",\n            `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`,\n            {}\n          )\n          .then(() => {\n            fetchEncryptionInfo();\n            setUpdatingEncryption(false);\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setUpdatingEncryption(false);\n            setErrorSnackMessage(err);\n          });\n      }\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Grid container spacing={1}>\n        {confirmOpen && (\n          <ConfirmDialog\n            isOpen={confirmOpen}\n            title={\n              encryptionEnabled\n                ? \"Enable encryption at rest for tenant?\"\n                : \"Disable encryption at rest for tenant?\"\n            }\n            confirmText={encryptionEnabled ? \"Enable\" : \"Disable\"}\n            cancelText=\"Cancel\"\n            onClose={() => setConfirmOpen(false)}\n            onConfirm={updateEncryptionConfiguration}\n            confirmationContent={\n              <DialogContentText>\n                {encryptionEnabled\n                  ? \"Data will be encrypted using and external KMS\"\n                  : \"Current encrypted information will not be accessible\"}\n              </DialogContentText>\n            }\n          />\n        )}\n        <Grid item xs>\n          <h1 className={classes.sectionTitle}>Encryption</h1>\n        </Grid>\n        <Grid item xs={4} justifyContent={\"end\"} textAlign={\"right\"}>\n          <FormSwitchWrapper\n            label={\"\"}\n            indicatorLabels={[\"Enabled\", \"Disabled\"]}\n            checked={encryptionEnabled}\n            value={\"tenant_encryption\"}\n            id=\"tenant-encryption\"\n            name=\"tenant-encryption\"\n            onChange={() => {\n              setEncryptionEnabled(!encryptionEnabled);\n            }}\n            description=\"\"\n          />\n        </Grid>\n        <Grid xs={12}>\n          <hr className={classes.hrClass} />\n        </Grid>\n        {encryptionEnabled && (\n          <Fragment>\n            <Grid item xs={12} className={classes.encryptionTypeOptions}>\n              <RadioGroupSelector\n                currentSelection={encryptionType}\n                id=\"encryptionType\"\n                name=\"encryptionType\"\n                label=\"Encryption Options\"\n                onChange={(e) => {\n                  setEncryptionType(e.target.value);\n                }}\n                selectorOptions={[\n                  { label: \"Vault\", value: \"vault\" },\n                  { label: \"AWS\", value: \"aws\" },\n                  { label: \"Gemalto\", value: \"gemalto\" },\n                  { label: \"GCP\", value: \"gcp\" },\n                  { label: \"Azure\", value: \"azure\" },\n                ]}\n              />\n            </Grid>\n            {encryptionType === \"vault\" && (\n              <Fragment>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    id=\"vault_endpoint\"\n                    name=\"vault_endpoint\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setVaultConfiguration({\n                        ...vaultConfiguration,\n                        endpoint: e.target.value,\n                      })\n                    }\n                    label=\"Endpoint\"\n                    value={vaultConfiguration?.endpoint || \"\"}\n                    error={validationErrors[\"vault_ping\"] || \"\"}\n                    required\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    id=\"vault_engine\"\n                    name=\"vault_engine\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setVaultConfiguration({\n                        ...vaultConfiguration,\n                        engine: e.target.value,\n                      })\n                    }\n                    label=\"Engine\"\n                    value={vaultConfiguration?.engine || \"\"}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    id=\"vault_namespace\"\n                    name=\"vault_namespace\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setVaultConfiguration({\n                        ...vaultConfiguration,\n                        namespace: e.target.value,\n                      })\n                    }\n                    label=\"Namespace\"\n                    value={vaultConfiguration?.namespace || \"\"}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    id=\"vault_prefix\"\n                    name=\"vault_prefix\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setVaultConfiguration({\n                        ...vaultConfiguration,\n                        prefix: e.target.value,\n                      })\n                    }\n                    label=\"Prefix\"\n                    value={vaultConfiguration?.prefix || \"\"}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <SectionTitle>App Role</SectionTitle>\n                </Grid>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    id=\"vault_approle_engine\"\n                    name=\"vault_approle_engine\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setVaultConfiguration({\n                        ...vaultConfiguration,\n                        approle: {\n                          ...vaultConfiguration?.approle,\n                          engine: e.target.value,\n                        },\n                      })\n                    }\n                    label=\"Engine\"\n                    value={vaultConfiguration?.approle?.engine || \"\"}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    type={showVaultAppRoleID ? \"text\" : \"password\"}\n                    id=\"vault_id\"\n                    name=\"vault_id\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setVaultConfiguration({\n                        ...vaultConfiguration,\n                        approle: {\n                          ...vaultConfiguration?.approle,\n                          id: e.target.value,\n                        },\n                      })\n                    }\n                    label=\"AppRole ID\"\n                    value={vaultConfiguration?.approle?.id || \"\"}\n                    required\n                    error={validationErrors[\"vault_id\"] || \"\"}\n                    overlayIcon={\n                      showVaultAppRoleID ? (\n                        <VisibilityOffIcon />\n                      ) : (\n                        <RemoveRedEyeIcon />\n                      )\n                    }\n                    overlayAction={() =>\n                      setShowVaultAppRoleID(!showVaultAppRoleID)\n                    }\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    type={showVaultAppRoleSecret ? \"text\" : \"password\"}\n                    id=\"vault_secret\"\n                    name=\"vault_secret\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setVaultConfiguration({\n                        ...vaultConfiguration,\n                        approle: {\n                          ...vaultConfiguration?.approle,\n                          secret: e.target.value,\n                        },\n                      })\n                    }\n                    label=\"AppRole Secret\"\n                    value={vaultConfiguration?.approle?.secret || \"\"}\n                    required\n                    error={validationErrors[\"vault_secret\"] || \"\"}\n                    overlayIcon={\n                      showVaultAppRoleSecret ? (\n                        <VisibilityOffIcon />\n                      ) : (\n                        <RemoveRedEyeIcon />\n                      )\n                    }\n                    overlayAction={() =>\n                      setShowVaultAppRoleSecret(!showVaultAppRoleSecret)\n                    }\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    min=\"0\"\n                    id=\"vault_retry\"\n                    name=\"vault_retry\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setVaultConfiguration({\n                        ...vaultConfiguration,\n                        approle: {\n                          ...vaultConfiguration?.approle,\n                          retry: e.target.value,\n                        },\n                      })\n                    }\n                    label=\"Retry (Seconds)\"\n                    error={validationErrors[\"vault_retry\"] || \"\"}\n                    value={vaultConfiguration?.approle?.retry || \"\"}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <SectionTitle>Vault Certificates (optional)</SectionTitle>\n                </Grid>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Mutual TLS authentication with Vault (optional)\n                    </legend>\n                    {vaultClientCertificateSecret ? (\n                      <TLSCertificate\n                        certificateInfo={vaultClientCertificateSecret}\n                        onDelete={() =>\n                          removeCertificate(vaultClientCertificateSecret)\n                        }\n                      />\n                    ) : (\n                      <Fragment>\n                        <FileSelector\n                          onChange={(encodedValue, fileName) =>\n                            setVaultClientCertificate({\n                              encoded_key: encodedValue || \"\",\n                              id: vaultClientCertificate?.id || \"\",\n                              key: fileName || \"\",\n                              cert: vaultClientCertificate?.cert || \"\",\n                              encoded_cert:\n                                vaultClientCertificate?.encoded_cert || \"\",\n                            })\n                          }\n                          accept=\".key,.pem\"\n                          id=\"vault_key\"\n                          name=\"vault_key\"\n                          label=\"Key\"\n                          value={vaultClientCertificate?.key || \"\"}\n                        />\n                        <FileSelector\n                          onChange={(encodedValue, fileName) =>\n                            setVaultClientCertificate({\n                              encoded_key:\n                                vaultClientCertificate?.encoded_key || \"\",\n                              id: vaultClientCertificate?.id || \"\",\n                              key: vaultClientCertificate?.key || \"\",\n                              cert: fileName || \"\",\n                              encoded_cert: encodedValue || \"\",\n                            })\n                          }\n                          accept=\".cer,.crt,.cert,.pem\"\n                          id=\"vault_cert\"\n                          name=\"vault_cert\"\n                          label=\"Cert\"\n                          value={vaultClientCertificate?.cert || \"\"}\n                        />\n                      </Fragment>\n                    )}\n                  </fieldset>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Vault CA certificate (optional)\n                    </legend>\n                    {vaultCACertificateSecret ? (\n                      <TLSCertificate\n                        certificateInfo={vaultCACertificateSecret}\n                        onDelete={() =>\n                          removeCertificate(vaultCACertificateSecret)\n                        }\n                      />\n                    ) : (\n                      <FileSelector\n                        onChange={(encodedValue, fileName) =>\n                          setVaultCACertificate({\n                            encoded_key: vaultCACertificate?.encoded_key || \"\",\n                            id: vaultCACertificate?.id || \"\",\n                            key: vaultCACertificate?.key || \"\",\n                            cert: fileName || \"\",\n                            encoded_cert: encodedValue || \"\",\n                          })\n                        }\n                        accept=\".cer,.crt,.cert,.pem\"\n                        id=\"vault_ca\"\n                        name=\"vault_ca\"\n                        label=\"CA\"\n                        value={vaultCACertificate?.cert || \"\"}\n                      />\n                    )}\n                  </fieldset>\n                </Grid>\n                <Grid item xs={12}>\n                  <SectionTitle>Status</SectionTitle>\n                </Grid>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    min=\"0\"\n                    id=\"vault_ping\"\n                    name=\"vault_ping\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setVaultConfiguration({\n                        ...vaultConfiguration,\n                        status: {\n                          ...vaultConfiguration?.status,\n                          ping: e.target.value,\n                        },\n                      })\n                    }\n                    label=\"Ping (Seconds)\"\n                    error={validationErrors[\"vault_ping\"] || \"\"}\n                    value={vaultConfiguration?.status?.ping || \"\"}\n                  />\n                </Grid>\n              </Fragment>\n            )}\n            {encryptionType === \"azure\" && (\n              <Fragment>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    id=\"azure_endpoint\"\n                    name=\"azure_endpoint\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setAzureConfiguration({\n                        ...azureConfiguration,\n                        keyvault: {\n                          ...azureConfiguration?.keyvault,\n                          endpoint: e.target.value,\n                        },\n                      })\n                    }\n                    label=\"Endpoint\"\n                    error={validationErrors[\"azure_endpoint\"] || \"\"}\n                    value={azureConfiguration?.keyvault?.endpoint || \"\"}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Credentials\n                    </legend>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"azure_tenant_id\"\n                        name=\"azure_tenant_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAzureConfiguration({\n                            ...azureConfiguration,\n                            keyvault: {\n                              ...azureConfiguration?.keyvault,\n                              credentials: {\n                                ...azureConfiguration?.keyvault?.credentials,\n                                tenant_id: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Tenant ID\"\n                        value={\n                          azureConfiguration?.keyvault?.credentials\n                            ?.tenant_id || \"\"\n                        }\n                        error={validationErrors[\"azure_tenant_id\"] || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"azure_client_id\"\n                        name=\"azure_client_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAzureConfiguration({\n                            ...azureConfiguration,\n                            keyvault: {\n                              ...azureConfiguration?.keyvault,\n                              credentials: {\n                                ...azureConfiguration?.keyvault?.credentials,\n                                client_id: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Client ID\"\n                        value={\n                          azureConfiguration?.keyvault?.credentials\n                            ?.client_id || \"\"\n                        }\n                        error={validationErrors[\"azure_client_id\"] || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"azure_client_secret\"\n                        name=\"azure_client_secret\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAzureConfiguration({\n                            ...azureConfiguration,\n                            keyvault: {\n                              ...azureConfiguration?.keyvault,\n                              credentials: {\n                                ...azureConfiguration?.keyvault?.credentials,\n                                client_secret: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Client Secret\"\n                        value={\n                          azureConfiguration?.keyvault?.credentials\n                            ?.client_secret || \"\"\n                        }\n                        error={validationErrors[\"azure_client_secret\"] || \"\"}\n                      />\n                    </Grid>\n                  </fieldset>\n                </Grid>\n              </Fragment>\n            )}\n            {encryptionType === \"gcp\" && (\n              <Fragment>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    id=\"gcp_project_id\"\n                    name=\"gcp_project_id\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setGCPConfiguration({\n                        ...gcpConfiguration,\n                        secretmanager: {\n                          ...gcpConfiguration?.secretmanager,\n                          project_id: e.target.value,\n                        },\n                      })\n                    }\n                    label=\"Project ID\"\n                    value={gcpConfiguration?.secretmanager.project_id || \"\"}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    id=\"gcp_endpoint\"\n                    name=\"gcp_endpoint\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setGCPConfiguration({\n                        ...gcpConfiguration,\n                        secretmanager: {\n                          ...gcpConfiguration?.secretmanager,\n                          endpoint: e.target.value,\n                        },\n                      })\n                    }\n                    label=\"Endpoint\"\n                    value={gcpConfiguration?.secretmanager.endpoint || \"\"}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Credentials\n                    </legend>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gcp_client_email\"\n                        name=\"gcp_client_email\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGCPConfiguration({\n                            ...gcpConfiguration,\n                            secretmanager: {\n                              ...gcpConfiguration?.secretmanager,\n                              credentials: {\n                                ...gcpConfiguration?.secretmanager.credentials,\n                                client_email: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Client Email\"\n                        value={\n                          gcpConfiguration?.secretmanager.credentials\n                            ?.client_email || \"\"\n                        }\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gcp_client_id\"\n                        name=\"gcp_client_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGCPConfiguration({\n                            ...gcpConfiguration,\n                            secretmanager: {\n                              ...gcpConfiguration?.secretmanager,\n                              credentials: {\n                                ...gcpConfiguration?.secretmanager.credentials,\n                                client_id: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Client ID\"\n                        value={\n                          gcpConfiguration?.secretmanager.credentials\n                            ?.client_id || \"\"\n                        }\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gcp_private_key_id\"\n                        name=\"gcp_private_key_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGCPConfiguration({\n                            ...gcpConfiguration,\n                            secretmanager: {\n                              ...gcpConfiguration?.secretmanager,\n                              credentials: {\n                                ...gcpConfiguration?.secretmanager.credentials,\n                                private_key_id: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Private Key ID\"\n                        value={\n                          gcpConfiguration?.secretmanager.credentials\n                            ?.private_key_id || \"\"\n                        }\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gcp_private_key\"\n                        name=\"gcp_private_key\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGCPConfiguration({\n                            ...gcpConfiguration,\n                            secretmanager: {\n                              ...gcpConfiguration?.secretmanager,\n                              credentials: {\n                                ...gcpConfiguration?.secretmanager.credentials,\n                                private_key: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Private Key\"\n                        value={\n                          gcpConfiguration?.secretmanager.credentials\n                            ?.private_key || \"\"\n                        }\n                      />\n                    </Grid>\n                  </fieldset>\n                </Grid>\n              </Fragment>\n            )}\n            {encryptionType === \"aws\" && (\n              <Fragment>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    id=\"aws_endpoint\"\n                    name=\"aws_endpoint\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setAWSConfiguration({\n                        ...awsConfiguration,\n                        secretsmanager: {\n                          ...awsConfiguration?.secretsmanager,\n                          endpoint: e.target.value,\n                        },\n                      })\n                    }\n                    label=\"Endpoint\"\n                    value={awsConfiguration?.secretsmanager?.endpoint || \"\"}\n                    required\n                    error={validationErrors[\"aws_endpoint\"] || \"\"}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    id=\"aws_region\"\n                    name=\"aws_region\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setAWSConfiguration({\n                        ...awsConfiguration,\n                        secretsmanager: {\n                          ...awsConfiguration?.secretsmanager,\n                          region: e.target.value,\n                        },\n                      })\n                    }\n                    label=\"Region\"\n                    value={awsConfiguration?.secretsmanager?.region || \"\"}\n                    error={validationErrors[\"aws_region\"] || \"\"}\n                    required\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    id=\"aws_kmsKey\"\n                    name=\"aws_kmsKey\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setAWSConfiguration({\n                        ...awsConfiguration,\n                        secretsmanager: {\n                          ...awsConfiguration?.secretsmanager,\n                          kmskey: e.target.value,\n                        },\n                      })\n                    }\n                    label=\"KMS Key\"\n                    value={awsConfiguration?.secretsmanager?.kmskey || \"\"}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Credentials\n                    </legend>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"aws_accessKey\"\n                        name=\"aws_accessKey\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAWSConfiguration({\n                            ...awsConfiguration,\n                            secretsmanager: {\n                              ...awsConfiguration?.secretsmanager,\n                              credentials: {\n                                ...awsConfiguration?.secretsmanager\n                                  ?.credentials,\n                                accesskey: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Access Key\"\n                        value={\n                          awsConfiguration?.secretsmanager?.credentials\n                            ?.accesskey || \"\"\n                        }\n                        error={validationErrors[\"aws_accessKey\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"aws_secretKey\"\n                        name=\"aws_secretKey\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAWSConfiguration({\n                            ...awsConfiguration,\n                            secretsmanager: {\n                              ...awsConfiguration?.secretsmanager,\n                              credentials: {\n                                ...awsConfiguration?.secretsmanager\n                                  ?.credentials,\n                                secretkey: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Secret Key\"\n                        value={\n                          awsConfiguration?.secretsmanager?.credentials\n                            ?.secretkey || \"\"\n                        }\n                        error={validationErrors[\"aws_secretKey\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"aws_token\"\n                        name=\"aws_token\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAWSConfiguration({\n                            ...awsConfiguration,\n                            secretsmanager: {\n                              ...awsConfiguration?.secretsmanager,\n                              credentials: {\n                                ...awsConfiguration?.secretsmanager\n                                  ?.credentials,\n                                token: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Token\"\n                        value={\n                          awsConfiguration?.secretsmanager?.credentials\n                            ?.token || \"\"\n                        }\n                      />\n                    </Grid>\n                  </fieldset>\n                </Grid>\n              </Fragment>\n            )}\n            {encryptionType === \"gemalto\" && (\n              <Fragment>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    id=\"gemalto_endpoint\"\n                    name=\"gemalto_endpoint\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setGemaltoConfiguration({\n                        ...gemaltoConfiguration,\n                        keysecure: {\n                          ...gemaltoConfiguration?.keysecure,\n                          endpoint: e.target.value,\n                        },\n                      })\n                    }\n                    label=\"Endpoint\"\n                    value={gemaltoConfiguration?.keysecure?.endpoint || \"\"}\n                    error={validationErrors[\"gemalto_endpoint\"] || \"\"}\n                    required\n                  />\n                </Grid>\n                <Grid\n                  item\n                  xs={12}\n                  style={{\n                    marginBottom: 15,\n                  }}\n                >\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Credentials\n                    </legend>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gemalto_token\"\n                        name=\"gemalto_token\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGemaltoConfiguration({\n                            ...gemaltoConfiguration,\n                            keysecure: {\n                              ...gemaltoConfiguration?.keysecure,\n                              credentials: {\n                                ...gemaltoConfiguration?.keysecure?.credentials,\n                                token: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Token\"\n                        value={\n                          gemaltoConfiguration?.keysecure?.credentials?.token ||\n                          \"\"\n                        }\n                        error={validationErrors[\"gemalto_token\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gemalto_domain\"\n                        name=\"gemalto_domain\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGemaltoConfiguration({\n                            ...gemaltoConfiguration,\n                            keysecure: {\n                              ...gemaltoConfiguration?.keysecure,\n                              credentials: {\n                                ...gemaltoConfiguration?.keysecure?.credentials,\n                                domain: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Domain\"\n                        value={\n                          gemaltoConfiguration?.keysecure?.credentials\n                            ?.domain || \"\"\n                        }\n                        error={validationErrors[\"gemalto_domain\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        type=\"number\"\n                        min=\"0\"\n                        id=\"gemalto_retry\"\n                        name=\"gemalto_retry\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGemaltoConfiguration({\n                            ...gemaltoConfiguration,\n                            keysecure: {\n                              ...gemaltoConfiguration?.keysecure,\n                              credentials: {\n                                ...gemaltoConfiguration?.keysecure?.credentials,\n                                retry: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Retry (seconds)\"\n                        value={\n                          gemaltoConfiguration?.keysecure?.credentials?.retry ||\n                          \"\"\n                        }\n                        error={validationErrors[\"gemalto_retry\"] || \"\"}\n                      />\n                    </Grid>\n                  </fieldset>\n                </Grid>\n                <Grid\n                  item\n                  xs={12}\n                  style={{\n                    marginBottom: 15,\n                  }}\n                >\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Custom CA Root certificate verification\n                    </legend>\n                    {gemaltoCACertificateSecret ? (\n                      <TLSCertificate\n                        certificateInfo={gemaltoCACertificateSecret}\n                        onDelete={() =>\n                          removeCertificate(gemaltoCACertificateSecret)\n                        }\n                      />\n                    ) : (\n                      <FileSelector\n                        onChange={(encodedValue, fileName) =>\n                          setGemaltotCACertificate({\n                            encoded_key:\n                              gemaltoCACertificate?.encoded_key || \"\",\n                            id: gemaltoCACertificate?.id || \"\",\n                            key: gemaltoCACertificate?.key || \"\",\n                            cert: fileName || \"\",\n                            encoded_cert: encodedValue || \"\",\n                          })\n                        }\n                        accept=\".cer,.crt,.cert,.pem\"\n                        id=\"gemalto_ca\"\n                        name=\"gemalto_ca\"\n                        label=\"CA\"\n                        value={gemaltoCACertificate?.cert || \"\"}\n                      />\n                    )}\n                  </fieldset>\n                </Grid>\n              </Fragment>\n            )}\n            <Grid item xs={12}>\n              <SectionTitle>Additional Configuration for KES</SectionTitle>\n            </Grid>\n            <Grid item xs={12}>\n              <FormSwitchWrapper\n                value=\"enableCustomCertsForKES\"\n                id=\"enableCustomCertsForKES\"\n                name=\"enableCustomCertsForKES\"\n                checked={enabledCustomCertificates}\n                onChange={() =>\n                  setEnabledCustomCertificates(!enabledCustomCertificates)\n                }\n                label={\"Custom Certificates\"}\n              />\n            </Grid>\n            {enabledCustomCertificates && (\n              <Fragment>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      KES server TLS Certificates (optional)\n                    </legend>\n                    {serverTLSCertificateSecret ? (\n                      <TLSCertificate\n                        certificateInfo={serverTLSCertificateSecret}\n                        onDelete={() =>\n                          removeCertificate(serverTLSCertificateSecret)\n                        }\n                      />\n                    ) : (\n                      <Fragment>\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            setServerCertificate({\n                              encoded_key: encodedValue || \"\",\n                              id: serverCertificate?.id || \"\",\n                              key: fileName || \"\",\n                              cert: serverCertificate?.cert || \"\",\n                              encoded_cert:\n                                serverCertificate?.encoded_cert || \"\",\n                            });\n                            cleanValidation(\"serverKey\");\n                          }}\n                          accept=\".key,.pem\"\n                          id=\"serverKey\"\n                          name=\"serverKey\"\n                          label=\"Key\"\n                          value={serverCertificate?.key}\n                        />\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            setServerCertificate({\n                              encoded_key: serverCertificate?.encoded_key || \"\",\n                              id: serverCertificate?.id || \"\",\n                              key: serverCertificate?.key || \"\",\n                              cert: fileName || \"\",\n                              encoded_cert: encodedValue || \"\",\n                            });\n                            cleanValidation(\"serverCert\");\n                          }}\n                          accept=\".cer,.crt,.cert,.pem\"\n                          id=\"serverCert\"\n                          name=\"serverCert\"\n                          label=\"Cert\"\n                          value={serverCertificate?.cert}\n                        />\n                      </Fragment>\n                    )}\n                  </fieldset>\n                </Grid>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Mutual TLS authentication with MinIO (optional)\n                    </legend>\n                    {mTLSCertificateSecret ? (\n                      <TLSCertificate\n                        certificateInfo={mTLSCertificateSecret}\n                        onDelete={() =>\n                          removeCertificate(mTLSCertificateSecret)\n                        }\n                      />\n                    ) : (\n                      <Fragment>\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            setMTLSCertificate({\n                              encoded_key: encodedValue || \"\",\n                              id: mTLSCertificate?.id || \"\",\n                              key: fileName || \"\",\n                              cert: mTLSCertificate?.cert || \"\",\n                              encoded_cert: mTLSCertificate?.encoded_cert || \"\",\n                            });\n                            cleanValidation(\"clientKey\");\n                          }}\n                          accept=\".key,.pem\"\n                          id=\"clientKey\"\n                          name=\"clientKey\"\n                          label=\"Key\"\n                          value={mTLSCertificate?.key}\n                        />\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            setMTLSCertificate({\n                              encoded_key: mTLSCertificate?.encoded_key || \"\",\n                              id: mTLSCertificate?.id || \"\",\n                              key: mTLSCertificate?.key || \"\",\n                              cert: fileName || \"\",\n                              encoded_cert: encodedValue || \"\",\n                            });\n                            cleanValidation(\"clientCert\");\n                          }}\n                          accept=\".cer,.crt,.cert,.pem\"\n                          id=\"clientCert\"\n                          name=\"clientCert\"\n                          label=\"Cert\"\n                          value={mTLSCertificate?.cert}\n                        />\n                      </Fragment>\n                    )}\n                  </fieldset>\n                </Grid>\n              </Fragment>\n            )}\n            <Grid item xs={12}>\n              <InputBoxWrapper\n                type=\"text\"\n                id=\"image\"\n                name=\"image\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  setImage(e.target.value)\n                }\n                label=\"Image\"\n                placeholder=\"minio/kes:v0.17.6\"\n                value={image}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <InputBoxWrapper\n                type=\"number\"\n                min=\"1\"\n                id=\"replicas\"\n                name=\"replicas\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  setReplicas(e.target.value)\n                }\n                label=\"Replicas\"\n                value={replicas}\n                required\n                error={validationErrors[\"replicas\"] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <SectionTitle>SecurityContext for KES</SectionTitle>\n            </Grid>\n            <Grid item xs={12}>\n              <div\n                className={`${classes.multiContainer} ${classes.responsiveContainer}`}\n              >\n                <div\n                  className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                >\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"kes_securityContext_runAsUser\"\n                    name=\"kes_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setSecurityContext({\n                        ...securityContext,\n                        runAsUser: e.target.value,\n                      });\n                    }}\n                    label=\"Run As User\"\n                    value={securityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\"kes_securityContext_runAsUser\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div\n                  className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                >\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"kes_securityContext_runAsGroup\"\n                    name=\"kes_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setSecurityContext({\n                        ...securityContext,\n                        runAsGroup: e.target.value,\n                      });\n                    }}\n                    label=\"Run As Group\"\n                    value={securityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\"kes_securityContext_runAsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div\n                  className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                >\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"kes_securityContext_fsGroup\"\n                    name=\"kes_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setSecurityContext({\n                        ...securityContext,\n                        fsGroup: e.target.value,\n                      });\n                    }}\n                    label=\"FsGroup\"\n                    value={securityContext.fsGroup}\n                    required\n                    error={\n                      validationErrors[\"kes_securityContext_fsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <Grid item xs={12}>\n              <FormSwitchWrapper\n                value=\"kesSecurityContextRunAsNonRoot\"\n                id=\"kes_securityContext_runAsNonRoot\"\n                name=\"kes_securityContext_runAsNonRoot\"\n                checked={securityContext.runAsNonRoot}\n                onChange={(e) => {\n                  const targetD = e.target;\n                  const checked = targetD.checked;\n                  setSecurityContext({\n                    ...securityContext,\n                    runAsNonRoot: checked,\n                  });\n                }}\n                label={\"Do not run as Root\"}\n              />\n            </Grid>\n          </Fragment>\n        )}\n        <Grid item xs={12} textAlign={\"right\"}>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={!isFormValid}\n            onClick={() => setConfirmOpen(true)}\n          >\n            Save\n          </Button>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  loadingTenant: state.tenants.tenantDetails.loadingTenant,\n  selectedTenant: state.tenants.tenantDetails.currentTenant,\n  tenant: state.tenants.tenantDetails.tenantInfo,\n});\n\nconst mapDispatchToProps = {\n  setErrorSnackMessage,\n  setTenantDetailsLoad,\n};\n\nconst connector = connect(mapState, mapDispatchToProps);\n\nexport default withStyles(styles)(connector(TenantEncryption));\n","import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport { Theme } from \"@mui/material/styles\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    errorBlock: {\n      color: theme.palette?.error.main || \"#C83B51\",\n    },\n  });\n\ninterface IErrorBlockProps {\n  classes: any;\n  errorMessage: string;\n  withBreak?: boolean;\n}\n\nconst ErrorBlock = ({\n  classes,\n  errorMessage,\n  withBreak = true,\n}: IErrorBlockProps) => {\n  return (\n    <React.Fragment>\n      {withBreak && <br />}\n      <Typography component=\"p\" variant=\"body1\" className={classes.errorBlock}>\n        {errorMessage}\n      </Typography>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(ErrorBlock);\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\"\n}), 'RemoveRedEye');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78 3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z\"\n}), 'VisibilityOff');\n\nexports.default = _default;"],"names":["withStyles","theme","createStyles","fieldBasic","tooltipHelper","valueString","maxWidth","whiteSpace","overflow","textOverflow","marginTop","fileInputField","margin","flexFlow","fileInputStyles","inputLabel","fontWeight","textBoxContainer","border","paddingLeft","label","classes","onChange","id","name","disabled","tooltip","required","error","accept","value","useState","showFileSelector","setShowSelector","Grid","item","xs","className","fieldBottom","fieldContainer","errorInField","InputLabel","htmlFor","fieldLabelError","tooltipContainer","Tooltip","title","placement","HelpIcon","type","e","fileName","get","evt","callback","file","target","files","reader","FileReader","readAsDataURL","onload","fileBase64","result","fileArray","toString","split","length","fileProcess","data","IconButton","color","component","onClick","disableRipple","disableFocusRipple","size","Cancel","ErrorBlock","errorMessage","fileReselect","AttachFile","props","xmlns","fill","viewBox","d","transform","clipPath","root","padding","backgroundColor","textDecoration","cursor","fontSize","palette","info","main","fontFamily","certificateIcon","float","paddingTop","paddingRight","certificateInfo","certificateWrapper","height","userSelect","borderRadius","certificateExpiry","display","alignItems","flexWrap","marginBottom","certificateDomains","certificatesList","textTransform","overflowY","maxHeight","certificatesListItem","borderBottom","minWidth","marginRight","opacity","onDelete","certificates","domains","Chip","variant","Container","Typography","gutterBottom","Box","EventBusy","format","expiry","Divider","List","map","dom","ListItem","ListItemAvatar","Language","ListItemText","primary","mapDispatchToProps","setErrorSnackMessage","setTenantDetailsLoad","connector","connect","state","loadingTenant","tenants","tenantDetails","selectedTenant","currentTenant","tenant","tenantInfo","tenantDetailsStyles","spacingUtils","loaderAlign","textAlign","bold","italic","fontStyle","paperContainer","fileItem","certInputRow","caCertsRow","containerForHeader","spacing","createTenantCommon","formFieldStyles","modalBasic","wizardCommon","encryptionEnabled","setEncryptionEnabled","encryptionType","setEncryptionType","replicas","setReplicas","image","setImage","refreshEncryptionInfo","setRefreshEncryptionInfo","fsGroup","runAsGroup","runAsNonRoot","runAsUser","securityContext","setSecurityContext","vaultConfiguration","setVaultConfiguration","awsConfiguration","setAWSConfiguration","gemaltoConfiguration","setGemaltoConfiguration","azureConfiguration","setAzureConfiguration","gcpConfiguration","setGCPConfiguration","enabledCustomCertificates","setEnabledCustomCertificates","updatingEncryption","setUpdatingEncryption","serverTLSCertificateSecret","setServerTLSCertificateSecret","mTLSCertificateSecret","setMTLSCertificateSecret","mTLSCertificate","setMTLSCertificate","certificatesToBeRemoved","setCertificatesToBeRemoved","showVaultAppRoleID","setShowVaultAppRoleID","isFormValid","setIsFormValid","showVaultAppRoleSecret","setShowVaultAppRoleSecret","vaultClientCertificateSecret","setVaultClientCertificateSecret","vaultCACertificateSecret","setVaultCACertificateSecret","vaultClientCertificate","setVaultClientCertificate","serverCertificate","setServerCertificate","vaultCACertificate","setVaultCACertificate","gemaltoCACertificateSecret","setGemaltoCACertificateSecret","gemaltoCACertificate","setGemaltotCACertificate","validationErrors","setValidationErrors","cleanValidation","fieldName","clearValidationError","confirmOpen","setConfirmOpen","useEffect","encryptionValidation","fieldKey","customValidation","parseInt","customValidationMessage","encoded_key","encoded_cert","endpoint","approle","secret","status","ping","retry","secretsmanager","region","credentials","accesskey","secretkey","keysecure","token","domain","keyvault","tenant_id","client_id","client_secret","commonVal","commonFormValidation","Object","keys","fetchEncryptionInfo","api","namespace","then","resp","vault","tls","crt","ca","aws","gemalto","gcp","azure","server","mtls_client","catch","err","console","log","removeCertificate","container","isOpen","confirmText","cancelText","onClose","onConfirm","insertEncrypt","gemaltoCAIntroduce","kmskey","secretmanager","project_id","client_email","private_key_id","private_key","vaultKeyPair","vaultCAInsert","key","vaultTLS","engine","prefix","encryptionServerKeyPair","encryptionClientKeyPair","client","dataSend","secretsToBeDeleted","confirmationContent","sectionTitle","justifyContent","indicatorLabels","checked","description","hrClass","Fragment","encryptionTypeOptions","currentSelection","selectorOptions","overlayIcon","overlayAction","min","fieldGroup","descriptionText","encodedValue","cert","style","placeholder","multiContainer","responsiveContainer","formFieldRow","rightSpacer","errorBlock","withBreak","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx"],"sourceRoot":""}