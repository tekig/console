{"version":3,"file":"static/js/9968.676114b2.chunk.js","mappings":"yNAyEMA,EAAqB,CACzBC,qBAAAA,EAAAA,IAGIC,GAAYC,EAAAA,EAAAA,IAAQ,KAAMH,GAEhC,UAAeE,GA/CM,SAAC,GAKK,IAJzBE,EAIwB,EAJxBA,2BACAC,EAGwB,EAHxBA,WACAC,EAEwB,EAFxBA,eACAL,EACwB,EADxBA,qBAMA,GAAyCM,EAAAA,EAAAA,IAJpB,kBAAMH,GAA2B,MACnC,SAACI,GAAD,OAA+BP,EAAqBO,MAGvE,eAAOC,EAAP,KAAsBC,EAAtB,KAEA,IAAKJ,EACH,OAAO,KAST,OACE,SAAC,IAAD,CACEK,MAAK,gBACLC,YAAa,SACbC,OAAQR,EACRS,WAAW,SAAC,KAAD,IACXC,UAAWN,EACXO,UAboB,WACtBN,EAAgB,SAAD,0BAA8BJ,GAAkB,CAC7DW,KAAMX,KAYNY,QAtBY,kBAAMd,GAA2B,IAuB7Ce,qBACE,UAAC,IAAD,sDACyC,uBAAIb,IAD7C,MACkE,kBADlE,uD,0DCjCR,IAvBe,SACbc,EACAC,GAEA,OAAkCC,EAAAA,EAAAA,WAAkB,GAApD,eAAOP,EAAP,KAAkBQ,EAAlB,KAgBA,MAAO,CAACR,EAdQ,SAACS,EAAgBC,EAAaC,GAC5CH,GAAa,GACbI,EAAAA,EAAAA,OACUH,EAAQC,EAAKC,GACpBE,MAAK,SAACC,GACLN,GAAa,GACbH,EAAUS,MAEXC,OAAM,SAACtB,GACNe,GAAa,GACbF,EAAQb","sources":["screens/Console/Buckets/ListBuckets/DeleteBucket.tsx","screens/Console/Common/Hooks/useApi.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { DialogContentText } from \"@mui/material\";\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport useApi from \"../../Common/Hooks/useApi\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport { ConfirmDeleteIcon } from \"../../../../icons\";\n\ninterface IDeleteBucketProps {\n  closeDeleteModalAndRefresh: (refresh: boolean) => void;\n  deleteOpen: boolean;\n  selectedBucket: string;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n}\n\nconst DeleteBucket = ({\n  closeDeleteModalAndRefresh,\n  deleteOpen,\n  selectedBucket,\n  setErrorSnackMessage,\n}: IDeleteBucketProps) => {\n  const onDelSuccess = () => closeDeleteModalAndRefresh(true);\n  const onDelError = (err: ErrorResponseHandler) => setErrorSnackMessage(err);\n  const onClose = () => closeDeleteModalAndRefresh(false);\n\n  const [deleteLoading, invokeDeleteApi] = useApi(onDelSuccess, onDelError);\n\n  if (!selectedBucket) {\n    return null;\n  }\n\n  const onConfirmDelete = () => {\n    invokeDeleteApi(\"DELETE\", `/api/v1/buckets/${selectedBucket}`, {\n      name: selectedBucket,\n    });\n  };\n\n  return (\n    <ConfirmDialog\n      title={`Delete Bucket`}\n      confirmText={\"Delete\"}\n      isOpen={deleteOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={deleteLoading}\n      onConfirm={onConfirmDelete}\n      onClose={onClose}\n      confirmationContent={\n        <DialogContentText>\n          Are you sure you want to delete bucket <b>{selectedBucket}</b>? <br />\n          A bucket can only be deleted if it's empty.\n        </DialogContentText>\n      }\n    />\n  );\n};\n\nconst mapDispatchToProps = {\n  setErrorSnackMessage,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default connector(DeleteBucket);\n","import { useState } from \"react\";\nimport api from \"../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\n\ntype NoReturnFunction = (param?: any) => void;\ntype ApiMethodToInvoke = (method: string, url: string, data?: any) => void;\ntype IsApiInProgress = boolean;\n\nconst useApi = (\n  onSuccess: NoReturnFunction,\n  onError: NoReturnFunction\n): [IsApiInProgress, ApiMethodToInvoke] => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const callApi = (method: string, url: string, data?: any) => {\n    setIsLoading(true);\n    api\n      .invoke(method, url, data)\n      .then((res: any) => {\n        setIsLoading(false);\n        onSuccess(res);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setIsLoading(false);\n        onError(err);\n      });\n  };\n\n  return [isLoading, callApi];\n};\n\nexport default useApi;\n"],"names":["mapDispatchToProps","setErrorSnackMessage","connector","connect","closeDeleteModalAndRefresh","deleteOpen","selectedBucket","useApi","err","deleteLoading","invokeDeleteApi","title","confirmText","isOpen","titleIcon","isLoading","onConfirm","name","onClose","confirmationContent","onSuccess","onError","useState","setIsLoading","method","url","data","api","then","res","catch"],"sourceRoot":""}