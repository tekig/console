{"version":3,"file":"static/js/9605.fd87a53e.chunk.js","mappings":"+YA8kBA,GAAeA,EAAAA,EAAAA,IA/gBA,SAACC,GAAD,OACbC,EAAAA,EAAAA,IAAa,wBACXC,gBAAiB,CACfC,UAAW,SAEbC,eAAgB,CACdC,QAAS,OACTC,WAAY,SACZC,eAAgB,cAElBC,oBAAqB,CACnBC,WAAY,GAEdC,gBAAiB,CACfL,QAAS,OACTM,SAAU,EACVL,WAAY,SACZ,QAAS,CACPK,SAAU,EACVC,MAAO,SAGXC,eAAgB,CACdR,QAAS,OACTE,eAAgB,cAElBO,WAAY,CACVC,SAAU,GACVC,WAAY,IACZb,UAAW,UAEbc,gBAAiB,CACfF,SAAU,GACVG,MAAO,OACPf,UAAW,UAEbgB,UAAW,CACTC,oBAAqB,sBACrBf,QAAS,OACTgB,QAAS,KAERC,EAAAA,IACAC,EAAAA,IACAC,EAAAA,OAoeP,EAje4B,SAAC,GAoBA,IAnB3BC,EAmB0B,EAnB1BA,OACAC,EAkB0B,EAlB1BA,QACAC,EAiB0B,EAjB1BA,KACAC,EAgB0B,EAhB1BA,QACAC,EAe0B,EAf1BA,MACAC,EAc0B,EAd1BA,OACAC,EAa0B,EAb1BA,YACAC,EAY0B,EAZ1BA,aACAC,EAW0B,EAX1BA,eACAC,EAU0B,EAV1BA,mBACAC,EAS0B,EAT1BA,SACAC,EAQ0B,EAR1BA,cACAC,EAO0B,EAP1BA,eACAC,EAM0B,EAN1BA,QACAC,EAK0B,EAL1BA,qBACAC,EAI0B,EAJ1BA,WACAC,EAG0B,EAH1BA,WACAC,EAE0B,EAF1BA,aACAC,EAC0B,EAD1BA,aAEA,GAAgDC,EAAAA,EAAAA,UAAc,IAA9D,eAAOC,EAAP,KAAyBC,EAAzB,KACA,GAAkCF,EAAAA,EAAAA,UAChCd,EAAOiB,OAAS,GAAhB,OAAwBjB,GAAU,CAAC,CAAEkB,IAAK,GAAIC,MAAO,MADvD,eAAOC,EAAP,KAAkBC,EAAlB,KAGA,GAA4CP,EAAAA,EAAAA,UAC1Cb,EAAYgB,OAAS,GAArB,OAA6BhB,GAAe,CAAC,CAAEiB,IAAK,GAAIC,MAAO,MADjE,eAAOG,EAAP,KAAuBC,EAAvB,KAGA,GAA8CT,EAAAA,EAAAA,UAC5CZ,EAAae,OAAS,GAAtB,OAA8Bf,GAAgB,CAAC,CAAEgB,IAAK,GAAIC,MAAO,MADnE,eAAOK,EAAP,KAAwBC,EAAxB,KAGA,GAAgCX,EAAAA,EAAAA,UAAiBf,GAAjD,eAAO2B,EAAP,KAAiBC,EAAjB,KACA,IACEb,EAAAA,EAAAA,UAAiBX,GADnB,iBAAOyB,GAAP,MAA0BC,GAA1B,MAEA,IAA0Df,EAAAA,EAAAA,UAClC,MAAtBV,EAA6BA,EAAqB,IADpD,iBAAO0B,GAAP,MAA8BC,GAA9B,MAGA,IAAsCjB,EAAAA,EAAAA,UACpCT,EAASY,OAAS,GAAlB,OAA0BZ,GAAY,CAAC,CAAEa,IAAK,GAAIC,MAAO,MAD3D,iBAAOa,GAAP,MAAoBC,GAApB,MAGA,IAAgDnB,EAAAA,EAAAA,UAC9CR,EAAcW,OAAS,GAAvB,OAA+BX,GAAiB,CAAC,CAAEY,IAAK,GAAIC,MAAO,MADrE,iBAAOe,GAAP,MAAyBC,GAAzB,MAGA,IAAkDrB,EAAAA,EAAAA,UAChDP,EAAeU,OAAS,GAAxB,OAAgCV,GAAkB,CAAC,CAAEW,IAAK,GAAIC,MAAO,MADvE,iBAAOiB,GAAP,MAA0BC,GAA1B,MAGA,IAAoCvB,EAAAA,EAAAA,UAAiBN,GAArD,iBAAO8B,GAAP,MAAmBC,GAAnB,MACA,IACEzB,EAAAA,EAAAA,UAAyC,MAAxBL,EAA+BA,EAAuB,IADzE,iBAAO+B,GAAP,MAAgCC,GAAhC,MAEA,IAAsC3B,EAAAA,EAAAA,UAAc,IAApD,iBAAO4B,GAAP,MAAoBC,GAApB,MACA,IAAgD7B,EAAAA,EAAAA,UAAc,IAA9D,iBAAO8B,GAAP,MAAyBC,GAAzB,MACA,IAAkD/B,EAAAA,EAAAA,UAAc,IAAhE,iBAAOgC,GAAP,MAA0BC,GAA1B,MACA,IAA0CjC,EAAAA,EAAAA,UAAc,IAAxD,iBAAOkC,GAAP,MAAsBC,GAAtB,MACA,IAAoDnC,EAAAA,EAAAA,UAAc,IAAlE,iBAAOoC,GAAP,MAA2BC,GAA3B,MACA,IAAsDrC,EAAAA,EAAAA,UAAc,IAApE,iBAAOsC,GAAP,MAA4BC,GAA5B,MACA,IAA0CvC,EAAAA,EAAAA,UAAiBJ,GAA3D,iBAAO4C,GAAP,MAAsBC,GAAtB,MACA,IAA0CzC,EAAAA,EAAAA,UACxCH,EACI6C,KAAKC,MAAMC,SAAS/C,EAAY,IAAM,KAAYgD,WAClD,KAHN,iBAAOC,GAAP,MAAsBC,GAAtB,MAKA,IAA8C/C,EAAAA,EAAAA,UAAiBF,GAA/D,iBAAOkD,GAAP,MAAwBC,GAAxB,MACA,IAA8CjD,EAAAA,EAAAA,UAC5CD,EACI2C,KAAKC,MAAMC,SAAS7C,EAAc,IAAM,KAAY8C,WACpD,KAHN,iBAAOK,GAAP,MAAwBC,GAAxB,MAMMC,GAAO,SAACC,GAEZ,IADA,IAAIC,EAAsB,GACjBC,EAAI,EAAGA,EAAIF,EAAElD,OAAQoD,IACX,KAAbF,EAAEE,GAAGnD,KACPkD,EAAOE,KAAKH,EAAEE,IAGlB,OAAOD,GAGHG,GAAkB,SAACC,GACvBxD,GAAoByD,EAAAA,EAAAA,GAAqB1D,EAAkByD,MAG7DE,EAAAA,EAAAA,YAAU,WACR,IAAIC,EAAqC,GAEzCA,EAAoBL,KAAK,CACvBM,SAAS,QACTC,UAAU,EACV1D,MAAOO,EACPoD,QACE,wIACFC,qBAAsB,kBAExBJ,EAAoBL,KAAK,CACvBM,SAAS,UACTC,UAAU,EACV1D,MAAOmB,GACPwC,QACE,wIACFC,qBAAsB,kBAExBJ,EAAoBL,KAAK,CACvBM,SAAS,iBACTC,UAAU,EACV1D,MAAOS,GACPkD,QAAS,WACTC,qBAAsB,wCAExBJ,EAAoBL,KAAK,CACvBM,SAAS,qBACTC,UAAU,EACV1D,MAAOW,GACPgD,QAAS,yBACTC,qBAAsB,iCAExBJ,EAAoBL,KAAK,CACvBM,SAAS,uBACTC,UAAU,EACV1D,MAAOqB,GACPsC,QAAS,yBACTC,qBAAsB,iCAExBJ,EAAoBL,KAAK,CACvBM,SAAS,aACTC,UAAU,EACV1D,MAAOmC,GACPwB,QAAS,WACTC,qBACE,+DAEJJ,EAAoBL,KAAK,CACvBM,SAAS,aACTC,UAAU,EACV1D,MAAOyC,GACPkB,QAAS,WACTC,qBACE,4DAEJJ,EAAoBL,KAAK,CACvBM,SAAS,eACTC,UAAU,EACV1D,MAAO2C,GACPgB,QAAS,WACTC,qBACE,mEAEJJ,EAAoBL,KAAK,CACvBM,SAAS,eACTC,UAAU,EACV1D,MAAO6C,GACPc,QAAS,WACTC,qBACE,+DAGJ,IAAMC,GAAYC,EAAAA,EAAAA,GAAqBN,GACvC3D,EAAoBgE,KACnB,CACDtD,EACAY,GACAV,GACAE,GACAU,GACAc,GACAM,GACAE,GACAE,GACAhD,IAGF,IAAMkE,GAAa,WACjB,OAC2C,IAAzCC,OAAOC,KAAKrE,GAAkBE,QACM,IAApCkE,OAAOC,KAAK1C,IAAazB,QACgB,IAAzCkE,OAAOC,KAAKxC,IAAkB3B,QACY,IAA1CkE,OAAOC,KAAKtC,IAAmB7B,QACO,IAAtCkE,OAAOC,KAAKpC,IAAe/B,QACgB,IAA3CkE,OAAOC,KAAKlC,IAAoBjC,QACY,IAA5CkE,OAAOC,KAAKhC,IAAqBnC,QAQrC,OACE,SAACoE,EAAA,EAAD,CACEvF,QAAS,kBAAMA,GAAQ,IACvBwF,UAAWzF,EACX0F,MAAM,eAHR,UAKE,iBACEC,YAAU,EACVC,aAAa,MACbC,SAAU,SAACC,GACTA,EAAEC,iBACGV,KAMHW,EAAAA,EAAAA,OAEI,MAFJ,6BAG0BlG,EAAOmG,UAHjC,oBAGsDnG,EAAOoG,KAH7D,QAII,CACE/F,OAAQkE,GAAK9C,GACbnB,YAAaiE,GAAK5C,GAClBpB,aAAcgE,GAAK1C,GACnBzB,MAAO2B,EACPvB,eAAgByB,GAChBxB,mBAAoB0B,GACpBzB,SAAU6D,GAAKlC,IACf1B,cAAe4D,GAAKhC,IACpB3B,eAAgB2D,GAAK9B,IACrB5B,QAAS8B,GACT7B,qBAAsB+B,GACtBwD,cAAe1C,GACf2C,cAAerC,GAAgB,KAC/BsC,gBAAiBpC,GACjBqC,gBAAiBnC,GAAkB,OAGtCoC,MAAK,WACJtG,GAAQ,MAETuG,OAAM,SAACC,QA9BVC,EAAAA,EAAAA,IAA0B,CACxBC,aAAc,kCACdC,cAAe,MARvB,UAwCE,UAACC,EAAA,GAAD,CAAMC,WAAS,EAAf,WACE,UAACD,EAAA,GAAD,CAAME,GAAI,GAAIC,UAAWjH,EAAQkH,oBAAjC,WACE,SAACJ,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWjH,EAAQoH,aAAtC,UACE,4CAEF,SAACN,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWjH,EAAQoH,aAAtC,UACE,SAACC,EAAA,EAAD,CACEC,GAAE,QACFC,MAAO,QACPC,YAAa,QACbrB,KAAI,QACJ5E,MAAOO,EACP2F,SAAU,SAAC1B,GACThE,EAAYgE,EAAE2B,OAAOnG,OACrBoD,GAAgB,UAGlBgD,MAAOxG,EAAgB,OAAa,IAXtC,YAcF,SAAC2F,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWjH,EAAQoH,aAAtC,UACE,SAACC,EAAA,EAAD,CACEC,GAAE,iBACFC,MAAO,gBACPC,YAAa,gBACbrB,KAAI,iBACJ5E,MAAOS,GACPyF,SAAU,SAAC1B,GACT9D,GAAqB8D,EAAE2B,OAAOnG,OAC9BoD,GAAgB,mBAGlBgD,MAAOxG,EAAgB,gBAAsB,GAC7CyG,eACE,SAACC,EAAA,EAAD,CACEP,GAAI,YACJQ,aAAc,aACdC,aAAc,KACdC,UAAW,CAAC,CAAET,MAAO,KAAMhG,MAAO,OAClC0G,UAAU,KAlBhB,qBAuBF,SAACnB,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWjH,EAAQoH,aAAtC,UACE,SAACC,EAAA,EAAD,CACEC,GAAE,qBACFC,MAAO,kBACPC,YAAa,uBACbrB,KAAI,qBACJ5E,MAAOW,GACPuF,SAAU,SAAC1B,GACT5D,GAAyB4D,EAAE2B,OAAOnG,OAClCoD,GAAgB,uBAGlBgD,MAAOxG,EAAgB,oBAA0B,IAXnD,yBAeF,SAAC2F,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWjH,EAAQoH,aAAtC,UACE,SAACC,EAAA,EAAD,CACEC,GAAE,aACFC,MAAO,cACPC,YAAa,cACbrB,KAAI,aACJ5E,MAAOmC,GACP+D,SAAU,SAAC1B,GACTpC,GAAiBoC,EAAE2B,OAAOnG,OAC1BoD,GAAgB,eAGlBgD,MAAOxG,EAAgB,YAAkB,IAX3C,iBAcF,SAAC2F,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWjH,EAAQoH,aAAtC,UACE,SAACC,EAAA,EAAD,CACEC,GAAE,aACFC,MAAO,iBACPC,YAAa,iBACbrB,KAAI,aACJ5E,MAAOyC,GACPyD,SAAU,SAAC1B,GACT9B,GAAiB8B,EAAE2B,OAAOnG,OAC1BoD,GAAgB,eAGlBgD,MAAOxG,EAAgB,YAAkB,GACzCyG,eACE,SAACC,EAAA,EAAD,CACEP,GAAI,YACJQ,aAAc,aACdC,aAAc,KACdC,UAAW,CAAC,CAAET,MAAO,KAAMhG,MAAO,OAClC0G,UAAU,KAlBhB,iBAwBF,UAACnB,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWjH,EAAQoH,aAAtC,WACE,iBAAMH,UAAWjH,EAAQkI,WAAzB,qBACA,SAACC,EAAA,EAAD,CACEC,UAAW5G,EACX6G,aAAc5G,EACd6G,UAAW,SACXX,MAAO7E,GACPyF,SAAUxF,SAGd,UAAC+D,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWjH,EAAQoH,aAAtC,WACE,iBAAMH,UAAWjH,EAAQkI,WAAzB,0BACA,SAACC,EAAA,EAAD,CACEC,UAAW1G,EACX2G,aAAc1G,EACd2G,UAAW,cACXX,MAAO3E,GACPuF,SAAUtF,SAGd,UAAC6D,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWjH,EAAQoH,aAAtC,WACE,iBAAMH,UAAWjH,EAAQkI,WAAzB,4BACA,SAACC,EAAA,EAAD,CACEC,UAAWxG,EACXyG,aAAcxG,EACdyG,UAAW,gBACXX,MAAOzE,GACPqF,SAAUpF,SAGd,SAAC2D,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWjH,EAAQoH,aAAtC,UACE,uDAEF,SAACN,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWjH,EAAQoH,aAAtC,UACE,SAACC,EAAA,EAAD,CACEC,GAAE,UACFC,MAAO,iBACPC,YAAa,WACbrB,KAAI,UACJ5E,MAAOmB,GACP+E,SAAU,SAAC1B,GACTpD,GAAcoD,EAAE2B,OAAOnG,OACvBoD,GAAgB,YAGlBgD,MAAOxG,EAAgB,SAAe,IAXxC,cAcF,SAAC2F,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWjH,EAAQoH,aAAtC,UACE,SAACC,EAAA,EAAD,CACEC,GAAE,uBACFC,MAAO,kBACPC,YAAa,0BACbrB,KAAI,uBACJ5E,MAAOqB,GACP6E,SAAU,SAAC1B,GACTlD,GAA2BkD,EAAE2B,OAAOnG,OACpCoD,GAAgB,yBAGlBgD,MAAOxG,EAAgB,sBAA4B,IAXrD,2BAcF,SAAC2F,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWjH,EAAQoH,aAAtC,UACE,SAACC,EAAA,EAAD,CACEC,GAAE,eACFC,MAAO,iBACPC,YAAa,iBACbrB,KAAI,eACJ5E,MAAO2C,GACPuD,SAAU,SAAC1B,GACT5B,GAAmB4B,EAAE2B,OAAOnG,OAC5BoD,GAAgB,iBAGlBgD,MAAOxG,EAAgB,cAAoB,IAX7C,mBAcF,SAAC2F,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWjH,EAAQoH,aAAtC,UACE,SAACC,EAAA,EAAD,CACEC,GAAE,eACFC,MAAO,oBACPC,YAAa,oBACbrB,KAAI,eACJ5E,MAAO6C,GACPqD,SAAU,SAAC1B,GACT1B,GAAmB0B,EAAE2B,OAAOnG,OAC5BoD,GAAgB,iBAGlBgD,MAAOxG,EAAgB,cAAoB,GAC3CyG,eACE,SAACC,EAAA,EAAD,CACEP,GAAI,YACJQ,aAAc,aACdC,aAAc,KACdC,UAAW,CAAC,CAAET,MAAO,KAAMhG,MAAO,OAClC0G,UAAU,KAlBhB,mBAuBF,UAACnB,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWjH,EAAQoH,aAAtC,WACE,iBAAMH,UAAWjH,EAAQkI,WAAzB,qBACA,SAACC,EAAA,EAAD,CACEC,UAAWhG,GACXiG,aAAchG,GACdiG,UAAW,YACXX,MAAOvE,GACPmF,SAAUlF,SAGd,UAACyD,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWjH,EAAQoH,aAAtC,WACE,iBAAMH,UAAWjH,EAAQkI,WAAzB,0BACA,SAACC,EAAA,EAAD,CACEC,UAAW9F,GACX+F,aAAc9F,GACd+F,UAAW,iBACXX,MAAOrE,GACPiF,SAAUhF,SAGd,UAACuD,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWjH,EAAQoH,aAAtC,WACE,iBAAMH,UAAWjH,EAAQkI,WAAzB,4BACA,SAACC,EAAA,EAAD,CACEC,UAAW5F,GACX6F,aAAc5F,GACd6F,UAAW,kBACXX,MAAOnE,GACP+E,SAAU9E,YAIhB,SAACqD,EAAA,GAAD,CAAME,GAAI,GAAIC,UAAWjH,EAAQxB,gBAAjC,UACE,SAACgK,EAAA,EAAD,CACEC,KAAK,SACLC,QAAQ,YACRlJ,MAAM,UACNyI,UAAW3C,KAJb,8B,iEC/ENqD,GAAYC,EAAAA,EAAAA,KAND,SAACC,GAAD,MAAsB,CACrCC,cAAeD,EAAME,QAAQC,cAAcF,cAC3CG,eAAgBJ,EAAME,QAAQC,cAAcE,cAC5CnJ,OAAQ8I,EAAME,QAAQC,cAAcG,cAGF,MAEpC,GAAe9K,EAAAA,EAAAA,IA9bA,SAACC,GAAD,OACbC,EAAAA,EAAAA,IAAa,kCACR6K,EAAAA,IADO,IAEVC,YAAa,CACXhK,SAAU,GACVC,WAAY,IACZE,MAAO,OACP8J,UAAW,GAEbC,cAAe,CACbC,eAAgB,OAChBhK,MAAO,SAETiK,aAAc,CACZC,OAAQ,uBAEVC,eAAgB,CACdC,QAAS,wBAERC,EAAAA,IACAC,EAAAA,KACAC,EAAAA,EAAAA,IAAmBzL,EAAM0L,QAAQ,QAyaxC,CAAkCrB,GAtaZ,SAAC,GAKH,IAAD,MAJjB3I,EAIiB,EAJjBA,QACAiK,EAGiB,EAHjBA,MACAlK,EAEiB,EAFjBA,OACA+I,EACiB,EADjBA,cAEA,GAAkD5H,EAAAA,EAAAA,WAAkB,GAApE,eAAOgJ,EAAP,KAA0BC,EAA1B,KACA,GAA8BjJ,EAAAA,EAAAA,YAA9B,eAAOkJ,EAAP,KAAgBC,EAAhB,KACA,GAAwBnJ,EAAAA,EAAAA,WAAkB,GAA1C,eAAOoJ,EAAP,KAAaC,EAAb,KACA,GAAgCrJ,EAAAA,EAAAA,WAAkB,GAAlD,eAAO+G,EAAP,KAAiBuC,EAAjB,KACA,GAAsCtJ,EAAAA,EAAAA,WAAkB,GAAxD,eAAOuJ,EAAP,KAAoBC,EAApB,KACA,GAAkDxJ,EAAAA,EAAAA,WAAkB,GAApE,eAAOyJ,EAAP,KAA0BC,EAA1B,KACA,GAAgD1J,EAAAA,EAAAA,WAAkB,GAAlE,eAAO2J,EAAP,KAAyBC,EAAzB,KAEMC,EAAad,EAAMe,OAAN,WACbC,EAAkBhB,EAAMe,OAAN,iBAExBlG,EAAAA,EAAAA,YAAU,WACJoF,GACFjE,EAAAA,EAAAA,OAEI,MAFJ,6BAG0BgF,EAH1B,oBAGqDF,EAHrD,SAKGvE,MAAK,SAAC0E,GACLb,EAAWa,GACXR,EAAeQ,EAAOjD,UACtBuC,EAAYU,EAAOjD,UACnBkC,GAAqB,MAEtB1D,OAAM,SAACC,IACNyE,EAAAA,EAAAA,IAAqB,CACnBvE,aAAc,4BACdC,cAAeH,EAAIG,qBAI1B,CAACkE,EAAYE,EAAiBf,EAAmBM,EAAavC,IAEjE,IAAMmD,GAAwB,WAC5BR,GAAqB,GACrBL,GAAQ,GACRJ,GAAqB,IASvB,OACE,UAAC,EAAAkB,SAAD,YACE,SAACC,EAAA,EAAD,CACE3F,MAAM,mBACN4F,YAAY,UACZC,OAAQb,EACRc,UAAW,WACTxF,EAAAA,EAAAA,OAEI,OAFJ,6BAG0BgF,EAH1B,oBAGqDF,EAHrD,qBAKGvE,MAAK,WACJkE,GAAe,GACfF,GAAY,MAEb/D,OAAM,SAACC,IACNyE,EAAAA,EAAAA,IAAqB,CACnBvE,aAAc,0BACdC,cAAeH,EAAIG,mBAGzBuE,MAEFlL,QAAS,kBAAM0K,GAAqB,IACpCc,qBACE,SAACC,EAAA,EAAD,mGAMJ,SAACL,EAAA,EAAD,CACE3F,MAAM,kBACN4F,YAAY,SACZC,OAAQX,EACRY,UAAW,WACTxF,EAAAA,EAAAA,OAEI,OAFJ,6BAG0BgF,EAH1B,oBAGqDF,EAHrD,oBAKGvE,MAAK,WACJkE,GAAe,MAEhBjE,OAAM,SAACC,IACNyE,EAAAA,EAAAA,IAAqB,CACnBvE,aAAc,yBACdC,cAAeH,EAAIG,mBArD/BiE,GAAoB,GACpBN,GAAY,GACZL,GAAqB,IAwDjBjK,QAAS,kBAAM4K,GAAoB,IACnCY,qBACE,SAACC,EAAA,EAAD,4DAKHrB,GAAmB,OAAXvK,GAA8B,MAAXqK,IAAoBnC,IAC9C,SAAC,EAAD,CACEhI,KAAMqK,EACNpK,QAASkL,GACTrL,OAAQA,EACRI,MAAOiK,EAAQjK,MACfC,OAAQgK,EAAQhK,OAChBC,YAAa+J,EAAQ/J,YACrBC,aAAc8J,EAAQ9J,aACtBC,eAAgB6J,EAAQ7J,eACxBC,mBAAoB4J,EAAQ5J,mBAC5BI,QAASwJ,EAAQxJ,QACjBH,SAAU2J,EAAQ3J,SAClBC,cAAe0J,EAAQ1J,cACvBC,eAAgByJ,EAAQzJ,eACxBE,qBAAsBuJ,EAAQvJ,qBAC9BC,WAAYsJ,EAAQhE,cACpBrF,WAAYqJ,EAAQ/D,cACpBrF,aAAcoJ,EAAQ9D,gBACtBrF,aAAcmJ,EAAQ7D,mBAG1B,UAACO,EAAA,GAAD,CAAMC,WAAS,EAACnI,WAAY,SAA5B,WACE,SAACkI,EAAA,GAAD,CAAMK,MAAI,EAACH,IAAE,EAAb,UACE,eAAIC,UAAWjH,EAAQ4L,aAAvB,wBAEF,SAAC9E,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,EAAf,UACE,SAAC6E,EAAA,EAAD,CACEtK,MAAM,gBACN+F,GAAG,gBACHnB,KAAK,gBACL2F,SAAUrB,EACVhD,SAAU,SAAC1B,GACOA,EAAE2B,OACMoE,QAEtBhB,GAAoB,GAEpBF,GAAqB,IAGzBmB,gBAAiB,CAAC,UAAW,oBAIjC9D,IAAaiC,IACb,SAAC8B,EAAA,EAAD,CAAO/E,UAAWjH,EAAQ2J,eAA1B,UACE,UAAC7C,EAAA,GAAD,CAAMC,WAAS,EAAf,WACE,SAACD,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAf,UACE,UAACF,EAAA,GAAD,CAAMC,WAAS,EAACnI,WAAY,SAA5B,WACE,SAACkI,EAAA,GAAD,CAAME,GAAI,EAAV,UACE,6CAEF,SAACF,EAAA,GAAD,CAAME,GAAI,EAAGnI,eAAgB,MAAOJ,UAAW,QAA/C,UACE,SAACwN,EAAA,EAAD,CACEC,QAAS,6BACTC,KAAM,OACNC,QAAS,WACP7B,GAAQ,IAEV8B,MAAM,SAAC,KAAD,IACN7M,MAAM,UACNkJ,QAAS,sBAKjB,UAAC5B,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAf,WACE,eAAIC,UAAWjH,EAAQsM,WACvB,kBAAOpN,MAAO,OAAd,UACE,2BACG4J,GACC,yBACE,eAAI7B,UAAWjH,EAAQuM,YAAaC,QAAS,EAA7C,UACE,SAACC,EAAA,EAAD,SAIJ,UAAC,EAAApB,SAAD,WAC6B,OAAnB,OAAPjB,QAAO,IAAPA,OAAA,EAAAA,EAAShE,iBACR,2BACE,eAAIa,UAAWjH,EAAQ0M,SAAvB,2BACA,+BAAKtC,QAAL,IAAKA,OAAL,EAAKA,EAAShE,mBAGS,OAAnB,OAAPgE,QAAO,IAAPA,OAAA,EAAAA,EAAS/D,iBACR,2BACE,eAAIY,UAAWjH,EAAQ0M,SAAvB,8BACA,yBAAKC,EAAAA,EAAAA,IAAS,OAACvC,QAAD,IAACA,OAAD,EAACA,EAAS/D,eAAe,QAGxB,OAAX,OAAP+D,QAAO,IAAPA,OAAA,EAAAA,EAASjK,SACR,2BACE,eAAI8G,UAAWjH,EAAQ0M,SAAvB,qBACA,+BAAKtC,QAAL,IAAKA,OAAL,EAAKA,EAASjK,WAGU,OAApB,OAAPiK,QAAO,IAAPA,OAAA,EAAAA,EAAS7J,kBACR,2BACE,eAAI0G,UAAWjH,EAAQ0M,SAAvB,kCAGA,+BAAKtC,QAAL,IAAKA,OAAL,EAAKA,EAAS7J,oBAGc,OAAxB,OAAP6J,QAAO,IAAPA,OAAA,EAAAA,EAAS5J,sBACR,2BACE,eAAIyG,UAAWjH,EAAQ0M,SAAvB,+BACA,+BAAKtC,QAAL,IAAKA,OAAL,EAAKA,EAAS5J,wBAGE,OAAZ,OAAP4J,QAAO,IAAPA,OAAA,EAAAA,EAAShK,SAAkBgK,EAAQhK,OAAOiB,OAAS,IAClD,UAAC,EAAAgK,SAAD,YACE,yBACE,yBACE,wCAGJ,yBACE,yBACE,SAACuB,EAAA,EAAD,CACEC,QACa,MAAXzC,GAAmBA,EAAQhK,OAAOiB,OAAS,EACvC+I,EAAQhK,OACR,GAEN0M,WAAW,kBAMI,OAAjB,OAAP1C,QAAO,IAAPA,OAAA,EAAAA,EAAS/J,cACR+J,EAAQ/J,YAAYgB,OAAS,IAC3B,UAAC,EAAAgK,SAAD,YACE,yBACE,yBACE,6CAGJ,yBACE,yBACE,SAACuB,EAAA,EAAD,CACEC,QACa,MAAXzC,GACAA,EAAQ/J,YAAYgB,OAAS,EACzB+I,EAAQ/J,YACR,GAENyM,WAAW,uBAMG,OAAlB,OAAP1C,QAAO,IAAPA,OAAA,EAAAA,EAAS9J,eACR8J,EAAQ9J,aAAae,OAAS,IAC5B,UAAC,EAAAgK,SAAD,YACE,yBACE,yBACE,+CAGJ,yBACE,yBACE,SAACuB,EAAA,EAAD,CACEC,QACa,MAAXzC,GACAA,EAAQ9J,aAAae,OAAS,EAC1B+I,EAAQ9J,aACR,GAENwM,WAAW,iCAW/B,8CACA,eAAI7F,UAAWjH,EAAQsM,WACvB,kBAAOpN,MAAO,OAAd,UACE,2BACG4J,GACC,yBACE,eAAI7B,UAAWjH,EAAQuM,YAAaC,QAAS,EAA7C,UACE,SAACC,EAAA,EAAD,SAIJ,UAAC,EAAApB,SAAD,WAC+B,OAArB,OAAPjB,QAAO,IAAPA,OAAA,EAAAA,EAAS9D,mBACR,2BACE,eAAIW,UAAWjH,EAAQ0M,SAAvB,8BACA,+BAAKtC,QAAL,IAAKA,OAAL,EAAKA,EAAS9D,qBAGW,OAArB,OAAP8D,QAAO,IAAPA,OAAA,EAAAA,EAAS7D,mBACR,2BACE,eAAIU,UAAWjH,EAAQ0M,SAAvB,iCAGA,yBAAKC,EAAAA,EAAAA,IAAS,OAACvC,QAAD,IAACA,OAAD,EAACA,EAAS7D,iBAAiB,QAGxB,OAAb,OAAP6D,QAAO,IAAPA,OAAA,EAAAA,EAASxJ,WACR,2BACE,eAAIqG,UAAWjH,EAAQ0M,SAAvB,8BACA,+BAAKtC,QAAL,IAAKA,OAAL,EAAKA,EAASxJ,aAGgB,OAA1B,OAAPwJ,QAAO,IAAPA,OAAA,EAAAA,EAASvJ,wBACR,2BACE,eAAIoG,UAAWjH,EAAQ0M,SAAvB,+BACA,+BAAKtC,QAAL,IAAKA,OAAL,EAAKA,EAASvJ,0BAGI,OAAd,OAAPuJ,QAAO,IAAPA,OAAA,EAAAA,EAAS3J,WACR2J,EAAQ3J,SAASY,OAAS,IACxB,UAAC,EAAAgK,SAAD,YACE,yBACE,yBACE,wCAIJ,yBACE,yBACE,SAACuB,EAAA,EAAD,CACEC,QACa,MAAXzC,IACA,UAAAA,EAAQ3J,gBAAR,eAAkBY,QAAS,EACvB+I,EAAQ3J,SACR,GAENqM,WAAW,kBAME,OAAjB,OAAP1C,QAAO,IAAPA,OAAA,EAAAA,EAAS/J,cACR+J,EAAQ1J,cAAcW,OAAS,IAC7B,UAAC,EAAAgK,SAAD,YACE,yBACE,yBACE,6CAGJ,yBACE,yBACE,SAACuB,EAAA,EAAD,CACEC,QACa,MAAXzC,IACA,UAAAA,EAAQ1J,qBAAR,eAAuBW,QAAS,EAC5B+I,EAAQ1J,cACR,GAENoM,WAAW,uBAMG,OAAlB,OAAP1C,QAAO,IAAPA,OAAA,EAAAA,EAAS9J,eACR8J,EAAQzJ,eAAeU,OAAS,IAC9B,UAAC,EAAAgK,SAAD,YACE,yBACE,yBACE,gDAGJ,yBACE,yBACE,SAACuB,EAAA,EAAD,CACEC,QACa,MAAXzC,IACA,UAAAA,EAAQzJ,sBAAR,eAAwBU,QAAS,EAC7B+I,EAAQzJ,eACR,GAENmM,WAAW","sources":["screens/Console/Tenants/TenantDetails/EditTenantLogsModal.tsx","screens/Console/Tenants/TenantDetails/TenantLogging.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Theme } from \"@mui/material/styles\";\nimport {\n  formFieldStyles,\n  modalBasic,\n  modalStyleUtils,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport { Button, Grid } from \"@mui/material\";\nimport api from \"../../../../common/api\";\nimport { ITenant } from \"../ListTenants/types\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { IKeyValue } from \"../ListTenants/types\";\nimport KeyPairEdit from \"./KeyPairEdit\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../utils/validationFunctions\";\nimport { clearValidationError } from \"../utils\";\nimport { setModalErrorSnackMessage } from \"../../../../actions\";\nimport InputUnitMenu from \"../../Common/FormComponents/InputUnitMenu/InputUnitMenu\";\n\ninterface IEditTenantLogsProps {\n  tenant: ITenant;\n  classes: any;\n  open: boolean;\n  onClose: (shouldReload: boolean) => void;\n  image: string;\n  labels: IKeyValue[];\n  annotations: IKeyValue[];\n  nodeSelector: IKeyValue[];\n  diskCapacityGB: number;\n  serviceAccountName: string;\n  dbImage: string;\n  dbLabels: IKeyValue[];\n  dbAnnotations: IKeyValue[];\n  dbNodeSelector: IKeyValue[];\n  dbServiceAccountName: string;\n  cpuRequest: string;\n  memRequest: string;\n  dbCPURequest: string;\n  dbMemRequest: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    buttonContainer: {\n      textAlign: \"right\",\n    },\n    multiContainer: {\n      display: \"flex\",\n      alignItems: \"center\" as const,\n      justifyContent: \"flex-start\" as const,\n    },\n    sizeFactorContainer: {\n      marginLeft: 8,\n    },\n    bottomContainer: {\n      display: \"flex\",\n      flexGrow: 1,\n      alignItems: \"center\",\n      \"& div\": {\n        flexGrow: 1,\n        width: \"100%\",\n      },\n    },\n    factorElements: {\n      display: \"flex\",\n      justifyContent: \"flex-start\",\n    },\n    sizeNumber: {\n      fontSize: 35,\n      fontWeight: 700,\n      textAlign: \"center\",\n    },\n    sizeDescription: {\n      fontSize: 14,\n      color: \"#777\",\n      textAlign: \"center\",\n    },\n    shortened: {\n      gridTemplateColumns: \"auto auto 20px 20px\",\n      display: \"grid\",\n      gridGap: 20,\n    },\n    ...modalBasic,\n    ...modalStyleUtils,\n    ...formFieldStyles,\n  });\n\nconst EditTenantLogsModal = ({\n  tenant,\n  classes,\n  open,\n  onClose,\n  image,\n  labels,\n  annotations,\n  nodeSelector,\n  diskCapacityGB,\n  serviceAccountName,\n  dbLabels,\n  dbAnnotations,\n  dbNodeSelector,\n  dbImage,\n  dbServiceAccountName,\n  cpuRequest,\n  memRequest,\n  dbCPURequest,\n  dbMemRequest,\n}: IEditTenantLogsProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const [newLabels, setNewLabels] = useState<IKeyValue[]>(\n    labels.length > 0 ? [...labels] : [{ key: \"\", value: \"\" }]\n  );\n  const [newAnnotations, setNewAnnotations] = useState<IKeyValue[]>(\n    annotations.length > 0 ? [...annotations] : [{ key: \"\", value: \"\" }]\n  );\n  const [newNodeSelector, setNewNodeSelector] = useState<IKeyValue[]>(\n    nodeSelector.length > 0 ? [...nodeSelector] : [{ key: \"\", value: \"\" }]\n  );\n  const [newImage, setNewImage] = useState<string>(image);\n  const [newDiskCapacityGB, setNewDiskCapacityGB] =\n    useState<number>(diskCapacityGB);\n  const [newServiceAccountName, setNewServiceAccountName] = useState<string>(\n    serviceAccountName != null ? serviceAccountName : \"\"\n  );\n  const [newDbLabels, setNewDbLabels] = useState<IKeyValue[]>(\n    dbLabels.length > 0 ? [...dbLabels] : [{ key: \"\", value: \"\" }]\n  );\n  const [newDbAnnotations, setNewDbAnnotations] = useState<IKeyValue[]>(\n    dbAnnotations.length > 0 ? [...dbAnnotations] : [{ key: \"\", value: \"\" }]\n  );\n  const [newDbNodeSelector, setNewDbNodeSelector] = useState<IKeyValue[]>(\n    dbNodeSelector.length > 0 ? [...dbNodeSelector] : [{ key: \"\", value: \"\" }]\n  );\n  const [newDbImage, setNewDbImage] = useState<string>(dbImage);\n  const [newDbServiceAccountName, setNewDbServiceAccountName] =\n    useState<string>(dbServiceAccountName != null ? dbServiceAccountName : \"\");\n  const [labelsError, setLabelsError] = useState<any>({});\n  const [annotationsError, setAnnotationsError] = useState<any>({});\n  const [nodeSelectorError, setNodeSelectorError] = useState<any>({});\n  const [dbLabelsError, setDbLabelsError] = useState<any>({});\n  const [dbAnnotationsError, setDbAnnotationsError] = useState<any>({});\n  const [dbNodeSelectorError, setDbNodeSelectorError] = useState<any>({});\n  const [newCPURequest, setNewCPURequest] = useState<string>(cpuRequest);\n  const [newMemRequest, setNewMemRequest] = useState<string>(\n    memRequest\n      ? Math.floor(parseInt(memRequest, 10) / 1000000000).toString()\n      : \"0\"\n  );\n  const [newDBCPURequest, setNewDBCPURequest] = useState<string>(dbCPURequest);\n  const [newDBMemRequest, setNewDBMemRequest] = useState<string>(\n    dbMemRequest\n      ? Math.floor(parseInt(dbMemRequest, 10) / 1000000000).toString()\n      : \"0\"\n  );\n\n  const trim = (x: IKeyValue[]): IKeyValue[] => {\n    let retval: IKeyValue[] = [];\n    for (let i = 0; i < x.length; i++) {\n      if (x[i].key !== \"\") {\n        retval.push(x[i]);\n      }\n    }\n    return retval;\n  };\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  useEffect(() => {\n    let tenantLogValidation: IValidation[] = [];\n\n    tenantLogValidation.push({\n      fieldKey: `image`,\n      required: false,\n      value: newImage,\n      pattern:\n        /^([a-zA-Z0-9])([a-zA-Z0-9-._])*([a-zA-Z0-9]?)+(\\/(([a-zA-Z0-9])([a-zA-Z0-9-._])*([a-zA-Z0-9])?)+)*:([a-zA-Z0-9])[a-zA-Z0-9-.]{0,127}$/,\n      customPatternMessage: \"Invalid image\",\n    });\n    tenantLogValidation.push({\n      fieldKey: `dbImage`,\n      required: false,\n      value: newDbImage,\n      pattern:\n        /^([a-zA-Z0-9])([a-zA-Z0-9-._])*([a-zA-Z0-9]?)+(\\/(([a-zA-Z0-9])([a-zA-Z0-9-._])*([a-zA-Z0-9])?)+)*:([a-zA-Z0-9])[a-zA-Z0-9-.]{0,127}$/,\n      customPatternMessage: \"Invalid image\",\n    });\n    tenantLogValidation.push({\n      fieldKey: `diskCapacityGB`,\n      required: true,\n      value: newDiskCapacityGB as any as string,\n      pattern: /^[0-9]*$/,\n      customPatternMessage: \"Must be an integer between 0 and 10\",\n    });\n    tenantLogValidation.push({\n      fieldKey: `serviceAccountName`,\n      required: false,\n      value: newServiceAccountName,\n      pattern: /^[a-zA-Z0-9-.]{1,253}$/,\n      customPatternMessage: \"Invalid service account name\",\n    });\n    tenantLogValidation.push({\n      fieldKey: `dbServiceAccountName`,\n      required: false,\n      value: newDbServiceAccountName,\n      pattern: /^[a-zA-Z0-9-.]{1,253}$/,\n      customPatternMessage: \"Invalid service account name\",\n    });\n    tenantLogValidation.push({\n      fieldKey: `cpuRequest`,\n      required: true,\n      value: newCPURequest as any as string,\n      pattern: /^[0-9]*$/,\n      customPatternMessage:\n        \"Please enter an integer value for number of CPUs requested\",\n    });\n    tenantLogValidation.push({\n      fieldKey: `memRequest`,\n      required: true,\n      value: newMemRequest as any as string,\n      pattern: /^[0-9]*$/,\n      customPatternMessage:\n        \"Please enter an integer value (Gi) for memory requested\",\n    });\n    tenantLogValidation.push({\n      fieldKey: `dbCPURequest`,\n      required: true,\n      value: newDBCPURequest as any as string,\n      pattern: /^[0-9]*$/,\n      customPatternMessage:\n        \"Please enter an integer value for number of  DB CPUs requested\",\n    });\n    tenantLogValidation.push({\n      fieldKey: `dbMemRequest`,\n      required: true,\n      value: newDBMemRequest as any as string,\n      pattern: /^[0-9]*$/,\n      customPatternMessage:\n        \"Please enter an integer value (Gi) for DB memory requested\",\n    });\n\n    const commonVal = commonFormValidation(tenantLogValidation);\n    setValidationErrors(commonVal);\n  }, [\n    newImage,\n    newDbImage,\n    newDiskCapacityGB,\n    newServiceAccountName,\n    newDbServiceAccountName,\n    newCPURequest,\n    newMemRequest,\n    newDBCPURequest,\n    newDBMemRequest,\n    setValidationErrors,\n  ]);\n\n  const checkValid = (): boolean => {\n    if (\n      Object.keys(validationErrors).length !== 0 ||\n      Object.keys(labelsError).length !== 0 ||\n      Object.keys(annotationsError).length !== 0 ||\n      Object.keys(nodeSelectorError).length !== 0 ||\n      Object.keys(dbLabelsError).length !== 0 ||\n      Object.keys(dbAnnotationsError).length !== 0 ||\n      Object.keys(dbNodeSelectorError).length !== 0\n    ) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  return (\n    <ModalWrapper\n      onClose={() => onClose(true)}\n      modalOpen={open}\n      title=\"Edit Logging\"\n    >\n      <form\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n          e.preventDefault();\n          if (!checkValid()) {\n            setModalErrorSnackMessage({\n              errorMessage: \"Some fields have invalid values\",\n              detailedError: \"\",\n            });\n          } else {\n            api\n              .invoke(\n                \"PUT\",\n                `/api/v1/namespaces/${tenant.namespace}/tenants/${tenant.name}/log`,\n                {\n                  labels: trim(newLabels),\n                  annotations: trim(newAnnotations),\n                  nodeSelector: trim(newNodeSelector),\n                  image: newImage,\n                  diskCapacityGB: newDiskCapacityGB,\n                  serviceAccountName: newServiceAccountName,\n                  dbLabels: trim(newDbLabels),\n                  dbAnnotations: trim(newDbAnnotations),\n                  dbNodeSelector: trim(newDbNodeSelector),\n                  dbImage: newDbImage,\n                  dbServiceAccountName: newDbServiceAccountName,\n                  logCPURequest: newCPURequest,\n                  logMemRequest: newMemRequest + \"Gi\",\n                  logDBCPURequest: newDBCPURequest,\n                  logDBMemRequest: newDBMemRequest + \"Gi\",\n                }\n              )\n              .then(() => {\n                onClose(true);\n              })\n              .catch((err: ErrorResponseHandler) => {});\n          }\n        }}\n      >\n        <Grid container>\n          <Grid xs={12} className={classes.modalFormScrollable}>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <h4>Logging API </h4>\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`image`}\n                label={\"Image\"}\n                placeholder={\"Image\"}\n                name={`image`}\n                value={newImage}\n                onChange={(e) => {\n                  setNewImage(e.target.value);\n                  cleanValidation(`image`);\n                }}\n                key={`image`}\n                error={validationErrors[`image`] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`diskCapacityGB`}\n                label={\"Disk Capacity\"}\n                placeholder={\"Disk Capacity\"}\n                name={`diskCapacityGB`}\n                value={newDiskCapacityGB as any as string}\n                onChange={(e) => {\n                  setNewDiskCapacityGB(e.target.value as any as number);\n                  cleanValidation(`diskCapacityGB`);\n                }}\n                key={`diskCapacityGB`}\n                error={validationErrors[`diskCapacityGB`] || \"\"}\n                overlayObject={\n                  <InputUnitMenu\n                    id={\"size-unit\"}\n                    onUnitChange={() => {}}\n                    unitSelected={\"Gi\"}\n                    unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n                    disabled={true}\n                  />\n                }\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`serviceAccountName`}\n                label={\"Service Account\"}\n                placeholder={\"Service Account Name\"}\n                name={`serviceAccountName`}\n                value={newServiceAccountName}\n                onChange={(e) => {\n                  setNewServiceAccountName(e.target.value);\n                  cleanValidation(`serviceAccountName`);\n                }}\n                key={`serviceAccountName`}\n                error={validationErrors[`serviceAccountName`] || \"\"}\n              />\n            </Grid>\n\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`cpuRequest`}\n                label={\"CPU Request\"}\n                placeholder={\"CPU Request\"}\n                name={`cpuRequest`}\n                value={newCPURequest as any as string}\n                onChange={(e) => {\n                  setNewCPURequest(e.target.value as any as string);\n                  cleanValidation(`cpuRequest`);\n                }}\n                key={`cpuRequest`}\n                error={validationErrors[`cpuRequest`] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`memRequest`}\n                label={\"Memory request\"}\n                placeholder={\"Memory request\"}\n                name={`memRequest`}\n                value={newMemRequest}\n                onChange={(e) => {\n                  setNewMemRequest(e.target.value as any as string);\n                  cleanValidation(`memRequest`);\n                }}\n                key={`memRequest`}\n                error={validationErrors[`memRequest`] || \"\"}\n                overlayObject={\n                  <InputUnitMenu\n                    id={\"size-unit\"}\n                    onUnitChange={() => {}}\n                    unitSelected={\"Gi\"}\n                    unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n                    disabled={true}\n                  />\n                }\n              />\n            </Grid>\n\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <span className={classes.inputLabel}>Labels</span>\n              <KeyPairEdit\n                newValues={newLabels}\n                setNewValues={setNewLabels}\n                paramName={\"Labels\"}\n                error={labelsError}\n                setError={setLabelsError}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <span className={classes.inputLabel}>Annotations</span>\n              <KeyPairEdit\n                newValues={newAnnotations}\n                setNewValues={setNewAnnotations}\n                paramName={\"Annotations\"}\n                error={annotationsError}\n                setError={setAnnotationsError}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <span className={classes.inputLabel}>Node Selector</span>\n              <KeyPairEdit\n                newValues={newNodeSelector}\n                setNewValues={setNewNodeSelector}\n                paramName={\"Node Selector\"}\n                error={nodeSelectorError}\n                setError={setNodeSelectorError}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <h4>Database Configuration </h4>\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`dbImage`}\n                label={\"Postgres Image\"}\n                placeholder={\"Db Image\"}\n                name={`dbImage`}\n                value={newDbImage}\n                onChange={(e) => {\n                  setNewDbImage(e.target.value);\n                  cleanValidation(`dbImage`);\n                }}\n                key={`dbImage`}\n                error={validationErrors[`dbImage`] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`dbServiceAccountName`}\n                label={\"Service Account\"}\n                placeholder={\"Db Service Account Name\"}\n                name={`dbServiceAccountName`}\n                value={newDbServiceAccountName}\n                onChange={(e) => {\n                  setNewDbServiceAccountName(e.target.value);\n                  cleanValidation(`dbServiceAccountName`);\n                }}\n                key={`dbServiceAccountName`}\n                error={validationErrors[`dbServiceAccountName`] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`dbCpuRequest`}\n                label={\"DB CPU Request\"}\n                placeholder={\"DB CPU Request\"}\n                name={`dbCpuRequest`}\n                value={newDBCPURequest as any as string}\n                onChange={(e) => {\n                  setNewDBCPURequest(e.target.value as any as string);\n                  cleanValidation(`dbCpuRequest`);\n                }}\n                key={`dbCpuRequest`}\n                error={validationErrors[`dbCpuRequest`] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`dbMemRequest`}\n                label={\"DB Memory request\"}\n                placeholder={\"DB Memory request\"}\n                name={`dbMemRequest`}\n                value={newDBMemRequest}\n                onChange={(e) => {\n                  setNewDBMemRequest(e.target.value as any as string);\n                  cleanValidation(`dbMemRequest`);\n                }}\n                key={`dbMemRequest`}\n                error={validationErrors[`dbMemRequest`] || \"\"}\n                overlayObject={\n                  <InputUnitMenu\n                    id={\"size-unit\"}\n                    onUnitChange={() => {}}\n                    unitSelected={\"Gi\"}\n                    unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n                    disabled={true}\n                  />\n                }\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <span className={classes.inputLabel}>Labels</span>\n              <KeyPairEdit\n                newValues={newDbLabels}\n                setNewValues={setNewDbLabels}\n                paramName={\"Db Labels\"}\n                error={dbLabelsError}\n                setError={setDbLabelsError}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <span className={classes.inputLabel}>Annotations</span>\n              <KeyPairEdit\n                newValues={newDbAnnotations}\n                setNewValues={setNewDbAnnotations}\n                paramName={\"Db Annotations\"}\n                error={dbAnnotationsError}\n                setError={setDbAnnotationsError}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <span className={classes.inputLabel}>Node Selector</span>\n              <KeyPairEdit\n                newValues={newDbNodeSelector}\n                setNewValues={setNewDbNodeSelector}\n                paramName={\"DbNode Selector\"}\n                error={dbNodeSelectorError}\n                setError={setDbNodeSelectorError}\n              />\n            </Grid>\n          </Grid>\n          <Grid xs={12} className={classes.buttonContainer}>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={!checkValid()}\n            >\n              Save\n            </Button>\n          </Grid>\n        </Grid>\n      </form>\n    </ModalWrapper>\n  );\n};\n\nexport default withStyles(styles)(EditTenantLogsModal);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Theme } from \"@mui/material/styles\";\nimport {\n  actionsTray,\n  containerForHeader,\n  searchField,\n  tenantDetailsStyles,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport Grid from \"@mui/material/Grid\";\nimport { DialogContentText } from \"@mui/material\";\nimport Paper from \"@mui/material/Paper\";\nimport api from \"../../../../common/api\";\nimport { ITenant } from \"../ListTenants/types\";\nimport { AppState } from \"../../../../store\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { EditIcon } from \"../../../../icons\";\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport EditTenantLogsModal from \"./EditTenantLogsModal\";\nimport KeyPairView from \"./KeyPairView\";\nimport { ITenantLogsStruct } from \"../ListTenants/types\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport RBIconButton from \"../../Buckets/BucketDetails/SummaryItems/RBIconButton\";\nimport { niceBytes } from \"../../../../common/utils\";\nimport Loader from \"../../Common/Loader/Loader\";\n\ninterface ITenantLogs {\n  classes: any;\n  match: any;\n  tenant: ITenant | null;\n  loadingTenant: boolean;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...tenantDetailsStyles,\n    headerLabel: {\n      fontSize: 22,\n      fontWeight: 600,\n      color: \"#000\",\n      marginTop: 4,\n    },\n    breadcrumLink: {\n      textDecoration: \"none\",\n      color: \"black\",\n    },\n    tableWrapper: {\n      height: \"calc(100vh - 267px)\",\n    },\n    paperContainer: {\n      padding: \"15px 15px 15px 50px\",\n    },\n    ...actionsTray,\n    ...searchField,\n    ...containerForHeader(theme.spacing(4)),\n  });\n\nconst TenantLogging = ({\n  classes,\n  match,\n  tenant,\n  loadingTenant,\n}: ITenantLogs) => {\n  const [loadingTenantLogs, setLoadingTenantLogs] = useState<boolean>(true);\n  const [logInfo, setLogInfo] = useState<ITenantLogsStruct>();\n  const [edit, setEdit] = useState<boolean>(false);\n  const [disabled, setDisabled] = useState<boolean>(false);\n  const [preDisabled, setPreDisabled] = useState<boolean>(false);\n  const [disableDialogOpen, setDisableDialogOpen] = useState<boolean>(false);\n  const [enableDialogOpen, setEnableDialogOpen] = useState<boolean>(false);\n\n  const tenantName = match.params[\"tenantName\"];\n  const tenantNamespace = match.params[\"tenantNamespace\"];\n\n  useEffect(() => {\n    if (loadingTenantLogs) {\n      api\n        .invoke(\n          \"GET\",\n          `/api/v1/namespaces/${tenantNamespace}/tenants/${tenantName}/log`\n        )\n        .then((result: ITenantLogsStruct) => {\n          setLogInfo(result);\n          setPreDisabled(result.disabled);\n          setDisabled(result.disabled);\n          setLoadingTenantLogs(false);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setErrorSnackMessage({\n            errorMessage: \"Error getting tenant logs\",\n            detailedError: err.detailedError,\n          });\n        });\n    }\n  }, [tenantName, tenantNamespace, loadingTenantLogs, setDisabled, disabled]);\n\n  const onCloseEditAndRefresh = () => {\n    setDisableDialogOpen(false);\n    setEdit(false);\n    setLoadingTenantLogs(true);\n  };\n\n  const onCloseEnableAndRefresh = () => {\n    setEnableDialogOpen(false);\n    setDisabled(false);\n    setLoadingTenantLogs(true);\n  };\n\n  return (\n    <Fragment>\n      <ConfirmDialog\n        title=\"Disable Logging?\"\n        confirmText=\"Disable\"\n        isOpen={disableDialogOpen}\n        onConfirm={() => {\n          api\n            .invoke(\n              \"POST\",\n              `/api/v1/namespaces/${tenantNamespace}/tenants/${tenantName}/disable-logging`\n            )\n            .then(() => {\n              setPreDisabled(true);\n              setDisabled(true);\n            })\n            .catch((err: ErrorResponseHandler) => {\n              setErrorSnackMessage({\n                errorMessage: \"Error disabling logging\",\n                detailedError: err.detailedError,\n              });\n            });\n          onCloseEditAndRefresh();\n        }}\n        onClose={() => setDisableDialogOpen(false)}\n        confirmationContent={\n          <DialogContentText>\n            Disabling logging will erase any custom values you have used to\n            configure logging\n          </DialogContentText>\n        }\n      />\n      <ConfirmDialog\n        title=\"Enable Logging?\"\n        confirmText=\"Enable\"\n        isOpen={enableDialogOpen}\n        onConfirm={() => {\n          api\n            .invoke(\n              \"POST\",\n              `/api/v1/namespaces/${tenantNamespace}/tenants/${tenantName}/enable-logging`\n            )\n            .then(() => {\n              setPreDisabled(false);\n            })\n            .catch((err: ErrorResponseHandler) => {\n              setErrorSnackMessage({\n                errorMessage: \"Error enabling logging\",\n                detailedError: err.detailedError,\n              });\n            });\n          onCloseEnableAndRefresh();\n        }}\n        onClose={() => setEnableDialogOpen(false)}\n        confirmationContent={\n          <DialogContentText>\n            Logging will be enabled with default values\n          </DialogContentText>\n        }\n      />\n      {edit && tenant !== null && logInfo != null && !disabled && (\n        <EditTenantLogsModal\n          open={edit}\n          onClose={onCloseEditAndRefresh}\n          tenant={tenant}\n          image={logInfo.image}\n          labels={logInfo.labels}\n          annotations={logInfo.annotations}\n          nodeSelector={logInfo.nodeSelector}\n          diskCapacityGB={logInfo.diskCapacityGB}\n          serviceAccountName={logInfo.serviceAccountName}\n          dbImage={logInfo.dbImage}\n          dbLabels={logInfo.dbLabels}\n          dbAnnotations={logInfo.dbAnnotations}\n          dbNodeSelector={logInfo.dbNodeSelector}\n          dbServiceAccountName={logInfo.dbServiceAccountName}\n          cpuRequest={logInfo.logCPURequest}\n          memRequest={logInfo.logMemRequest}\n          dbCPURequest={logInfo.logDBCPURequest}\n          dbMemRequest={logInfo.logDBMemRequest}\n        />\n      )}\n      <Grid container alignItems={\"center\"}>\n        <Grid item xs>\n          <h1 className={classes.sectionTitle}>Logging</h1>\n        </Grid>\n        <Grid item xs={4}>\n          <FormSwitchWrapper\n            value=\"enableLogging\"\n            id=\"enableLogging\"\n            name=\"enableLogging\"\n            checked={!preDisabled}\n            onChange={(e) => {\n              const targetD = e.target;\n              const checked = targetD.checked;\n              if (checked) {\n                setEnableDialogOpen(true);\n              } else {\n                setDisableDialogOpen(true);\n              }\n            }}\n            indicatorLabels={[\"Enabled\", \"Disabled\"]}\n          />\n        </Grid>\n      </Grid>\n      {!disabled && !loadingTenantLogs && (\n        <Paper className={classes.paperContainer}>\n          <Grid container>\n            <Grid item xs={12}>\n              <Grid container alignItems={\"center\"}>\n                <Grid xs={8}>\n                  <h3>Configuration</h3>\n                </Grid>\n                <Grid xs={4} justifyContent={\"end\"} textAlign={\"right\"}>\n                  <RBIconButton\n                    tooltip={\"Edit Logging configuration\"}\n                    text={\"Edit\"}\n                    onClick={() => {\n                      setEdit(true);\n                    }}\n                    icon={<EditIcon />}\n                    color=\"primary\"\n                    variant={\"contained\"}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12}>\n              <hr className={classes.hrClass} />\n              <table width={\"100%\"}>\n                <tbody>\n                  {loadingTenant ? (\n                    <tr>\n                      <td className={classes.centerAlign} colSpan={4}>\n                        <Loader />\n                      </td>\n                    </tr>\n                  ) : (\n                    <Fragment>\n                      {logInfo?.logCPURequest != null && (\n                        <tr>\n                          <td className={classes.titleCol}>CPU Request:</td>\n                          <td>{logInfo?.logCPURequest}</td>\n                        </tr>\n                      )}\n                      {logInfo?.logMemRequest != null && (\n                        <tr>\n                          <td className={classes.titleCol}>Memory Request:</td>\n                          <td>{niceBytes(logInfo?.logMemRequest, true)}</td>\n                        </tr>\n                      )}\n                      {logInfo?.image != null && (\n                        <tr>\n                          <td className={classes.titleCol}>Image:</td>\n                          <td>{logInfo?.image}</td>\n                        </tr>\n                      )}\n                      {logInfo?.diskCapacityGB != null && (\n                        <tr>\n                          <td className={classes.titleCol}>\n                            Disk Capacity (GB):\n                          </td>\n                          <td>{logInfo?.diskCapacityGB}</td>\n                        </tr>\n                      )}\n                      {logInfo?.serviceAccountName != null && (\n                        <tr>\n                          <td className={classes.titleCol}>Service Account:</td>\n                          <td>{logInfo?.serviceAccountName}</td>\n                        </tr>\n                      )}\n                      {logInfo?.labels != null && logInfo.labels.length > 0 && (\n                        <Fragment>\n                          <tr>\n                            <td>\n                              <h4>Labels</h4>\n                            </td>\n                          </tr>\n                          <tr>\n                            <td>\n                              <KeyPairView\n                                records={\n                                  logInfo != null && logInfo.labels.length > 0\n                                    ? logInfo.labels\n                                    : []\n                                }\n                                recordName=\"Labels\"\n                              />\n                            </td>\n                          </tr>\n                        </Fragment>\n                      )}\n                      {logInfo?.annotations != null &&\n                        logInfo.annotations.length > 0 && (\n                          <Fragment>\n                            <tr>\n                              <td>\n                                <h4>Annotations</h4>\n                              </td>\n                            </tr>\n                            <tr>\n                              <td>\n                                <KeyPairView\n                                  records={\n                                    logInfo != null &&\n                                    logInfo.annotations.length > 0\n                                      ? logInfo.annotations\n                                      : []\n                                  }\n                                  recordName=\"Annotations\"\n                                />\n                              </td>\n                            </tr>\n                          </Fragment>\n                        )}\n                      {logInfo?.nodeSelector != null &&\n                        logInfo.nodeSelector.length > 0 && (\n                          <Fragment>\n                            <tr>\n                              <td>\n                                <h4>Node Selector</h4>\n                              </td>\n                            </tr>\n                            <tr>\n                              <td>\n                                <KeyPairView\n                                  records={\n                                    logInfo != null &&\n                                    logInfo.nodeSelector.length > 0\n                                      ? logInfo.nodeSelector\n                                      : []\n                                  }\n                                  recordName=\"Node Selector\"\n                                />\n                              </td>\n                            </tr>\n                          </Fragment>\n                        )}\n                    </Fragment>\n                  )}\n                </tbody>\n              </table>\n\n              <h2>Database Details</h2>\n              <hr className={classes.hrClass} />\n              <table width={\"100%\"}>\n                <tbody>\n                  {loadingTenant ? (\n                    <tr>\n                      <td className={classes.centerAlign} colSpan={4}>\n                        <Loader />\n                      </td>\n                    </tr>\n                  ) : (\n                    <Fragment>\n                      {logInfo?.logDBCPURequest != null && (\n                        <tr>\n                          <td className={classes.titleCol}>DB CPU Request:</td>\n                          <td>{logInfo?.logDBCPURequest}</td>\n                        </tr>\n                      )}\n                      {logInfo?.logDBMemRequest != null && (\n                        <tr>\n                          <td className={classes.titleCol}>\n                            DB Memory Request:\n                          </td>\n                          <td>{niceBytes(logInfo?.logDBMemRequest, true)}</td>\n                        </tr>\n                      )}\n                      {logInfo?.dbImage != null && (\n                        <tr>\n                          <td className={classes.titleCol}>Postgres Image:</td>\n                          <td>{logInfo?.dbImage}</td>\n                        </tr>\n                      )}\n                      {logInfo?.dbServiceAccountName != null && (\n                        <tr>\n                          <td className={classes.titleCol}>Service Account:</td>\n                          <td>{logInfo?.dbServiceAccountName}</td>\n                        </tr>\n                      )}\n                      {logInfo?.dbLabels != null &&\n                        logInfo.dbLabels.length > 0 && (\n                          <Fragment>\n                            <tr>\n                              <td>\n                                <h4>Labels</h4>\n                              </td>\n                            </tr>\n\n                            <tr>\n                              <td>\n                                <KeyPairView\n                                  records={\n                                    logInfo != null &&\n                                    logInfo.dbLabels?.length > 0\n                                      ? logInfo.dbLabels\n                                      : []\n                                  }\n                                  recordName=\"labels\"\n                                />\n                              </td>\n                            </tr>\n                          </Fragment>\n                        )}\n                      {logInfo?.annotations != null &&\n                        logInfo.dbAnnotations.length > 0 && (\n                          <Fragment>\n                            <tr>\n                              <td>\n                                <h4>Annotations</h4>\n                              </td>\n                            </tr>\n                            <tr>\n                              <td>\n                                <KeyPairView\n                                  records={\n                                    logInfo != null &&\n                                    logInfo.dbAnnotations?.length > 0\n                                      ? logInfo.dbAnnotations\n                                      : []\n                                  }\n                                  recordName=\"annotations\"\n                                />\n                              </td>\n                            </tr>\n                          </Fragment>\n                        )}\n                      {logInfo?.nodeSelector != null &&\n                        logInfo.dbNodeSelector.length > 0 && (\n                          <Fragment>\n                            <tr>\n                              <td>\n                                <h4>Node Selector </h4>\n                              </td>\n                            </tr>\n                            <tr>\n                              <td>\n                                <KeyPairView\n                                  records={\n                                    logInfo != null &&\n                                    logInfo.dbNodeSelector?.length > 0\n                                      ? logInfo.dbNodeSelector\n                                      : []\n                                  }\n                                  recordName=\"node selectors\"\n                                />\n                              </td>\n                            </tr>\n                          </Fragment>\n                        )}\n                    </Fragment>\n                  )}\n                </tbody>\n              </table>\n            </Grid>\n          </Grid>\n        </Paper>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  loadingTenant: state.tenants.tenantDetails.loadingTenant,\n  selectedTenant: state.tenants.tenantDetails.currentTenant,\n  tenant: state.tenants.tenantDetails.tenantInfo,\n});\n\nconst connector = connect(mapState, null);\n\nexport default withStyles(styles)(connector(TenantLogging));\n"],"names":["withStyles","theme","createStyles","buttonContainer","textAlign","multiContainer","display","alignItems","justifyContent","sizeFactorContainer","marginLeft","bottomContainer","flexGrow","width","factorElements","sizeNumber","fontSize","fontWeight","sizeDescription","color","shortened","gridTemplateColumns","gridGap","modalBasic","modalStyleUtils","formFieldStyles","tenant","classes","open","onClose","image","labels","annotations","nodeSelector","diskCapacityGB","serviceAccountName","dbLabels","dbAnnotations","dbNodeSelector","dbImage","dbServiceAccountName","cpuRequest","memRequest","dbCPURequest","dbMemRequest","useState","validationErrors","setValidationErrors","length","key","value","newLabels","setNewLabels","newAnnotations","setNewAnnotations","newNodeSelector","setNewNodeSelector","newImage","setNewImage","newDiskCapacityGB","setNewDiskCapacityGB","newServiceAccountName","setNewServiceAccountName","newDbLabels","setNewDbLabels","newDbAnnotations","setNewDbAnnotations","newDbNodeSelector","setNewDbNodeSelector","newDbImage","setNewDbImage","newDbServiceAccountName","setNewDbServiceAccountName","labelsError","setLabelsError","annotationsError","setAnnotationsError","nodeSelectorError","setNodeSelectorError","dbLabelsError","setDbLabelsError","dbAnnotationsError","setDbAnnotationsError","dbNodeSelectorError","setDbNodeSelectorError","newCPURequest","setNewCPURequest","Math","floor","parseInt","toString","newMemRequest","setNewMemRequest","newDBCPURequest","setNewDBCPURequest","newDBMemRequest","setNewDBMemRequest","trim","x","retval","i","push","cleanValidation","fieldName","clearValidationError","useEffect","tenantLogValidation","fieldKey","required","pattern","customPatternMessage","commonVal","commonFormValidation","checkValid","Object","keys","ModalWrapper","modalOpen","title","noValidate","autoComplete","onSubmit","e","preventDefault","api","namespace","name","logCPURequest","logMemRequest","logDBCPURequest","logDBMemRequest","then","catch","err","setModalErrorSnackMessage","errorMessage","detailedError","Grid","container","xs","className","modalFormScrollable","item","formFieldRow","InputBoxWrapper","id","label","placeholder","onChange","target","error","overlayObject","InputUnitMenu","onUnitChange","unitSelected","unitsList","disabled","inputLabel","KeyPairEdit","newValues","setNewValues","paramName","setError","Button","type","variant","connector","connect","state","loadingTenant","tenants","tenantDetails","selectedTenant","currentTenant","tenantInfo","tenantDetailsStyles","headerLabel","marginTop","breadcrumLink","textDecoration","tableWrapper","height","paperContainer","padding","actionsTray","searchField","containerForHeader","spacing","match","loadingTenantLogs","setLoadingTenantLogs","logInfo","setLogInfo","edit","setEdit","setDisabled","preDisabled","setPreDisabled","disableDialogOpen","setDisableDialogOpen","enableDialogOpen","setEnableDialogOpen","tenantName","params","tenantNamespace","result","setErrorSnackMessage","onCloseEditAndRefresh","Fragment","ConfirmDialog","confirmText","isOpen","onConfirm","confirmationContent","DialogContentText","sectionTitle","FormSwitchWrapper","checked","indicatorLabels","Paper","RBIconButton","tooltip","text","onClick","icon","hrClass","centerAlign","colSpan","Loader","titleCol","niceBytes","KeyPairView","records","recordName"],"sourceRoot":""}