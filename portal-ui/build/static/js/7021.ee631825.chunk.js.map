{"version":3,"file":"static/js/7021.ee631825.chunk.js","mappings":"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","sources":["screens/Console/Tenants/TenantDetails/TenantIdentityProvider.tsx","../node_modules/@mui/icons-material/RemoveRedEye.js","../node_modules/@mui/icons-material/VisibilityOff.js"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { ITenant } from \"../ListTenants/types\";\nimport { ITenantIdentityProviderResponse } from \"../types\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  containerForHeader,\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  spacingUtils,\n  tenantDetailsStyles,\n  wizardCommon,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport Grid from \"@mui/material/Grid\";\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { Button, DialogContentText, Typography } from \"@mui/material\";\nimport api from \"../../../../common/api\";\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../../../../store\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport Loader from \"../../Common/Loader/Loader\";\nimport RadioGroupSelector from \"../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { clearValidationError } from \"../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../utils/validationFunctions\";\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\nimport RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport { ConfirmModalIcon } from \"../../../../icons\";\n\ninterface ITenantIdentityProvider {\n  classes: any;\n  loadingTenant: boolean;\n  tenant: ITenant | null;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...tenantDetailsStyles,\n    ...spacingUtils,\n    loaderAlign: {\n      textAlign: \"center\",\n    },\n    title: {\n      marginTop: 35,\n    },\n    bold: { fontWeight: \"bold\" },\n    italic: { fontStyle: \"italic\" },\n    paperContainer: {\n      padding: \"15px 15px 15px 50px\",\n    },\n    fileItem: {\n      marginRight: 10,\n      display: \"flex\",\n      \"& div label\": {\n        minWidth: 50,\n      },\n\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    ...containerForHeader(theme.spacing(4)),\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst TenantIdentityProvider = ({\n  classes,\n  tenant,\n  loadingTenant,\n  setErrorSnackMessage,\n}: ITenantIdentityProvider) => {\n  const [isSending, setIsSending] = useState<boolean>(false);\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n  const [idpSelection, setIdpSelection] = useState<string>(\"Built-in\");\n  const [openIDConfigurationURL, setOpenIDConfigurationURL] =\n    useState<string>(\"\");\n  const [openIDClientID, setOpenIDClientID] = useState<string>(\"\");\n  const [openIDSecretID, setOpenIDSecretID] = useState<string>(\"\");\n  const [showOIDCSecretID, setShowOIDCSecretID] = useState<boolean>(false);\n  const [openIDCallbackURL, setOpenIDCallbackURL] = useState<string>(\"\");\n  const [openIDClaimName, setOpenIDClaimName] = useState<string>(\"\");\n  const [openIDScopes, setOpenIDScopes] = useState<string>(\"\");\n  const [ADURL, setADURL] = useState<string>(\"\");\n  const [ADLookupBindDN, setADLookupBindDN] = useState<string>(\"\");\n  const [ADLookupBindPassword, setADLookupBindPassword] = useState<string>(\"\");\n  const [showADLookupBindPassword, setShowADLookupBindPassword] =\n    useState<boolean>(false);\n  const [ADUserDNSearchBaseDN, setADUserDNSearchBaseDN] = useState<string>(\"\");\n  const [ADUserDNSearchFilter, setADUserDNSearchFilter] = useState<string>(\"\");\n  const [ADGroupSearchBaseDN, setADGroupSearchBaseDN] = useState<string>(\"\");\n  const [ADGroupSearchFilter, setADGroupSearchFilter] = useState<string>(\"\");\n  const [ADSkipTLS, setADSkipTLS] = useState<boolean>(false);\n  const [ADServerInsecure, setADServerInsecure] = useState<boolean>(false);\n  const [ADServerStartTLS, setADServerStartTLS] = useState<boolean>(false);\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\n\n  // Validation\n  useEffect(() => {\n    let identityProviderValidation: IValidation[] = [];\n\n    if (idpSelection === \"OpenID\") {\n      identityProviderValidation = [\n        ...identityProviderValidation,\n        {\n          fieldKey: \"openID_CONFIGURATION_URL\",\n          required: true,\n          value: openIDConfigurationURL,\n        },\n        {\n          fieldKey: \"openID_clientID\",\n          required: true,\n          value: openIDClientID,\n        },\n        {\n          fieldKey: \"openID_secretID\",\n          required: true,\n          value: openIDSecretID,\n        },\n        {\n          fieldKey: \"openID_claimName\",\n          required: true,\n          value: openIDClaimName,\n        },\n      ];\n    }\n\n    if (idpSelection === \"AD\") {\n      identityProviderValidation = [\n        ...identityProviderValidation,\n        {\n          fieldKey: \"AD_URL\",\n          required: true,\n          value: ADURL,\n        },\n        {\n          fieldKey: \"ad_lookupBindDN\",\n          required: true,\n          value: ADLookupBindDN,\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(identityProviderValidation);\n\n    setIsFormValid(Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    idpSelection,\n    openIDConfigurationURL,\n    openIDClientID,\n    openIDSecretID,\n    openIDClaimName,\n    ADURL,\n    ADLookupBindDN,\n  ]);\n\n  const getTenantIdentityProviderInfo = useCallback(() => {\n    api\n      .invoke(\n        \"GET\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/identity-provider`\n      )\n      .then((res: ITenantIdentityProviderResponse) => {\n        if (res) {\n          if (res.oidc) {\n            setIdpSelection(\"OpenID\");\n            setOpenIDConfigurationURL(res.oidc.configuration_url);\n            setOpenIDClientID(res.oidc.client_id);\n            setOpenIDSecretID(res.oidc.secret_id);\n            setOpenIDCallbackURL(res.oidc.callback_url);\n            setOpenIDClaimName(res.oidc.claim_name);\n            setOpenIDScopes(res.oidc.scopes);\n          } else if (res.active_directory) {\n            setIdpSelection(\"AD\");\n            setADURL(res.active_directory.url);\n            setADLookupBindDN(res.active_directory.lookup_bind_dn);\n            setADLookupBindPassword(res.active_directory.lookup_bind_password);\n            setADUserDNSearchBaseDN(\n              res.active_directory.user_dn_search_base_dn\n            );\n            setADUserDNSearchFilter(res.active_directory.user_dn_search_filter);\n            setADGroupSearchBaseDN(res.active_directory.group_search_base_dn);\n            setADGroupSearchFilter(res.active_directory.group_search_filter);\n            setADSkipTLS(res.active_directory.skip_tls_verification);\n            setADServerInsecure(res.active_directory.server_insecure);\n            setADServerStartTLS(res.active_directory.server_start_tls);\n          }\n        }\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setErrorSnackMessage(err);\n      });\n  }, [tenant, setErrorSnackMessage]);\n\n  useEffect(() => {\n    if (tenant) {\n      getTenantIdentityProviderInfo();\n    }\n  }, [tenant, getTenantIdentityProviderInfo]);\n\n  const updateTenantIdentityProvider = () => {\n    setIsSending(true);\n    let payload: ITenantIdentityProviderResponse = {};\n    switch (idpSelection) {\n      case \"AD\":\n        payload.active_directory = {\n          url: ADURL,\n          lookup_bind_dn: ADLookupBindDN,\n          lookup_bind_password: ADLookupBindPassword,\n          user_dn_search_base_dn: ADUserDNSearchBaseDN,\n          user_dn_search_filter: ADUserDNSearchFilter,\n          group_search_base_dn: ADGroupSearchBaseDN,\n          group_search_filter: ADGroupSearchFilter,\n          skip_tls_verification: ADSkipTLS,\n          server_insecure: ADServerInsecure,\n          server_start_tls: ADServerStartTLS,\n        };\n        break;\n      case \"OpenID\":\n        payload.oidc = {\n          configuration_url: openIDConfigurationURL,\n          client_id: openIDClientID,\n          secret_id: openIDSecretID,\n          callback_url: openIDCallbackURL,\n          claim_name: openIDClaimName,\n          scopes: openIDScopes,\n        };\n        break;\n      default:\n      // Built-in IDP will be used by default\n    }\n\n    api\n      .invoke(\n        \"POST\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/identity-provider`,\n        payload\n      )\n      .then(() => {\n        setIsSending(false);\n        // Close confirmation modal\n        setDialogOpen(false);\n        getTenantIdentityProviderInfo();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setErrorSnackMessage(err);\n        setIsSending(false);\n      });\n  };\n\n  return (\n    <React.Fragment>\n      <ConfirmDialog\n        title={\"Save and Restart\"}\n        confirmText={\"Restart\"}\n        cancelText=\"Cancel\"\n        titleIcon={<ConfirmModalIcon />}\n        isLoading={isSending}\n        onClose={() => setDialogOpen(false)}\n        isOpen={dialogOpen}\n        onConfirm={updateTenantIdentityProvider}\n        confirmationContent={\n          <DialogContentText>\n            Are you sure you want to save the changes and restart the service?\n          </DialogContentText>\n        }\n      />\n      {loadingTenant ? (\n        <div className={classes.loaderAlign}>\n          <Loader />\n        </div>\n      ) : (\n        <Fragment>\n          <Grid item xs={12}>\n            <h1 className={classes.sectionTitle}>Identity Provider</h1>\n            <hr className={classes.hrClass} />\n          </Grid>\n          <Grid item xs={12} className={classes.protocolRadioOptions}>\n            <RadioGroupSelector\n              currentSelection={idpSelection}\n              id=\"idp-options\"\n              name=\"idp-options\"\n              label=\"Protocol\"\n              onChange={(e) => {\n                setIdpSelection(e.target.value);\n              }}\n              selectorOptions={[\n                { label: \"Built-in\", value: \"Built-in\" },\n                { label: \"OpenID\", value: \"OpenID\" },\n                { label: \"Active Directory\", value: \"AD\" },\n              ]}\n            />\n          </Grid>\n\n          {idpSelection === \"OpenID\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"openID_CONFIGURATION_URL\"\n                  name=\"openID_CONFIGURATION_URL\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDConfigurationURL(e.target.value);\n                    cleanValidation(\"openID_CONFIGURATION_URL\");\n                  }}\n                  label=\"Configuration URL\"\n                  value={openIDConfigurationURL}\n                  placeholder=\"https://your-identity-provider.com/.well-known/openid-configuration\"\n                  error={validationErrors[\"openID_CONFIGURATION_URL\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"openID_clientID\"\n                  name=\"openID_clientID\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDClientID(e.target.value);\n                    cleanValidation(\"openID_clientID\");\n                  }}\n                  label=\"Client ID\"\n                  value={openIDClientID}\n                  error={validationErrors[\"openID_clientID\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  type={showOIDCSecretID ? \"text\" : \"password\"}\n                  id=\"openID_secretID\"\n                  name=\"openID_secretID\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDSecretID(e.target.value);\n                    cleanValidation(\"openID_secretID\");\n                  }}\n                  label=\"Secret ID\"\n                  value={openIDSecretID}\n                  error={validationErrors[\"openID_secretID\"] || \"\"}\n                  required\n                  overlayIcon={\n                    showOIDCSecretID ? (\n                      <VisibilityOffIcon />\n                    ) : (\n                      <RemoveRedEyeIcon />\n                    )\n                  }\n                  overlayAction={() => setShowOIDCSecretID(!showOIDCSecretID)}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"openID_callbackURL\"\n                  name=\"openID_callbackURL\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDCallbackURL(e.target.value);\n                    cleanValidation(\"openID_callbackURL\");\n                  }}\n                  label=\"Callback URL\"\n                  value={openIDCallbackURL}\n                  placeholder=\"https://your-console-endpoint:9443/oauth_callback\"\n                  error={validationErrors[\"openID_callbackURL\"] || \"\"}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"openID_claimName\"\n                  name=\"openID_claimName\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDClaimName(e.target.value);\n                    cleanValidation(\"openID_claimName\");\n                  }}\n                  label=\"Claim Name\"\n                  value={openIDClaimName}\n                  error={validationErrors[\"openID_claimName\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"openID_scopes\"\n                  name=\"openID_scopes\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDScopes(e.target.value);\n                    cleanValidation(\"openID_scopes\");\n                  }}\n                  label=\"Scopes\"\n                  value={openIDScopes}\n                />\n              </Grid>\n            </Fragment>\n          )}\n\n          {idpSelection === \"AD\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"AD_URL\"\n                  name=\"AD_URL\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADURL(e.target.value);\n                    cleanValidation(\"AD_URL\");\n                  }}\n                  label=\"LDAP Server Address\"\n                  value={ADURL}\n                  placeholder=\"ldap-server:636\"\n                  error={validationErrors[\"AD_URL\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <FormSwitchWrapper\n                  value=\"ad_skipTLS\"\n                  id=\"ad_skipTLS\"\n                  name=\"ad_skipTLS\"\n                  checked={ADSkipTLS}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    setADSkipTLS(checked);\n                  }}\n                  label={\"Skip TLS Verification\"}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <FormSwitchWrapper\n                  value=\"ad_serverInsecure\"\n                  id=\"ad_serverInsecure\"\n                  name=\"ad_serverInsecure\"\n                  checked={ADServerInsecure}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    setADServerInsecure(checked);\n                  }}\n                  label={\"Server Insecure\"}\n                />\n              </Grid>\n              {ADServerInsecure ? (\n                <Grid item xs={12}>\n                  <Typography\n                    className={classes.error}\n                    variant=\"caption\"\n                    display=\"block\"\n                    gutterBottom\n                  >\n                    Warning: All traffic with Active Directory will be\n                    unencrypted\n                  </Typography>\n                  <br />\n                </Grid>\n              ) : null}\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <FormSwitchWrapper\n                  value=\"ad_serverStartTLS\"\n                  id=\"ad_serverStartTLS\"\n                  name=\"ad_serverStartTLS\"\n                  checked={ADServerStartTLS}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    setADServerStartTLS(checked);\n                  }}\n                  label={\"Start TLS connection to AD/LDAP server\"}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"ad_lookupBindDN\"\n                  name=\"ad_lookupBindDN\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADLookupBindDN(e.target.value);\n                    cleanValidation(\"ad_lookupBindDN\");\n                  }}\n                  label=\"Lookup Bind DN\"\n                  value={ADLookupBindDN}\n                  placeholder=\"cn=admin,dc=min,dc=io\"\n                  error={validationErrors[\"ad_lookupBindDN\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  type={showADLookupBindPassword ? \"text\" : \"password\"}\n                  id=\"ad_lookupBindPassword\"\n                  name=\"ad_lookupBindPassword\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADLookupBindPassword(e.target.value);\n                  }}\n                  label=\"Lookup Bind Password\"\n                  value={ADLookupBindPassword}\n                  placeholder=\"admin\"\n                  overlayIcon={\n                    showADLookupBindPassword ? (\n                      <VisibilityOffIcon />\n                    ) : (\n                      <RemoveRedEyeIcon />\n                    )\n                  }\n                  overlayAction={() =>\n                    setShowADLookupBindPassword(!showADLookupBindPassword)\n                  }\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"ad_userDNSearchBaseDN\"\n                  name=\"ad_userDNSearchBaseDN\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADUserDNSearchBaseDN(e.target.value);\n                  }}\n                  label=\"User DN Search Base DN\"\n                  value={ADUserDNSearchBaseDN}\n                  placeholder=\"dc=min,dc=io\"\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"ad_userDNSearchFilter\"\n                  name=\"ad_userDNSearchFilter\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADUserDNSearchFilter(e.target.value);\n                  }}\n                  label=\"User DN Search Filter\"\n                  value={ADUserDNSearchFilter}\n                  placeholder=\"(sAMAcountName=%s)\"\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"ad_groupSearchBaseDN\"\n                  name=\"ad_groupSearchBaseDN\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADGroupSearchBaseDN(e.target.value);\n                  }}\n                  label=\"Group Search Base DN\"\n                  value={ADGroupSearchBaseDN}\n                  placeholder=\"ou=hwengg,dc=min,dc=io;ou=swengg,dc=min,dc=io\"\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"ad_groupSearchFilter\"\n                  name=\"ad_groupSearchFilter\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADGroupSearchFilter(e.target.value);\n                  }}\n                  label=\"Group Search Filter\"\n                  value={ADGroupSearchFilter}\n                  placeholder=\"(&(objectclass=groupOfNames)(member=%s))\"\n                />\n              </Grid>\n            </Fragment>\n          )}\n\n          <Grid item xs={12} className={classes.buttonContainer}>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={!isFormValid || isSending}\n              onClick={() => setDialogOpen(true)}\n            >\n              Save\n            </Button>\n          </Grid>\n        </Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  loadingTenant: state.tenants.tenantDetails.loadingTenant,\n  selectedTenant: state.tenants.tenantDetails.currentTenant,\n  tenant: state.tenants.tenantDetails.tenantInfo,\n});\n\nconst mapDispatchToProps = {\n  setErrorSnackMessage,\n};\n\nconst connector = connect(mapState, mapDispatchToProps);\n\nexport default withStyles(styles)(connector(TenantIdentityProvider));\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\"\n}), 'RemoveRedEye');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78 3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z\"\n}), 'VisibilityOff');\n\nexports.default = _default;"],"names":["mapDispatchToProps","setErrorSnackMessage","connector","connect","state","loadingTenant","tenants","tenantDetails","selectedTenant","currentTenant","tenant","tenantInfo","withStyles","theme","createStyles","tenantDetailsStyles","spacingUtils","loaderAlign","textAlign","title","marginTop","bold","fontWeight","italic","fontStyle","paperContainer","padding","fileItem","marginRight","display","minWidth","flexFlow","containerForHeader","spacing","createTenantCommon","formFieldStyles","modalBasic","wizardCommon","classes","useState","isSending","setIsSending","dialogOpen","setDialogOpen","idpSelection","setIdpSelection","openIDConfigurationURL","setOpenIDConfigurationURL","openIDClientID","setOpenIDClientID","openIDSecretID","setOpenIDSecretID","showOIDCSecretID","setShowOIDCSecretID","openIDCallbackURL","setOpenIDCallbackURL","openIDClaimName","setOpenIDClaimName","openIDScopes","setOpenIDScopes","ADURL","setADURL","ADLookupBindDN","setADLookupBindDN","ADLookupBindPassword","setADLookupBindPassword","showADLookupBindPassword","setShowADLookupBindPassword","ADUserDNSearchBaseDN","setADUserDNSearchBaseDN","ADUserDNSearchFilter","setADUserDNSearchFilter","ADGroupSearchBaseDN","setADGroupSearchBaseDN","ADGroupSearchFilter","setADGroupSearchFilter","ADSkipTLS","setADSkipTLS","ADServerInsecure","setADServerInsecure","ADServerStartTLS","setADServerStartTLS","validationErrors","setValidationErrors","cleanValidation","fieldName","clearValidationError","isFormValid","setIsFormValid","useEffect","identityProviderValidation","fieldKey","required","value","commonVal","commonFormValidation","Object","keys","length","getTenantIdentityProviderInfo","useCallback","api","namespace","name","then","res","oidc","configuration_url","client_id","secret_id","callback_url","claim_name","scopes","active_directory","url","lookup_bind_dn","lookup_bind_password","user_dn_search_base_dn","user_dn_search_filter","group_search_base_dn","group_search_filter","skip_tls_verification","server_insecure","server_start_tls","catch","err","confirmText","cancelText","titleIcon","isLoading","onClose","isOpen","onConfirm","payload","confirmationContent","className","Fragment","item","xs","sectionTitle","hrClass","protocolRadioOptions","currentSelection","id","label","onChange","e","target","selectorOptions","formFieldRow","placeholder","error","type","overlayIcon","overlayAction","checked","variant","gutterBottom","buttonContainer","color","disabled","onClick","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}