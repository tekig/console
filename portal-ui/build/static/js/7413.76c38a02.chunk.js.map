{"version":3,"file":"static/js/7413.76c38a02.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/PredefinedList/PredefinedList.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx","screens/Console/Groups/AddGroup.tsx","screens/Console/Groups/UsersSelectors.tsx"],"sourcesContent":["import React, { Fragment } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { predefinedList } from \"../common/styleLibrary\";\n\ninterface IPredefinedList {\n  classes: any;\n  label?: string;\n  content: any;\n  multiLine?: boolean;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...predefinedList,\n  });\n\nconst PredefinedList = ({\n  classes,\n  label = \"\",\n  content,\n  multiLine = false,\n}: IPredefinedList) => {\n  return (\n    <Fragment>\n      <Grid className={classes.prefinedContainer}>\n        {label !== \"\" && (\n          <Grid item xs={12} className={classes.predefinedTitle}>\n            {label}\n          </Grid>\n        )}\n        <Grid item xs={12} className={classes.predefinedList}>\n          <Grid\n            item\n            xs={12}\n            className={\n              multiLine ? classes.innerContentMultiline : classes.innerContent\n            }\n          >\n            {content}\n          </Grid>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(PredefinedList);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport { Dialog, DialogContent, DialogTitle } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  deleteDialogStyles,\n  snackBarCommon,\n} from \"../FormComponents/common/styleLibrary\";\nimport { AppState } from \"../../../../store\";\nimport { snackBarMessage } from \"../../../../types\";\nimport { setModalSnackMessage } from \"../../../../actions\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport MainError from \"../MainError/MainError\";\n\ninterface IModalProps {\n  classes: any;\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  modalSnackMessage?: snackBarMessage;\n  noContentPadding?: boolean;\n  setModalSnackMessage: typeof setModalSnackMessage;\n  titleIcon?: React.ReactNode;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n    content: {\n      padding: 25,\n      paddingBottom: 0,\n    },\n    customDialogSize: {\n      width: \"100%\",\n      maxWidth: 765,\n    },\n    ...snackBarCommon,\n  });\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  classes,\n  wideLimit = true,\n  modalSnackMessage,\n  noContentPadding,\n  setModalSnackMessage,\n  titleIcon = null,\n}: IModalProps) => {\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  useEffect(() => {\n    setModalSnackMessage(\"\");\n  }, [setModalSnackMessage]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    setModalSnackMessage(\"\");\n  };\n\n  const customSize = wideLimit\n    ? {\n        classes: {\n          paper: classes.customDialogSize,\n        },\n      }\n    : { maxWidth: \"lg\" as const, fullWidth: true };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (\n      modalSnackMessage.detailedErrorMsg === \"\" ||\n      modalSnackMessage.detailedErrorMsg.length < 5\n    ) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <Dialog\n      open={modalOpen}\n      classes={classes}\n      {...customSize}\n      scroll={\"paper\"}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n    >\n      <DialogTitle className={classes.title}>\n        <div className={classes.titleText}>\n          {titleIcon} {title}\n        </div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            id={\"close\"}\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <MainError isModal={true} />\n      <Snackbar\n        open={openSnackbar}\n        className={classes.snackBarModal}\n        onClose={() => {\n          closeSnackBar();\n        }}\n        message={message}\n        ContentProps={{\n          className: `${classes.snackBar} ${\n            modalSnackMessage && modalSnackMessage.type === \"error\"\n              ? classes.errorSnackBar\n              : \"\"\n          }`,\n        }}\n        autoHideDuration={\n          modalSnackMessage && modalSnackMessage.type === \"error\" ? 10000 : 5000\n        }\n      />\n      <DialogContent className={noContentPadding ? \"\" : classes.content}>\n        {children}\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  modalSnackMessage: state.system.modalSnackBar,\n});\n\nconst connector = connect(mapState, {\n  setModalSnackMessage,\n});\n\nexport default withStyles(styles)(connector(ModalWrapper));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Button, LinearProgress } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  formFieldStyles,\n  modalStyleUtils,\n  spacingUtils,\n} from \"../Common/FormComponents/common/styleLibrary\";\nimport { setModalErrorSnackMessage } from \"../../../actions\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport api from \"../../../common/api\";\nimport UsersSelectors from \"./UsersSelectors\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\nimport InputBoxWrapper from \"../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport FormSwitchWrapper from \"../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport PredefinedList from \"../Common/FormComponents/PredefinedList/PredefinedList\";\nimport { CreateGroupIcon } from \"../../../icons\";\n\ninterface IGroupProps {\n  open: boolean;\n  selectedGroup: any;\n  closeModalAndRefresh: any;\n  classes: any;\n  setModalErrorSnackMessage: typeof setModalErrorSnackMessage;\n}\n\ninterface MainGroupProps {\n  members: string[];\n  name: string;\n  status: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    buttonContainer: {\n      textAlign: \"right\",\n    },\n    userSelector: {\n      \"& .MuiPaper-root\": {\n        padding: 0,\n        marginBottom: 15,\n      },\n    },\n    ...formFieldStyles,\n    ...spacingUtils,\n    ...modalStyleUtils,\n  });\n\nconst AddGroup = ({\n  open,\n  selectedGroup,\n  closeModalAndRefresh,\n  classes,\n  setModalErrorSnackMessage,\n}: IGroupProps) => {\n  //Local States\n  const [groupName, setGroupName] = useState<string>(\"\");\n  const [groupEnabled, setGroupEnabled] = useState<boolean>(false);\n  const [saving, isSaving] = useState<boolean>(false);\n  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);\n  const [loadingGroup, isLoadingGroup] = useState<boolean>(false);\n  const [validGroup, setValidGroup] = useState<boolean>(false);\n\n  //Effects\n  useEffect(() => {\n    if (selectedGroup !== null) {\n      isLoadingGroup(true);\n    } else {\n      setGroupName(\"\");\n      setSelectedUsers([]);\n    }\n  }, [selectedGroup]);\n\n  useEffect(() => {\n    setValidGroup(groupName.trim() !== \"\");\n  }, [groupName, selectedUsers]);\n\n  useEffect(() => {\n    if (saving) {\n      const saveRecord = () => {\n        if (selectedGroup !== null) {\n          api\n            .invoke(\"PUT\", `/api/v1/group?name=${encodeURI(groupName)}`, {\n              group: groupName,\n              members: selectedUsers,\n              status: groupEnabled ? \"enabled\" : \"disabled\",\n            })\n            .then((res) => {\n              isSaving(false);\n              closeModalAndRefresh();\n            })\n            .catch((err: ErrorResponseHandler) => {\n              isSaving(false);\n              setModalErrorSnackMessage(err);\n            });\n        } else {\n          api\n            .invoke(\"POST\", \"/api/v1/groups\", {\n              group: groupName,\n              members: selectedUsers,\n            })\n            .then((res) => {\n              isSaving(false);\n              closeModalAndRefresh();\n            })\n            .catch((err: ErrorResponseHandler) => {\n              isSaving(false);\n              setModalErrorSnackMessage(err);\n            });\n        }\n      };\n      saveRecord();\n    }\n  }, [\n    saving,\n    groupName,\n    selectedUsers,\n    groupEnabled,\n    selectedGroup,\n    closeModalAndRefresh,\n    setModalErrorSnackMessage,\n  ]);\n\n  useEffect(() => {\n    if (selectedGroup && loadingGroup) {\n      const fetchGroupInfo = () => {\n        api\n          .invoke(\"GET\", `/api/v1/group?name=${encodeURI(selectedGroup)}`)\n          .then((res: MainGroupProps) => {\n            setGroupEnabled(res.status === \"enabled\");\n            setGroupName(res.name);\n            setSelectedUsers(res.members);\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setModalErrorSnackMessage(err);\n            isLoadingGroup(false);\n          });\n      };\n      fetchGroupInfo();\n    }\n  }, [loadingGroup, selectedGroup, setModalErrorSnackMessage]);\n\n  //Fetch Actions\n  const setSaving = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    isSaving(true);\n  };\n\n  const resetForm = () => {\n    if (selectedGroup === null) {\n      setGroupName(\"\");\n    }\n\n    setSelectedUsers([]);\n  };\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={closeModalAndRefresh}\n      title={selectedGroup !== null ? `Edit Group` : \"Create Group\"}\n      titleIcon={<CreateGroupIcon />}\n    >\n      {selectedGroup !== null && (\n        <div className={classes.floatingEnabled}>\n          <FormSwitchWrapper\n            indicatorLabels={[\"Enabled\", \"Disabled\"]}\n            checked={groupEnabled}\n            value={\"group_enabled\"}\n            id=\"group-status\"\n            name=\"group-status\"\n            onChange={(e) => {\n              setGroupEnabled(e.target.checked);\n            }}\n            switchOnly\n          />\n        </div>\n      )}\n      <form noValidate autoComplete=\"off\" onSubmit={setSaving}>\n        <Grid container>\n          <Grid item xs={12} className={classes.modalFormScrollable}>\n            {selectedGroup === null ? (\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"group-name\"\n                  name=\"group-name\"\n                  label=\"Group Name\"\n                  autoFocus={true}\n                  value={groupName}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setGroupName(e.target.value);\n                  }}\n                />\n              </Grid>\n            ) : (\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <PredefinedList label={\"Group Name\"} content={selectedGroup} />\n              </Grid>\n            )}\n            <Grid item xs={12} className={classes.userSelector}>\n              <UsersSelectors\n                selectedUsers={selectedUsers}\n                setSelectedUsers={setSelectedUsers}\n                editMode={selectedGroup !== null}\n              />\n            </Grid>\n          </Grid>\n          <Grid item xs={12} className={classes.buttonContainer}>\n            <Button\n              type=\"button\"\n              variant=\"outlined\"\n              color=\"primary\"\n              className={classes.spacerRight}\n              onClick={resetForm}\n            >\n              Clear\n            </Button>\n\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={saving || !validGroup}\n            >\n              Save\n            </Button>\n          </Grid>\n          {saving && (\n            <Grid item xs={12}>\n              <LinearProgress />\n            </Grid>\n          )}\n        </Grid>\n      </form>\n    </ModalWrapper>\n  );\n};\n\nconst mapDispatchToProps = {\n  setModalErrorSnackMessage,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default withStyles(styles)(connector(AddGroup));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { LinearProgress } from \"@mui/material\";\nimport get from \"lodash/get\";\nimport Paper from \"@mui/material/Paper\";\nimport Grid from \"@mui/material/Grid\";\nimport { UsersList } from \"../Users/types\";\nimport { usersSort } from \"../../../utils/sortFunctions\";\nimport {\n  actionsTray,\n  selectorsCommon,\n  tableStyles,\n} from \"../Common/FormComponents/common/styleLibrary\";\nimport { setModalErrorSnackMessage } from \"../../../actions\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport api from \"../../../common/api\";\nimport TableWrapper from \"../Common/TableWrapper/TableWrapper\";\nimport SearchBox from \"../Common/SearchBox\";\n\ninterface IGroupsProps {\n  classes: any;\n  selectedUsers: string[];\n  setSelectedUsers: any;\n  editMode?: boolean;\n  setModalErrorSnackMessage: typeof setModalErrorSnackMessage;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    paper: {\n      display: \"flex\",\n      overflow: \"auto\",\n      flexDirection: \"column\",\n      // paddingTop: 15,\n      boxShadow: \"none\",\n      border: 0,\n    },\n\n    tableBlock: {\n      ...tableStyles.tableBlock,\n    },\n    searchBox: {\n      flex: 1,\n    },\n    ...actionsTray,\n    actionsTitle: {\n      fontSize: 14,\n      alignSelf: \"center\",\n      minWidth: 160,\n      marginRight: 10,\n    },\n    noFound: {\n      textAlign: \"center\",\n      padding: theme.spacing(3),\n      border: \"1px solid #EAEAEA\",\n      fontSize: \".9rem\",\n    },\n    ...selectorsCommon,\n  });\n\nconst UsersSelectors = ({\n  classes,\n  selectedUsers,\n  setSelectedUsers,\n  editMode = false,\n  setModalErrorSnackMessage,\n}: IGroupsProps) => {\n  //Local States\n  const [records, setRecords] = useState<any[]>([]);\n  const [loading, isLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n\n  const fetchUsers = useCallback(() => {\n    api\n      .invoke(\"GET\", `/api/v1/users`)\n      .then((res: UsersList) => {\n        let users = get(res, \"users\", []);\n\n        if (!users) {\n          users = [];\n        }\n\n        setRecords(users.sort(usersSort));\n        isLoading(false);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setModalErrorSnackMessage(err);\n        isLoading(false);\n      });\n  }, [setModalErrorSnackMessage]);\n\n  //Effects\n  useEffect(() => {\n    isLoading(true);\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      fetchUsers();\n    }\n  }, [loading, fetchUsers]);\n\n  const selUsers = !selectedUsers ? [] : selectedUsers;\n\n  //Fetch Actions\n  const selectionChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = e.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: string[] = [...selUsers]; // We clone the selectedGroups array\n\n    if (checked) {\n      // If the user has checked this field we need to push this to selectedGroupsList\n      elements.push(value);\n    } else {\n      // User has unchecked this field, we need to remove it from the list\n      elements = elements.filter((element) => element !== value);\n    }\n    setSelectedUsers(elements);\n\n    return elements;\n  };\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.accessKey.includes(filter)\n  );\n\n  return (\n    <React.Fragment>\n      <Grid item xs={12}>\n        <Paper className={classes.paper}>\n          {loading && <LinearProgress />}\n          {records !== null && records.length > 0 ? (\n            <React.Fragment>\n              <Grid item xs={12} className={classes.actionsTray}>\n                <label className={classes.actionsTitle}>\n                  {editMode ? \"Edit Members\" : \"Assign Users\"}\n                </label>\n                <div className={classes.searchBox}>\n                  <SearchBox\n                    placeholder=\"Filter Users\"\n                    adornmentPosition=\"end\"\n                    onChange={setFilter}\n                    value={filter}\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} className={classes.tableBlock}>\n                <TableWrapper\n                  columns={[{ label: \"Access Key\", elementKey: \"accessKey\" }]}\n                  onSelect={selectionChanged}\n                  selectedItems={selUsers}\n                  isLoading={loading}\n                  records={filteredRecords}\n                  entityName=\"Users\"\n                  idField=\"accessKey\"\n                  customPaperHeight={classes.multiSelectTable}\n                />\n              </Grid>\n            </React.Fragment>\n          ) : (\n            <div className={classes.noFound}>No Users to display</div>\n          )}\n        </Paper>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nconst mapDispatchToProps = {\n  setModalErrorSnackMessage,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default withStyles(styles)(connector(UsersSelectors));\n"],"names":["withStyles","theme","createStyles","predefinedList","classes","label","content","multiLine","Fragment","className","prefinedContainer","item","xs","predefinedTitle","innerContentMultiline","innerContent","connector","connect","state","modalSnackMessage","system","modalSnackBar","setModalSnackMessage","deleteDialogStyles","padding","paddingBottom","customDialogSize","width","maxWidth","snackBarCommon","onClose","modalOpen","title","children","wideLimit","noContentPadding","titleIcon","useState","openSnackbar","setOpenSnackbar","useEffect","message","type","customSize","paper","fullWidth","detailedErrorMsg","length","open","scroll","event","reason","root","titleText","closeContainer","id","closeButton","onClick","disableRipple","size","isModal","snackBarModal","ContentProps","snackBar","errorSnackBar","autoHideDuration","mapDispatchToProps","setModalErrorSnackMessage","buttonContainer","textAlign","userSelector","marginBottom","formFieldStyles","spacingUtils","modalStyleUtils","selectedGroup","closeModalAndRefresh","groupName","setGroupName","groupEnabled","setGroupEnabled","saving","isSaving","selectedUsers","setSelectedUsers","loadingGroup","isLoadingGroup","validGroup","setValidGroup","trim","api","encodeURI","group","members","status","then","res","catch","err","name","floatingEnabled","indicatorLabels","checked","value","onChange","e","target","switchOnly","noValidate","autoComplete","onSubmit","preventDefault","container","modalFormScrollable","formFieldRow","autoFocus","editMode","variant","color","spacerRight","disabled","display","overflow","flexDirection","boxShadow","border","tableBlock","tableStyles","searchBox","flex","actionsTray","actionsTitle","fontSize","alignSelf","minWidth","marginRight","noFound","spacing","selectorsCommon","records","setRecords","loading","isLoading","filter","setFilter","fetchUsers","useCallback","users","get","sort","usersSort","selUsers","filteredRecords","elementItem","accessKey","includes","placeholder","adornmentPosition","columns","elementKey","onSelect","targetD","elements","push","element","selectedItems","entityName","idField","customPaperHeight","multiSelectTable"],"sourceRoot":""}