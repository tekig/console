{"version":3,"file":"static/js/8391.4ea39138.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/EnableBucketEncryption.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Grid from \"@mui/material/Grid\";\nimport { Button, LinearProgress, SelectChangeEvent } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { setModalErrorSnackMessage } from \"../../../../actions\";\nimport {\n  formFieldStyles,\n  modalStyleUtils,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport { BucketEncryptionInfo } from \"../types\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport api from \"../../../../common/api\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport SelectWrapper from \"../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport { BucketEncryptionIcon } from \"../../../../icons\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...modalStyleUtils,\n    ...formFieldStyles,\n  });\n\ninterface IEnableBucketEncryptionProps {\n  classes: any;\n  open: boolean;\n  encryptionEnabled: boolean;\n  encryptionCfg: BucketEncryptionInfo | null;\n  selectedBucket: string;\n  closeModalAndRefresh: () => void;\n  setModalErrorSnackMessage: typeof setModalErrorSnackMessage;\n}\n\nconst EnableBucketEncryption = ({\n  classes,\n  open,\n  encryptionCfg,\n  selectedBucket,\n  closeModalAndRefresh,\n  setModalErrorSnackMessage,\n}: IEnableBucketEncryptionProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [kmsKeyID, setKmsKeyID] = useState<string>(\"\");\n  const [encryptionType, setEncryptionType] = useState<string>(\"disabled\");\n\n  useEffect(() => {\n    if (encryptionCfg) {\n      if (encryptionCfg.algorithm === \"AES256\") {\n        setEncryptionType(\"sse-s3\");\n      } else {\n        setEncryptionType(\"sse-kms\");\n        setKmsKeyID(encryptionCfg.kmsMasterKeyID);\n      }\n    }\n  }, [encryptionCfg]);\n\n  const enableBucketEncryption = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (loading) {\n      return;\n    }\n    if (encryptionType === \"disabled\") {\n      api\n        .invoke(\"POST\", `/api/v1/buckets/${selectedBucket}/encryption/disable`)\n        .then(() => {\n          setLoading(false);\n          closeModalAndRefresh();\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setLoading(false);\n          setModalErrorSnackMessage(err);\n        });\n    } else {\n      api\n        .invoke(\"POST\", `/api/v1/buckets/${selectedBucket}/encryption/enable`, {\n          encType: encryptionType,\n          kmsKeyID: kmsKeyID,\n        })\n        .then(() => {\n          setLoading(false);\n          closeModalAndRefresh();\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setLoading(false);\n          setModalErrorSnackMessage(err);\n        });\n    }\n  };\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={() => {\n        closeModalAndRefresh();\n      }}\n      title=\"Enable Bucket Encryption\"\n      titleIcon={<BucketEncryptionIcon />}\n    >\n      <form\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n          enableBucketEncryption(e);\n        }}\n      >\n        <Grid container>\n          <Grid item xs={12} className={classes.modalFormScrollable}>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <SelectWrapper\n                onChange={(e: SelectChangeEvent<string>) => {\n                  setEncryptionType(e.target.value as string);\n                }}\n                id=\"select-encryption-type\"\n                name=\"select-encryption-type\"\n                label={\"Encryption Type\"}\n                value={encryptionType}\n                options={[\n                  {\n                    label: \"Disabled\",\n                    value: \"disabled\",\n                  },\n                  {\n                    label: \"SSE-S3\",\n                    value: \"sse-s3\",\n                  },\n                  {\n                    label: \"SSE-KMS\",\n                    value: \"sse-kms\",\n                  },\n                ]}\n              />\n            </Grid>\n\n            {encryptionType === \"sse-kms\" && (\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"kms-key-id\"\n                  name=\"kms-key-id\"\n                  label=\"KMS Key ID\"\n                  value={kmsKeyID}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setKmsKeyID(e.target.value);\n                  }}\n                />\n              </Grid>\n            )}\n          </Grid>\n          <Grid item xs={12} className={classes.modalButtonBar}>\n            <Button\n              type=\"submit\"\n              variant=\"outlined\"\n              color=\"primary\"\n              onClick={() => {\n                closeModalAndRefresh();\n              }}\n              disabled={loading}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={loading}\n            >\n              Save\n            </Button>\n          </Grid>\n          {loading && (\n            <Grid item xs={12}>\n              <LinearProgress />\n            </Grid>\n          )}\n        </Grid>\n      </form>\n    </ModalWrapper>\n  );\n};\n\nconst connector = connect(null, {\n  setModalErrorSnackMessage,\n});\n\nexport default withStyles(styles)(connector(EnableBucketEncryption));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport { Dialog, DialogContent, DialogTitle } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  deleteDialogStyles,\n  snackBarCommon,\n} from \"../FormComponents/common/styleLibrary\";\nimport { AppState } from \"../../../../store\";\nimport { snackBarMessage } from \"../../../../types\";\nimport { setModalSnackMessage } from \"../../../../actions\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport MainError from \"../MainError/MainError\";\n\ninterface IModalProps {\n  classes: any;\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  modalSnackMessage?: snackBarMessage;\n  noContentPadding?: boolean;\n  setModalSnackMessage: typeof setModalSnackMessage;\n  titleIcon?: React.ReactNode;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n    content: {\n      padding: 25,\n      paddingBottom: 0,\n    },\n    customDialogSize: {\n      width: \"100%\",\n      maxWidth: 765,\n    },\n    ...snackBarCommon,\n  });\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  classes,\n  wideLimit = true,\n  modalSnackMessage,\n  noContentPadding,\n  setModalSnackMessage,\n  titleIcon = null,\n}: IModalProps) => {\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  useEffect(() => {\n    setModalSnackMessage(\"\");\n  }, [setModalSnackMessage]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    setModalSnackMessage(\"\");\n  };\n\n  const customSize = wideLimit\n    ? {\n        classes: {\n          paper: classes.customDialogSize,\n        },\n      }\n    : { maxWidth: \"lg\" as const, fullWidth: true };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (\n      modalSnackMessage.detailedErrorMsg === \"\" ||\n      modalSnackMessage.detailedErrorMsg.length < 5\n    ) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <Dialog\n      open={modalOpen}\n      classes={classes}\n      {...customSize}\n      scroll={\"paper\"}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n    >\n      <DialogTitle className={classes.title}>\n        <div className={classes.titleText}>\n          {titleIcon} {title}\n        </div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            id={\"close\"}\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <MainError isModal={true} />\n      <Snackbar\n        open={openSnackbar}\n        className={classes.snackBarModal}\n        onClose={() => {\n          closeSnackBar();\n        }}\n        message={message}\n        ContentProps={{\n          className: `${classes.snackBar} ${\n            modalSnackMessage && modalSnackMessage.type === \"error\"\n              ? classes.errorSnackBar\n              : \"\"\n          }`,\n        }}\n        autoHideDuration={\n          modalSnackMessage && modalSnackMessage.type === \"error\" ? 10000 : 5000\n        }\n      />\n      <DialogContent className={noContentPadding ? \"\" : classes.content}>\n        {children}\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  modalSnackMessage: state.system.modalSnackBar,\n});\n\nconst connector = connect(mapState, {\n  setModalSnackMessage,\n});\n\nexport default withStyles(styles)(connector(ModalWrapper));\n"],"names":["connector","connect","setModalErrorSnackMessage","withStyles","theme","createStyles","modalStyleUtils","formFieldStyles","classes","open","encryptionCfg","selectedBucket","closeModalAndRefresh","useState","loading","setLoading","kmsKeyID","setKmsKeyID","encryptionType","setEncryptionType","useEffect","algorithm","kmsMasterKeyID","modalOpen","onClose","title","titleIcon","noValidate","autoComplete","onSubmit","e","preventDefault","api","then","catch","err","encType","container","item","xs","className","modalFormScrollable","formFieldRow","onChange","target","value","id","name","label","options","modalButtonBar","type","variant","color","onClick","disabled","state","modalSnackMessage","system","modalSnackBar","setModalSnackMessage","deleteDialogStyles","content","padding","paddingBottom","customDialogSize","width","maxWidth","snackBarCommon","children","wideLimit","noContentPadding","openSnackbar","setOpenSnackbar","message","customSize","paper","fullWidth","detailedErrorMsg","length","scroll","event","reason","root","titleText","closeContainer","closeButton","disableRipple","size","isModal","snackBarModal","ContentProps","snackBar","errorSnackBar","autoHideDuration"],"sourceRoot":""}