{"version":3,"file":"static/js/8990.57055bc2.chunk.js","mappings":"mQAkCMA,GAAYC,EAAAA,EAAAA,KAJD,SAACC,GAAD,MAAsB,CACrCC,QAASD,EAAME,QAAQD,WAGW,CAAEE,qBAAAA,EAAAA,KAiDtC,WAAeC,EAAAA,EAAAA,IAxCA,SAACC,GAAD,OACbC,EAAAA,EAAAA,IAAa,UACRC,EAAAA,OAsCP,CAAkCT,GAnCT,SAAC,GAKA,IAJxBU,EAIuB,EAJvBA,QACAC,EAGuB,EAHvBA,UACAC,EAEuB,EAFvBA,OACAC,EACuB,EADvBA,SAKA,GAAyCC,EAAAA,EAAAA,IAHpB,kBAAMJ,OACR,SAACK,GAAD,OAA+BV,EAAAA,EAAAA,IAAqBU,MAEvE,eAAOC,EAAP,KAAsBC,EAAtB,KAQA,OACE,SAAC,IAAD,CACEC,MAAK,qBACLC,YAAa,SACbC,OAAQT,EACRU,UAAWL,EACXM,UAZoB,WACtBL,EAAgB,SAAD,yBAA6BL,EAA7B,iBAAoD,CACjEW,OAAQV,KAWRW,WAAW,SAAC,KAAD,IACXd,QAASA,EACTe,qBACE,SAAC,IAAD,uE,0DC5CR,IAvBe,SACbC,EACAC,GAEA,OAAkCC,EAAAA,EAAAA,WAAkB,GAApD,eAAOP,EAAP,KAAkBQ,EAAlB,KAgBA,MAAO,CAACR,EAdQ,SAACS,EAAgBC,EAAaC,GAC5CH,GAAa,GACbI,EAAAA,EAAAA,OACUH,EAAQC,EAAKC,GACpBE,MAAK,SAACC,GACLN,GAAa,GACbH,EAAUS,MAEXC,OAAM,SAACrB,GACNc,GAAa,GACbF,EAAQZ","sources":["screens/Console/Buckets/BucketDetails/DeleteAccessRule.tsx","screens/Console/Common/Hooks/useApi.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { DialogContentText } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { modalBasic } from \"../../Common/FormComponents/common/styleLibrary\";\nimport { connect } from \"react-redux\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport { AppState } from \"../../../../store\";\nimport useApi from \"../../Common/Hooks/useApi\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport { ConfirmDeleteIcon } from \"../../../../icons\";\n\nconst mapState = (state: AppState) => ({\n  session: state.console.session,\n});\n\nconst connector = connect(mapState, { setErrorSnackMessage });\n\ninterface IDeleteAccessRule {\n  modalOpen: boolean;\n  onClose: () => any;\n  bucket: string;\n  toDelete: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...modalBasic,\n  });\n\nconst DeleteAccessRule = ({\n  onClose,\n  modalOpen,\n  bucket,\n  toDelete,\n}: IDeleteAccessRule) => {\n  const onDelSuccess = () => onClose();\n  const onDelError = (err: ErrorResponseHandler) => setErrorSnackMessage(err);\n\n  const [deleteLoading, invokeDeleteApi] = useApi(onDelSuccess, onDelError);\n\n  const onConfirmDelete = () => {\n    invokeDeleteApi(\"DELETE\", `/api/v1/bucket/${bucket}/access-rules`, {\n      prefix: toDelete,\n    });\n  };\n\n  return (\n    <ConfirmDialog\n      title={`Delete Access Rule`}\n      confirmText={\"Delete\"}\n      isOpen={modalOpen}\n      isLoading={deleteLoading}\n      onConfirm={onConfirmDelete}\n      titleIcon={<ConfirmDeleteIcon />}\n      onClose={onClose}\n      confirmationContent={\n        <DialogContentText>\n          Are you sure you want to delete this access rule?\n        </DialogContentText>\n      }\n    />\n  );\n};\n\nexport default withStyles(styles)(connector(DeleteAccessRule));\n","import { useState } from \"react\";\nimport api from \"../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\n\ntype NoReturnFunction = (param?: any) => void;\ntype ApiMethodToInvoke = (method: string, url: string, data?: any) => void;\ntype IsApiInProgress = boolean;\n\nconst useApi = (\n  onSuccess: NoReturnFunction,\n  onError: NoReturnFunction\n): [IsApiInProgress, ApiMethodToInvoke] => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const callApi = (method: string, url: string, data?: any) => {\n    setIsLoading(true);\n    api\n      .invoke(method, url, data)\n      .then((res: any) => {\n        setIsLoading(false);\n        onSuccess(res);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setIsLoading(false);\n        onError(err);\n      });\n  };\n\n  return [isLoading, callApi];\n};\n\nexport default useApi;\n"],"names":["connector","connect","state","session","console","setErrorSnackMessage","withStyles","theme","createStyles","modalBasic","onClose","modalOpen","bucket","toDelete","useApi","err","deleteLoading","invokeDeleteApi","title","confirmText","isOpen","isLoading","onConfirm","prefix","titleIcon","confirmationContent","onSuccess","onError","useState","setIsLoading","method","url","data","api","then","res","catch"],"sourceRoot":""}