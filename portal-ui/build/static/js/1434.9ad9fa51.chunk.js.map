{"version":3,"file":"static/js/1434.9ad9fa51.chunk.js","mappings":"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","sources":["common/HelpBox.tsx","screens/Console/Common/CredentialsPrompt/CredentialItem.tsx","screens/Console/Common/CredentialsPrompt/CredentialsPrompt.tsx","screens/Console/Common/FormComponents/FileSelector/FileSelector.tsx","screens/Console/Common/FormComponents/FileSelector/utils.ts","screens/Console/Common/ModalWrapper/ModalWrapper.tsx","screens/Console/Tenants/AddTenant/Steps/Configure.tsx","screens/Console/Tenants/AddTenant/Steps/IdentityProvider.tsx","screens/Console/Tenants/AddTenant/Steps/Security.tsx","screens/Console/Tenants/AddTenant/Steps/Encryption.tsx","screens/Console/Tenants/AddTenant/Steps/Affinity.tsx","screens/Console/Tenants/AddTenant/Steps/Images.tsx","screens/Console/Tenants/AddTenant/Steps/helpers/AddNamespaceModal.tsx","screens/Console/Tenants/AddTenant/Steps/SizePreview.tsx","screens/Console/Tenants/AddTenant/Steps/TenantResources/NameTenantMain.tsx","screens/Console/Tenants/AddTenant/Steps/TenantResources/TenantResources.tsx","screens/Console/Tenants/AddTenant/Steps/ConfigLogSearch.tsx","screens/Console/Tenants/AddTenant/Steps/ConfigPrometheus.tsx","screens/Console/Tenants/AddTenant/AddTenant.tsx","screens/shared/ErrorBlock.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport Grid from \"@mui/material/Grid\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      border: \"1px solid #E2E2E2\",\n      borderRadius: 2,\n      backgroundColor: \"#FBFAFA\",\n      paddingLeft: 25,\n      paddingTop: 31,\n      paddingBottom: 21,\n      paddingRight: 30,\n    },\n    leftItems: {\n      fontSize: 16,\n      fontWeight: \"bold\",\n      marginBottom: 15,\n      display: \"flex\",\n      alignItems: \"center\",\n      \"& .min-icon\": {\n        marginRight: 15,\n        height: 28,\n        width: 38,\n      },\n    },\n    helpText: {\n      fontSize: 16,\n      paddingLeft: 5,\n    },\n  });\n\ninterface IHelpBox {\n  classes: any;\n  iconComponent: any;\n  title: string;\n  help: any;\n}\n\nconst HelpBox = ({ classes, iconComponent, title, help }: IHelpBox) => {\n  return (\n    <div className={classes.root}>\n      <Grid container>\n        <Grid item xs={12} className={classes.leftItems}>\n          {iconComponent}\n          {title}\n        </Grid>\n        <Grid item xs={12} className={classes.helpText}>\n          {help}\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(HelpBox);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { InputAdornment, OutlinedInput } from \"@mui/material\";\nimport BoxIconButton from \"../BoxIconButton/BoxIconButton\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport { CopyIcon } from \"../../../../icons\";\nimport { fieldBasic } from \"../FormComponents/common/styleLibrary\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    container: {\n      display: \"flex\",\n      flexFlow: \"column\",\n      padding: \"20px 0 8px 0\",\n    },\n    inputWithCopy: {\n      \"& .MuiInputBase-root \": {\n        width: \"100%\",\n        background: \"#FBFAFA\",\n        \"& .MuiInputBase-input\": {\n          height: \".8rem\",\n        },\n        \"& .MuiInputAdornment-positionEnd\": {\n          marginRight: \".5rem\",\n          \"& .MuiButtonBase-root\": {\n            height: \"2rem\",\n          },\n        },\n      },\n      \"& .MuiButtonBase-root .min-icon\": {\n        width: \".8rem\",\n        height: \".8rem\",\n      },\n    },\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      fontSize: \".8rem\",\n    },\n  });\n\nconst CredentialItem = ({\n  label = \"\",\n  value = \"\",\n  classes = {},\n}: {\n  label: string;\n  value: string;\n  classes: any;\n}) => {\n  return (\n    <div className={classes.container}>\n      <div className={classes.inputLabel}>{label}:</div>\n      <div className={classes.inputWithCopy}>\n        <OutlinedInput\n          value={value}\n          readOnly\n          endAdornment={\n            <InputAdornment position=\"end\">\n              <CopyToClipboard text={value}>\n                <BoxIconButton\n                  aria-label=\"copy\"\n                  tooltip={\"Copy\"}\n                  onClick={() => {}}\n                  onMouseDown={() => {}}\n                  edge=\"end\"\n                >\n                  <CopyIcon />\n                </BoxIconButton>\n              </CopyToClipboard>\n            </InputAdornment>\n          }\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(CredentialItem);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport get from \"lodash/get\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { NewServiceAccount } from \"./types\";\nimport ModalWrapper from \"../ModalWrapper/ModalWrapper\";\nimport Grid from \"@mui/material/Grid\";\nimport CredentialItem from \"./CredentialItem\";\nimport WarnIcon from \"../../../../icons/WarnIcon\";\nimport { DownloadIcon, ServiceAccountCredentialsIcon } from \"../../../../icons\";\n\nimport RBIconButton from \"../../Buckets/BucketDetails/SummaryItems/RBIconButton\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    warningBlock: {\n      color: \"red\",\n      fontSize: \".85rem\",\n      margin: \".5rem 0 .5rem 0\",\n      display: \"flex\",\n      alignItems: \"center\",\n      \"& svg \": {\n        marginRight: \".3rem\",\n        height: 16,\n        width: 16,\n      },\n    },\n    credentialTitle: {\n      padding: \".8rem 0 0 0\",\n      fontWeight: 600,\n      fontSize: \".9rem\",\n    },\n    buttonContainer: {\n      textAlign: \"right\",\n      marginTop: \"1rem\",\n    },\n    credentialsPanel: {\n      overflowY: \"auto\",\n      maxHeight: 350,\n    },\n    promptTitle: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    buttonSpacer: {\n      marginRight: \".9rem\",\n    },\n    promptIcon: {\n      marginRight: \".1rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      height: \"2rem\",\n      width: \"2rem\",\n    },\n  });\n\ninterface ICredentialsPromptProps {\n  classes: any;\n  newServiceAccount: NewServiceAccount | null;\n  open: boolean;\n  entity: string;\n  closeModal: () => void;\n}\n\nconst download = (filename: string, text: string) => {\n  let element = document.createElement(\"a\");\n  element.setAttribute(\n    \"href\",\n    \"data:text/plain;charset=utf-8,\" + encodeURIComponent(text)\n  );\n  element.setAttribute(\"download\", filename);\n\n  element.style.display = \"none\";\n  document.body.appendChild(element);\n\n  element.click();\n  document.body.removeChild(element);\n};\n\nconst CredentialsPrompt = ({\n  classes,\n  newServiceAccount,\n  open,\n  closeModal,\n  entity,\n}: ICredentialsPromptProps) => {\n  if (!newServiceAccount) {\n    return null;\n  }\n  const consoleCreds = get(newServiceAccount, \"console\", null);\n  const idp = get(newServiceAccount, \"idp\", false);\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={() => {\n        closeModal();\n      }}\n      title={\n        <div className={classes.promptTitle}>\n          <div>New {entity} Created</div>\n        </div>\n      }\n      titleIcon={<ServiceAccountCredentialsIcon />}\n    >\n      <Grid container>\n        <Grid item xs={12} className={classes.formScrollable}>\n          A new {entity} has been created with the following details:\n          {!idp && consoleCreds && (\n            <React.Fragment>\n              <Grid item xs={12} className={classes.credentialsPanel}>\n                <div className={classes.credentialTitle}>\n                  Console Credentials\n                </div>\n                {Array.isArray(consoleCreds) &&\n                  consoleCreds.map((credentialsPair, index) => {\n                    return (\n                      <>\n                        <CredentialItem\n                          label=\"Access Key\"\n                          value={credentialsPair.accessKey}\n                        />\n                        <CredentialItem\n                          label=\"Secret Key\"\n                          value={credentialsPair.secretKey}\n                        />\n                      </>\n                    );\n                  })}\n                {!Array.isArray(consoleCreds) && (\n                  <>\n                    <CredentialItem\n                      label=\"Access Key\"\n                      value={consoleCreds.accessKey}\n                    />\n                    <CredentialItem\n                      label=\"Secret Key\"\n                      value={consoleCreds.secretKey}\n                    />\n                  </>\n                )}\n              </Grid>\n            </React.Fragment>\n          )}\n          {idp ? (\n            <div className={classes.warningBlock}>\n              Please Login via the configured external identity provider.\n            </div>\n          ) : (\n            <div className={classes.warningBlock}>\n              <WarnIcon />\n              <span>\n                Write these down, as this is the only time the secret will be\n                displayed.\n              </span>\n            </div>\n          )}\n        </Grid>\n        <Grid item xs={12} className={classes.buttonContainer}>\n          {!idp && (\n            <>\n              <RBIconButton\n                id={\"download-button\"}\n                tooltip={\n                  \"Download credentials in a JSON file formatted for import using mc alias import. This will only include the default login credentials.\"\n                }\n                text={\"Download for import\"}\n                className={classes.buttonSpacer}\n                onClick={() => {\n                  let consoleExtras = {};\n\n                  if (consoleCreds) {\n                    if (!Array.isArray(consoleCreds)) {\n                      consoleExtras = {\n                        url: consoleCreds.url,\n                        accessKey: consoleCreds.accessKey,\n                        secretKey: consoleCreds.secretKey,\n                        api: \"s3v4\",\n                        path: \"auto\",\n                      };\n                    } else {\n                      const cCreds = consoleCreds.map((itemMap) => {\n                        return {\n                          url: itemMap.url,\n                          accessKey: itemMap.accessKey,\n                          secretKey: itemMap.secretKey,\n                          api: \"s3v4\",\n                          path: \"auto\",\n                        };\n                      });\n                      consoleExtras = cCreds[0];\n                    }\n                  }\n\n                  download(\n                    \"credentials.json\",\n                    JSON.stringify({\n                      ...consoleExtras,\n                    })\n                  );\n                }}\n                icon={<DownloadIcon />}\n                variant=\"contained\"\n                color=\"primary\"\n              />\n\n              {Array.isArray(consoleCreds) && consoleCreds.length > 1 && (\n                <RBIconButton\n                  id={\"download-all-button\"}\n                  tooltip={\n                    \"Download all access credentials to a JSON file. NOTE: This file is not formatted for import using mc alias import. If you plan to import this alias from the file, please use the Download for Import button. \"\n                  }\n                  text={\"Download all access credentials\"}\n                  className={classes.buttonSpacer}\n                  onClick={() => {\n                    let allCredentials = {};\n                    if (consoleCreds) {\n                      const cCreds = consoleCreds.map((itemMap) => {\n                        return {\n                          accessKey: itemMap.accessKey,\n                          secretKey: itemMap.secretKey,\n                        };\n                      });\n                      allCredentials = cCreds;\n                    }\n                    download(\n                      \"all_credentials.json\",\n                      JSON.stringify({\n                        ...allCredentials,\n                      })\n                    );\n                  }}\n                  icon={<DownloadIcon />}\n                  variant=\"contained\"\n                  color=\"primary\"\n                />\n              )}\n            </>\n          )}\n        </Grid>\n      </Grid>\n    </ModalWrapper>\n  );\n};\n\nexport default withStyles(styles)(CredentialsPrompt);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport get from \"lodash/get\";\nimport { Grid, InputLabel, Tooltip } from \"@mui/material\";\nimport IconButton from \"@mui/material/IconButton\";\nimport AttachFileIcon from \"@mui/icons-material/AttachFile\";\nimport CancelIcon from \"@mui/icons-material/Cancel\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  fieldBasic,\n  fileInputStyles,\n  tooltipHelper,\n} from \"../common/styleLibrary\";\nimport { fileProcess } from \"./utils\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\nimport ErrorBlock from \"../../../../shared/ErrorBlock\";\n\ninterface InputBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: string, i: string) => void;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  required?: boolean;\n  error?: string;\n  accept?: string;\n  value?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    valueString: {\n      maxWidth: 350,\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      marginTop: 2,\n    },\n    fileInputField: {\n      margin: \"13px 0\",\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    ...fileInputStyles,\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      fontWeight: \"normal\",\n    },\n    textBoxContainer: {\n      ...fieldBasic.textBoxContainer,\n      maxWidth: \"100%\",\n      border: \"1px solid #eaeaea\",\n      paddingLeft: \"15px\",\n    },\n  });\n\nconst FileSelector = ({\n  label,\n  classes,\n  onChange,\n  id,\n  name,\n  disabled = false,\n  tooltip = \"\",\n  required,\n  error = \"\",\n  accept = \"\",\n  value = \"\",\n}: InputBoxProps) => {\n  const [showFileSelector, setShowSelector] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Grid\n        item\n        xs={12}\n        className={`${classes.fileInputField} ${classes.fieldBottom} ${\n          classes.fieldContainer\n        } ${error !== \"\" ? classes.errorInField : \"\"}`}\n      >\n        {label !== \"\" && (\n          <InputLabel\n            htmlFor={id}\n            className={`${error !== \"\" ? classes.fieldLabelError : \"\"} ${\n              classes.inputLabel\n            }`}\n          >\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        {showFileSelector || value === \"\" ? (\n          <div className={classes.textBoxContainer}>\n            <input\n              type=\"file\"\n              name={name}\n              onChange={(e) => {\n                const fileName = get(e, \"target.files[0].name\", \"\");\n                fileProcess(e, (data: any) => {\n                  onChange(data, fileName);\n                });\n              }}\n              accept={accept}\n              required={required}\n              disabled={disabled}\n              className={classes.fileInputField}\n            />\n\n            {value !== \"\" && (\n              <IconButton\n                color=\"primary\"\n                aria-label=\"upload picture\"\n                component=\"span\"\n                onClick={() => {\n                  setShowSelector(false);\n                }}\n                disableRipple={false}\n                disableFocusRipple={false}\n                size=\"small\"\n              >\n                <CancelIcon />\n              </IconButton>\n            )}\n\n            {error !== \"\" && <ErrorBlock errorMessage={error} />}\n          </div>\n        ) : (\n          <div className={classes.fileReselect}>\n            <div className={classes.valueString}>{value}</div>\n            <IconButton\n              color=\"primary\"\n              aria-label=\"upload picture\"\n              component=\"span\"\n              onClick={() => {\n                setShowSelector(true);\n              }}\n              disableRipple={false}\n              disableFocusRipple={false}\n              size=\"small\"\n            >\n              <AttachFileIcon />\n            </IconButton>\n          </div>\n        )}\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(FileSelector);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nexport const fileProcess = (evt: any, callback: any) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n\n  reader.onload = () => {\n    // reader.readAsDataURL(file) output will be something like: data:application/x-x509-ca-cert;base64,LS0tLS1CRUdJTiBDRVJUSU\n    // we care only about the actual base64 part (everything after \"data:application/x-x509-ca-cert;base64,\")\n    const fileBase64 = reader.result;\n    if (fileBase64) {\n      const fileArray = fileBase64.toString().split(\"base64,\");\n\n      if (fileArray.length === 2) {\n        callback(fileArray[1]);\n      }\n    }\n  };\n};\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport { Dialog, DialogContent, DialogTitle } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  deleteDialogStyles,\n  snackBarCommon,\n} from \"../FormComponents/common/styleLibrary\";\nimport { AppState } from \"../../../../store\";\nimport { snackBarMessage } from \"../../../../types\";\nimport { setModalSnackMessage } from \"../../../../actions\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport MainError from \"../MainError/MainError\";\n\ninterface IModalProps {\n  classes: any;\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  modalSnackMessage?: snackBarMessage;\n  noContentPadding?: boolean;\n  setModalSnackMessage: typeof setModalSnackMessage;\n  titleIcon?: React.ReactNode;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n    content: {\n      padding: 25,\n      paddingBottom: 0,\n    },\n    customDialogSize: {\n      width: \"100%\",\n      maxWidth: 765,\n    },\n    ...snackBarCommon,\n  });\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  classes,\n  wideLimit = true,\n  modalSnackMessage,\n  noContentPadding,\n  setModalSnackMessage,\n  titleIcon = null,\n}: IModalProps) => {\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  useEffect(() => {\n    setModalSnackMessage(\"\");\n  }, [setModalSnackMessage]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    setModalSnackMessage(\"\");\n  };\n\n  const customSize = wideLimit\n    ? {\n        classes: {\n          paper: classes.customDialogSize,\n        },\n      }\n    : { maxWidth: \"lg\" as const, fullWidth: true };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (\n      modalSnackMessage.detailedErrorMsg === \"\" ||\n      modalSnackMessage.detailedErrorMsg.length < 5\n    ) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <Dialog\n      open={modalOpen}\n      classes={classes}\n      {...customSize}\n      scroll={\"paper\"}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n    >\n      <DialogTitle className={classes.title}>\n        <div className={classes.titleText}>\n          {titleIcon} {title}\n        </div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            id={\"close\"}\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <MainError isModal={true} />\n      <Snackbar\n        open={openSnackbar}\n        className={classes.snackBarModal}\n        onClose={() => {\n          closeSnackBar();\n        }}\n        message={message}\n        ContentProps={{\n          className: `${classes.snackBar} ${\n            modalSnackMessage && modalSnackMessage.type === \"error\"\n              ? classes.errorSnackBar\n              : \"\"\n          }`,\n        }}\n        autoHideDuration={\n          modalSnackMessage && modalSnackMessage.type === \"error\" ? 10000 : 5000\n        }\n      />\n      <DialogContent className={noContentPadding ? \"\" : classes.content}>\n        {children}\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  modalSnackMessage: state.system.modalSnackBar,\n});\n\nconst connector = connect(mapState, {\n  setModalSnackMessage,\n});\n\nexport default withStyles(styles)(connector(ModalWrapper));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, Paper } from \"@mui/material\";\nimport {\n  createTenantCommon,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { ISecurityContext } from \"../../types\";\n\ninterface IConfigureProps {\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  classes: any;\n  exposeMinIO: boolean;\n  exposeConsole: boolean;\n  tenantCustom: boolean;\n  tenantSecurityContext: ISecurityContext;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    configSectionItem: {\n      marginRight: 15,\n\n      \"& .multiContainer\": {\n        border: \"1px solid red\",\n      },\n    },\n    tenantCustomizationFields: {\n      marginLeft: 30, // 2nd Level(15+15)\n      width: \"88%\",\n      margin: \"auto\",\n    },\n    containerItem: {\n      marginRight: 15,\n    },\n    fieldGroup: {\n      ...createTenantCommon.fieldGroup,\n      paddingTop: 15,\n      marginBottom: 25,\n    },\n    responsiveSectionItem: {\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n        alignItems: \"flex-start\",\n\n        \"& div > div\": {\n          marginBottom: 5,\n          marginRight: 0,\n        },\n      },\n    },\n\n    fieldSpaceTop: {\n      marginTop: 15,\n    },\n\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst Configure = ({\n  classes,\n  exposeMinIO,\n  exposeConsole,\n  tenantCustom,\n  updateAddField,\n  isPageValid,\n  tenantSecurityContext,\n}: IConfigureProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"configure\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n    if (tenantCustom) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"tenant_securityContext_runAsUser\",\n          required: true,\n          value: tenantSecurityContext.runAsUser,\n          customValidation:\n            tenantSecurityContext.runAsUser === \"\" ||\n            parseInt(tenantSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"tenant_securityContext_runAsGroup\",\n          required: true,\n          value: tenantSecurityContext.runAsGroup,\n          customValidation:\n            tenantSecurityContext.runAsGroup === \"\" ||\n            parseInt(tenantSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"tenant_securityContext_fsGroup\",\n          required: true,\n          value: tenantSecurityContext.fsGroup,\n          customValidation:\n            tenantSecurityContext.fsGroup === \"\" ||\n            parseInt(tenantSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    isPageValid(\"configure\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [isPageValid, tenantCustom, tenantSecurityContext]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Configure</h3>\n        <span className={classes.descriptionText}>\n          Basic configurations for tenant management\n        </span>\n      </div>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Services</h3>\n        <span className={classes.descriptionText}>\n          Whether the tenant's services should request an external IP via\n          LoadBalancer service type.\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"expose_minio\"\n          id=\"expose_minio\"\n          name=\"expose_minio\"\n          checked={exposeMinIO}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"exposeMinIO\", checked);\n          }}\n          label={\"Expose MiniO Service\"}\n        />\n      </Grid>\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"expose_console\"\n          id=\"expose_console\"\n          name=\"expose_console\"\n          checked={exposeConsole}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"exposeConsole\", checked);\n          }}\n          label={\"Expose Console Service\"}\n        />\n      </Grid>\n\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"tenantConfig\"\n          id=\"tenant_configuration\"\n          name=\"tenant_configuration\"\n          checked={tenantCustom}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"tenantCustom\", checked);\n          }}\n          label={\"Security Context\"}\n        />\n      </Grid>\n      {tenantCustom && (\n        <Grid item xs={12} className={classes.tenantCustomizationFields}>\n          <fieldset className={classes.fieldGroup}>\n            <legend className={classes.descriptionText}>\n              SecurityContext for MinIO\n            </legend>\n            <Grid item xs={12} className={`${classes.configSectionItem}`}>\n              <div\n                className={`${classes.multiContainer} ${classes.responsiveSectionItem}`}\n              >\n                <div className={classes.containerItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"tenant_securityContext_runAsUser\"\n                    name=\"tenant_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"tenantSecurityContext\", {\n                        ...tenantSecurityContext,\n                        runAsUser: e.target.value,\n                      });\n                      cleanValidation(\"tenant_securityContext_runAsUser\");\n                    }}\n                    label=\"Run As User\"\n                    value={tenantSecurityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\"tenant_securityContext_runAsUser\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.containerItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"tenant_securityContext_runAsGroup\"\n                    name=\"tenant_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"tenantSecurityContext\", {\n                        ...tenantSecurityContext,\n                        runAsGroup: e.target.value,\n                      });\n                      cleanValidation(\"tenant_securityContext_runAsGroup\");\n                    }}\n                    label=\"Run As Group\"\n                    value={tenantSecurityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\"tenant_securityContext_runAsGroup\"] ||\n                      \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.containerItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"tenant_securityContext_fsGroup\"\n                    name=\"tenant_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"tenantSecurityContext\", {\n                        ...tenantSecurityContext,\n                        fsGroup: e.target.value,\n                      });\n                      cleanValidation(\"tenant_securityContext_fsGroup\");\n                    }}\n                    label=\"FsGroup\"\n                    value={tenantSecurityContext.fsGroup}\n                    required\n                    error={\n                      validationErrors[\"tenant_securityContext_fsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <br />\n            <Grid item xs={12} className={classes.configSectionItem}>\n              <div className={classes.multiContainer}>\n                <FormSwitchWrapper\n                  value=\"tenantSecurityContextRunAsNonRoot\"\n                  id=\"tenant_securityContext_runAsNonRoot\"\n                  name=\"tenant_securityContext_runAsNonRoot\"\n                  checked={tenantSecurityContext.runAsNonRoot}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    updateField(\"tenantSecurityContext\", {\n                      ...tenantSecurityContext,\n                      runAsNonRoot: checked,\n                    });\n                  }}\n                  label={\"Do not run as Root\"}\n                />\n              </div>\n            </Grid>\n          </fieldset>\n        </Grid>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  exposeMinIO: state.tenants.createTenant.fields.configure.exposeMinIO,\n  exposeConsole: state.tenants.createTenant.fields.configure.exposeConsole,\n  tenantCustom: state.tenants.createTenant.fields.configure.tenantCustom,\n  tenantSecurityContext:\n    state.tenants.createTenant.fields.configure.tenantSecurityContext,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(Configure));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, IconButton, Paper, Tooltip, Typography } from \"@mui/material\";\nimport CasinoIcon from \"@mui/icons-material/Casino\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport {\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError, getRandomString } from \"../../utils\";\nimport RadioGroupSelector from \"../../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport RemoveIcon from \"../../../../../icons/RemoveIcon\";\n\ninterface IIdentityProviderProps {\n  classes: any;\n  idpSelection: string;\n  accessKeys: string[];\n  secretKeys: string[];\n  openIDConfigurationURL: string;\n  openIDClientID: string;\n  openIDSecretID: string;\n  openIDCallbackURL: string;\n  openIDClaimName: string;\n  openIDScopes: string;\n  ADURL: string;\n  ADSkipTLS: boolean;\n  ADServerInsecure: boolean;\n  ADGroupSearchBaseDN: string;\n  ADGroupSearchFilter: string;\n  ADUserDNs: string[];\n  ADLookupBindDN: string;\n  ADLookupBindPassword: string;\n  ADUserDNSearchBaseDN: string;\n  ADUserDNSearchFilter: string;\n  ADServerStartTLS: boolean;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    shortened: {\n      gridTemplateColumns: \"auto auto 50px 50px\",\n      display: \"grid\",\n      gridGap: 15,\n      marginBottom: 10,\n      \"& input\": {\n        fontWeight: 400,\n      },\n    },\n    buttonTray: {\n      marginLeft: 10,\n      display: \"flex\",\n      height: 38,\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    overlayAction: {\n      marginLeft: 10,\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    protocolRadioOptions: {\n      display: \"flex\",\n      flexFlow: \"column\",\n      marginBottom: 10,\n\n      \"& label\": {\n        fontSize: 14,\n      },\n      \"& div\": {\n        display: \"flex\",\n        flexFlow: \"column\",\n        alignItems: \"baseline\",\n      },\n    },\n    adUserDnRows: {\n      display: \"flex\",\n    },\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst IdentityProvider = ({\n  classes,\n  idpSelection,\n  accessKeys,\n  secretKeys,\n  openIDConfigurationURL,\n  openIDClientID,\n  openIDSecretID,\n  openIDCallbackURL,\n  openIDClaimName,\n  openIDScopes,\n  ADURL,\n  ADSkipTLS,\n  ADServerInsecure,\n  ADGroupSearchBaseDN,\n  ADGroupSearchFilter,\n  ADUserDNs,\n  ADLookupBindDN,\n  ADLookupBindPassword,\n  ADUserDNSearchBaseDN,\n  ADUserDNSearchFilter,\n  ADServerStartTLS,\n  updateAddField,\n  isPageValid,\n}: IIdentityProviderProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"identityProvider\", field, value);\n    },\n    [updateAddField]\n  );\n  const updateUserField = (index: number, value: string) => {\n    const newUserField = [...accessKeys];\n    newUserField[index] = value;\n    updateField(\"accessKeys\", newUserField);\n  };\n  const updatePwordField = (index: number, value: string) => {\n    const newUserField = [...secretKeys];\n    newUserField[index] = value;\n    updateField(\"secretKeys\", newUserField);\n  };\n  const updateADUserField = (index: number, value: string) => {\n    const newADUserDNsField = [...ADUserDNs];\n    newADUserDNsField[index] = value;\n    updateField(\"ADUserDNs\", newADUserDNsField);\n  };\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  // Validation\n\n  useEffect(() => {\n    let customIDPValidation: IValidation[] = [];\n\n    if (idpSelection === \"Built-in\") {\n      customIDPValidation = [...customIDPValidation];\n      for (var i = 0; i < accessKeys.length; i++) {\n        customIDPValidation.push({\n          fieldKey: `accesskey-${i.toString()}`,\n          required: true,\n          value: accessKeys[i],\n          pattern: /^[a-zA-Z0-9-]{8,63}$/,\n          customPatternMessage: \"Keys must be at least length 8\",\n        });\n        customIDPValidation.push({\n          fieldKey: `secretkey-${i.toString()}`,\n          required: true,\n          value: secretKeys[i],\n          pattern: /^[a-zA-Z0-9-]{8,63}$/,\n          customPatternMessage: \"Keys must be at least length 8\",\n        });\n      }\n    }\n\n    if (idpSelection === \"OpenID\") {\n      customIDPValidation = [\n        ...customIDPValidation,\n        {\n          fieldKey: \"openID_CONFIGURATION_URL\",\n          required: true,\n          value: openIDConfigurationURL,\n        },\n        {\n          fieldKey: \"openID_clientID\",\n          required: true,\n          value: openIDClientID,\n        },\n        {\n          fieldKey: \"openID_secretID\",\n          required: true,\n          value: openIDSecretID,\n        },\n        {\n          fieldKey: \"openID_claimName\",\n          required: true,\n          value: openIDClaimName,\n        },\n      ];\n    }\n\n    if (idpSelection === \"AD\") {\n      customIDPValidation = [\n        ...customIDPValidation,\n        {\n          fieldKey: \"AD_URL\",\n          required: true,\n          value: ADURL,\n        },\n        {\n          fieldKey: \"ad_lookupBindDN\",\n          required: true,\n          value: ADLookupBindDN,\n        },\n      ];\n      // validate user DNs\n      for (let i = 0; i < ADUserDNs.length; i++) {\n        customIDPValidation.push({\n          fieldKey: `ad-userdn-${i.toString()}`,\n          required: true,\n          value: ADUserDNs[i],\n        });\n      }\n    }\n\n    const commonVal = commonFormValidation(customIDPValidation);\n\n    isPageValid(\"identityProvider\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    ADLookupBindDN,\n    idpSelection,\n    accessKeys,\n    secretKeys,\n    openIDClientID,\n    openIDSecretID,\n    ADURL,\n    ADGroupSearchBaseDN,\n    ADGroupSearchFilter,\n    ADUserDNs,\n    isPageValid,\n    openIDConfigurationURL,\n    openIDClaimName,\n  ]);\n  let inputs = null;\n  if (idpSelection === \"Built-in\") {\n    inputs = accessKeys.map((_, index) => {\n      return (\n        <Fragment key={`identityField-${index.toString()}`}>\n          <div className={classes.shortened}>\n            <InputBoxWrapper\n              id={`accesskey-${index.toString()}`}\n              label={\"\"}\n              placeholder={\"Access Key\"}\n              name={`accesskey-${index.toString()}`}\n              value={accessKeys[index]}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateUserField(index, e.target.value);\n                cleanValidation(`accesskey-${index.toString()}`);\n              }}\n              index={index}\n              key={`csv-accesskey-${index.toString()}`}\n              error={validationErrors[`accesskey-${index.toString()}`] || \"\"}\n            />\n            <InputBoxWrapper\n              id={`secretkey-${index.toString()}`}\n              label={\"\"}\n              placeholder={\"Secret Key\"}\n              name={`secretkey-${index.toString()}`}\n              value={secretKeys[index]}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updatePwordField(index, e.target.value);\n                cleanValidation(`secretkey-${index.toString()}`);\n              }}\n              index={index}\n              key={`csv-secretkey-${index.toString()}`}\n              error={validationErrors[`secretkey-${index.toString()}`] || \"\"}\n            />\n            <div className={classes.buttonTray}>\n              <Tooltip title=\"Add User\" aria-label=\"add\">\n                <div className={classes.overlayAction}>\n                  <IconButton\n                    size={\"small\"}\n                    onClick={() => {\n                      accessKeys.push(\"\");\n                      secretKeys.push(\"\");\n                      updateUserField(accessKeys.length - 1, \"\");\n                      updatePwordField(secretKeys.length - 1, \"\");\n                    }}\n                  >\n                    <AddIcon />\n                  </IconButton>\n                </div>\n              </Tooltip>\n              <Tooltip title=\"Remove\" aria-label=\"add\">\n                <div className={classes.overlayAction}>\n                  <IconButton\n                    size={\"small\"}\n                    onClick={() => {\n                      if (accessKeys.length > 1) {\n                        accessKeys.splice(index, 1);\n                        secretKeys.splice(index, 1);\n                        updateUserField(\n                          accessKeys.length - 1,\n                          accessKeys[accessKeys.length - 1]\n                        );\n                      }\n                    }}\n                  >\n                    <RemoveIcon />\n                  </IconButton>\n                </div>\n              </Tooltip>\n              <Tooltip title=\"Randomize Credentials\" aria-label=\"add\">\n                <div className={classes.overlayAction}>\n                  <IconButton\n                    onClick={() => {\n                      updateUserField(index, getRandomString(16));\n                      updatePwordField(index, getRandomString(32));\n                    }}\n                    size={\"small\"}\n                  >\n                    <CasinoIcon />\n                  </IconButton>\n                </div>\n              </Tooltip>\n            </div>\n          </div>\n        </Fragment>\n      );\n    });\n  }\n  if (idpSelection === \"AD\") {\n    inputs = ADUserDNs.map((_, index) => {\n      return (\n        <Fragment key={`identityField-${index.toString()}`}>\n          <div className={classes.adUserDnRows}>\n            <InputBoxWrapper\n              id={`ad-userdn-${index.toString()}`}\n              label={\"\"}\n              placeholder=\"\"\n              name={`ad-userdn-${index.toString()}`}\n              value={ADUserDNs[index]}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateADUserField(index, e.target.value);\n                cleanValidation(`ad-userdn-${index.toString()}`);\n              }}\n              index={index}\n              key={`csv-ad-userdn-${index.toString()}`}\n              error={validationErrors[`ad-userdn-${index.toString()}`] || \"\"}\n            />\n            <div className={classes.buttonTray}>\n              <Tooltip title=\"Add User\" aria-label=\"add\">\n                <IconButton\n                  size={\"small\"}\n                  onClick={() => {\n                    ADUserDNs.push(\"\");\n                    updateADUserField(ADUserDNs.length - 1, \"\");\n                  }}\n                >\n                  <AddIcon />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"Remove\" aria-label=\"add\">\n                <IconButton\n                  size={\"small\"}\n                  style={{ marginLeft: 16 }}\n                  onClick={() => {\n                    if (ADUserDNs.length > 1) {\n                      ADUserDNs.splice(index, 1);\n                      updateUserField(\n                        ADUserDNs.length - 1,\n                        ADUserDNs[ADUserDNs.length - 1]\n                      );\n                    }\n                  }}\n                >\n                  <DeleteIcon />\n                </IconButton>\n              </Tooltip>\n            </div>\n          </div>\n        </Fragment>\n      );\n    });\n  }\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Identity Provider</h3>\n        <span className={classes.descriptionText}>\n          Access to the tenant can be controlled via an external Identity\n          Manager.\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.protocolRadioOptions}>\n        <label>Protocol</label>\n        <RadioGroupSelector\n          currentSelection={idpSelection}\n          id=\"idp-options\"\n          name=\"idp-options\"\n          label=\" \"\n          onChange={(e) => {\n            updateField(\"idpSelection\", e.target.value);\n          }}\n          selectorOptions={[\n            { label: \"Built-in\", value: \"Built-in\" },\n            { label: \"OpenID\", value: \"OpenID\" },\n            { label: \"Active Directory\", value: \"AD\" },\n          ]}\n        />\n      </Grid>\n      {idpSelection === \"Built-in\" && (\n        <Fragment>\n          Add additional users\n          {inputs}\n        </Fragment>\n      )}\n      {idpSelection === \"OpenID\" && (\n        <Fragment>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_CONFIGURATION_URL\"\n              name=\"openID_CONFIGURATION_URL\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDConfigurationURL\", e.target.value);\n                cleanValidation(\"openID_CONFIGURATION_URL\");\n              }}\n              label=\"Configuration URL\"\n              value={openIDConfigurationURL}\n              placeholder=\"https://your-identity-provider.com/.well-known/openid-configuration\"\n              error={validationErrors[\"openID_CONFIGURATION_URL\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_clientID\"\n              name=\"openID_clientID\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDClientID\", e.target.value);\n                cleanValidation(\"openID_clientID\");\n              }}\n              label=\"Client ID\"\n              value={openIDClientID}\n              error={validationErrors[\"openID_clientID\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_secretID\"\n              name=\"openID_secretID\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDSecretID\", e.target.value);\n                cleanValidation(\"openID_secretID\");\n              }}\n              label=\"Secret ID\"\n              value={openIDSecretID}\n              error={validationErrors[\"openID_secretID\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_callbackURL\"\n              name=\"openID_callbackURL\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDCallbackURL\", e.target.value);\n                cleanValidation(\"openID_callbackURL\");\n              }}\n              label=\"Callback URL\"\n              value={openIDCallbackURL}\n              placeholder=\"https://your-console-endpoint:9443/oauth_callback\"\n              error={validationErrors[\"openID_callbackURL\"] || \"\"}\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_claimName\"\n              name=\"openID_claimName\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDClaimName\", e.target.value);\n                cleanValidation(\"openID_claimName\");\n              }}\n              label=\"Claim Name\"\n              value={openIDClaimName}\n              error={validationErrors[\"openID_claimName\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_scopes\"\n              name=\"openID_scopes\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDScopes\", e.target.value);\n                cleanValidation(\"openID_scopes\");\n              }}\n              label=\"Scopes\"\n              value={openIDScopes}\n            />\n          </Grid>\n        </Fragment>\n      )}\n      {idpSelection === \"AD\" && (\n        <Fragment>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"AD_URL\"\n              name=\"AD_URL\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADURL\", e.target.value);\n                cleanValidation(\"AD_URL\");\n              }}\n              label=\"LDAP Server Address\"\n              value={ADURL}\n              placeholder=\"ldap-server:636\"\n              error={validationErrors[\"AD_URL\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <FormSwitchWrapper\n              value=\"ad_skipTLS\"\n              id=\"ad_skipTLS\"\n              name=\"ad_skipTLS\"\n              checked={ADSkipTLS}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n                updateField(\"ADSkipTLS\", checked);\n              }}\n              label={\"Skip TLS Verification\"}\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <FormSwitchWrapper\n              value=\"ad_serverInsecure\"\n              id=\"ad_serverInsecure\"\n              name=\"ad_serverInsecure\"\n              checked={ADServerInsecure}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n                updateField(\"ADServerInsecure\", checked);\n              }}\n              label={\"Server Insecure\"}\n            />\n          </Grid>\n          {ADServerInsecure ? (\n            <Grid item xs={12}>\n              <Typography\n                className={classes.error}\n                variant=\"caption\"\n                display=\"block\"\n                gutterBottom\n              >\n                Warning: All traffic with Active Directory will be unencrypted\n              </Typography>\n              <br />\n            </Grid>\n          ) : null}\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <FormSwitchWrapper\n              value=\"ad_serverStartTLS\"\n              id=\"ad_serverStartTLS\"\n              name=\"ad_serverStartTLS\"\n              checked={ADServerStartTLS}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n                updateField(\"ADServerStartTLS\", checked);\n              }}\n              label={\"Start TLS connection to AD/LDAP server\"}\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_lookupBindDN\"\n              name=\"ad_lookupBindDN\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADLookupBindDN\", e.target.value);\n                cleanValidation(\"ad_lookupBindDN\");\n              }}\n              label=\"Lookup Bind DN\"\n              value={ADLookupBindDN}\n              placeholder=\"cn=admin,dc=min,dc=io\"\n              error={validationErrors[\"ad_lookupBindDN\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_lookupBindPassword\"\n              name=\"ad_lookupBindPassword\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADLookupBindPassword\", e.target.value);\n              }}\n              label=\"Lookup Bind Password\"\n              value={ADLookupBindPassword}\n              placeholder=\"admin\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_userDNSearchBaseDN\"\n              name=\"ad_userDNSearchBaseDN\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADUserDNSearchBaseDN\", e.target.value);\n              }}\n              label=\"User DN Search Base DN\"\n              value={ADUserDNSearchBaseDN}\n              placeholder=\"dc=min,dc=io\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_userDNSearchFilter\"\n              name=\"ad_userDNSearchFilter\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADUserDNSearchFilter\", e.target.value);\n              }}\n              label=\"User DN Search Filter\"\n              value={ADUserDNSearchFilter}\n              placeholder=\"(sAMAcountName=%s)\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_groupSearchBaseDN\"\n              name=\"ad_groupSearchBaseDN\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADGroupSearchBaseDN\", e.target.value);\n              }}\n              label=\"Group Search Base DN\"\n              value={ADGroupSearchBaseDN}\n              placeholder=\"ou=hwengg,dc=min,dc=io;ou=swengg,dc=min,dc=io\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_groupSearchFilter\"\n              name=\"ad_groupSearchFilter\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADGroupSearchFilter\", e.target.value);\n              }}\n              label=\"Group Search Filter\"\n              value={ADGroupSearchFilter}\n              placeholder=\"(&(objectclass=groupOfNames)(member=%s))\"\n            />\n          </Grid>\n          <fieldset className={classes.fieldGroup}>\n            <legend className={classes.descriptionText}>\n              List of user DNs (Distinguished Names) to be Tenant Administrators\n            </legend>\n            <Grid item xs={12}>\n              {inputs}\n            </Grid>\n          </fieldset>\n        </Fragment>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  idpSelection: state.tenants.createTenant.fields.identityProvider.idpSelection,\n  accessKeys: state.tenants.createTenant.fields.identityProvider.accessKeys,\n  secretKeys: state.tenants.createTenant.fields.identityProvider.secretKeys,\n  openIDConfigurationURL:\n    state.tenants.createTenant.fields.identityProvider.openIDConfigurationURL,\n  openIDClientID:\n    state.tenants.createTenant.fields.identityProvider.openIDClientID,\n  openIDSecretID:\n    state.tenants.createTenant.fields.identityProvider.openIDSecretID,\n  openIDCallbackURL:\n    state.tenants.createTenant.fields.identityProvider.openIDCallbackURL,\n  openIDClaimName:\n    state.tenants.createTenant.fields.identityProvider.openIDClaimName,\n  openIDScopes: state.tenants.createTenant.fields.identityProvider.openIDScopes,\n  ADURL: state.tenants.createTenant.fields.identityProvider.ADURL,\n  ADSkipTLS: state.tenants.createTenant.fields.identityProvider.ADSkipTLS,\n  ADServerInsecure:\n    state.tenants.createTenant.fields.identityProvider.ADServerInsecure,\n  ADGroupSearchBaseDN:\n    state.tenants.createTenant.fields.identityProvider.ADGroupSearchBaseDN,\n  ADGroupSearchFilter:\n    state.tenants.createTenant.fields.identityProvider.ADGroupSearchFilter,\n  ADUserDNs: state.tenants.createTenant.fields.identityProvider.ADUserDNs,\n  ADLookupBindDN:\n    state.tenants.createTenant.fields.identityProvider.ADLookupBindDN,\n  ADLookupBindPassword:\n    state.tenants.createTenant.fields.identityProvider.ADLookupBindPassword,\n  ADUserDNSearchBaseDN:\n    state.tenants.createTenant.fields.identityProvider.ADUserDNSearchBaseDN,\n  ADUserDNSearchFilter:\n    state.tenants.createTenant.fields.identityProvider.ADUserDNSearchFilter,\n  ADServerStartTLS:\n    state.tenants.createTenant.fields.identityProvider.ADServerStartTLS,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(IdentityProvider));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, IconButton, Paper, Typography } from \"@mui/material\";\nimport {\n  createTenantCommon,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport {\n  addCaCertificate,\n  addFileToCaCertificates,\n  addFileToKeyPair,\n  addKeyPair,\n  deleteCaCertificate,\n  deleteKeyPair,\n  isPageValid,\n  updateAddField,\n} from \"../../actions\";\nimport { AppState } from \"../../../../../store\";\nimport { KeyPair } from \"../../ListTenants/utils\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport FileSelector from \"../../../Common/FormComponents/FileSelector/FileSelector\";\nimport AddIcon from \"../../../../../icons/AddIcon\";\nimport RemoveIcon from \"../../../../../icons/RemoveIcon\";\n\ninterface ISecurityProps {\n  classes: any;\n  enableTLS: boolean;\n  enableAutoCert: boolean;\n  enableCustomCerts: boolean;\n  minioCertificates: KeyPair[];\n  caCertificates: KeyPair[];\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  addFileToCaCertificates: typeof addFileToCaCertificates;\n  deleteCaCertificate: typeof deleteCaCertificate;\n  addCaCertificate: typeof addCaCertificate;\n  addKeyPair: typeof addKeyPair;\n  addFileToKeyPair: typeof addFileToKeyPair;\n  deleteKeyPair: typeof deleteKeyPair;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    minioCertificateRows: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-start\",\n      borderBottom: \"1px solid #EAEAEA\",\n      \"&:last-child\": {\n        borderBottom: 0,\n      },\n      \"@media (max-width: 900px)\": {\n        flex: 1,\n      },\n    },\n    fileItem: {\n      marginRight: 10,\n      display: \"flex\",\n      \"& div label\": {\n        minWidth: 50,\n      },\n\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    minioCertsContainer: {\n      marginBottom: 15,\n    },\n    minioCACertsRow: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-start\",\n\n      borderBottom: \"1px solid #EAEAEA\",\n      \"&:last-child\": {\n        borderBottom: 0,\n      },\n      \"@media (max-width: 900px)\": {\n        flex: 1,\n\n        \"& div label\": {\n          minWidth: 50,\n        },\n      },\n    },\n    rowActions: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      \"@media (max-width: 900px)\": {\n        flex: 1,\n      },\n    },\n    overlayAction: {\n      marginLeft: 10,\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n\n    ...createTenantCommon,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst Security = ({\n  classes,\n  enableTLS,\n  enableAutoCert,\n  enableCustomCerts,\n  minioCertificates,\n  caCertificates,\n  updateAddField,\n  isPageValid,\n  addFileToCaCertificates,\n  deleteCaCertificate,\n  addCaCertificate,\n  addKeyPair,\n  addFileToKeyPair,\n  deleteKeyPair,\n}: ISecurityProps) => {\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"security\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Validation\n\n  useEffect(() => {\n    if (!enableTLS) {\n      isPageValid(\"security\", true);\n      return;\n    }\n    if (enableAutoCert) {\n      isPageValid(\"security\", true);\n      return;\n    }\n    if (enableCustomCerts) {\n      isPageValid(\"security\", true);\n      return;\n    }\n    isPageValid(\"security\", false);\n  }, [enableTLS, enableAutoCert, enableCustomCerts, isPageValid]);\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Security</h3>\n      </div>\n      <Grid item xs={12}>\n        <FormSwitchWrapper\n          value=\"enableTLS\"\n          id=\"enableTLS\"\n          name=\"enableTLS\"\n          checked={enableTLS}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"enableTLS\", checked);\n          }}\n          label={\"Enable TLS\"}\n        />\n        Enable TLS for the tenant, this is required for Encryption Configuration\n        {enableTLS && (\n          <Fragment>\n            <br />\n            <br />\n            <Typography variant=\"caption\" display=\"block\" gutterBottom>\n              AutoCert: MinIO Operator will generate all TLS certificates\n              automatically\n            </Typography>\n            <Typography variant=\"caption\" display=\"block\" gutterBottom>\n              Custom certificates: Allow user to provide your own certificates\n            </Typography>\n            <br />\n          </Fragment>\n        )}\n      </Grid>\n      {enableTLS && (\n        <Fragment>\n          <Grid item xs={12}>\n            <FormSwitchWrapper\n              value=\"enableAutoCert\"\n              id=\"enableAutoCert\"\n              name=\"enableAutoCert\"\n              checked={enableAutoCert}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n\n                updateField(\"enableAutoCert\", checked);\n              }}\n              label={\"Enable AutoCert\"}\n            />\n            <FormSwitchWrapper\n              value=\"enableCustomCerts\"\n              id=\"enableCustomCerts\"\n              name=\"enableCustomCerts\"\n              checked={enableCustomCerts}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n\n                updateField(\"enableCustomCerts\", checked);\n              }}\n              label={\"Custom Certificates\"}\n            />\n          </Grid>\n          {enableCustomCerts && (\n            <Fragment>\n              <Grid container>\n                <Grid item xs={12} className={classes.minioCertsContainer}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      MinIO Certificates\n                    </legend>\n                    {minioCertificates.map((keyPair: KeyPair) => (\n                      <Grid\n                        item\n                        xs={12}\n                        key={`minio-certs-${keyPair.id}`}\n                        className={classes.minioCertificateRows}\n                      >\n                        <Grid item xs={10} className={classes.fileItem}>\n                          <FileSelector\n                            onChange={(encodedValue, fileName) => {\n                              addFileToKeyPair(\n                                keyPair.id,\n                                \"cert\",\n                                fileName,\n                                encodedValue\n                              );\n                            }}\n                            accept=\".cer,.crt,.cert,.pem\"\n                            id=\"tlsCert\"\n                            name=\"tlsCert\"\n                            label=\"Cert\"\n                            value={keyPair.cert}\n                          />\n                          <FileSelector\n                            onChange={(encodedValue, fileName) => {\n                              addFileToKeyPair(\n                                keyPair.id,\n                                \"key\",\n                                fileName,\n                                encodedValue\n                              );\n                            }}\n                            accept=\".key,.pem\"\n                            id=\"tlsKey\"\n                            name=\"tlsKey\"\n                            label=\"Key\"\n                            value={keyPair.key}\n                          />\n                        </Grid>\n\n                        <Grid item xs={2} className={classes.rowActions}>\n                          <div className={classes.overlayAction}>\n                            <IconButton size={\"small\"} onClick={addKeyPair}>\n                              <AddIcon />\n                            </IconButton>\n                          </div>\n                          <div className={classes.overlayAction}>\n                            <IconButton\n                              size={\"small\"}\n                              onClick={() => {\n                                deleteKeyPair(keyPair.id);\n                              }}\n                            >\n                              <RemoveIcon />\n                            </IconButton>\n                          </div>\n                        </Grid>\n                      </Grid>\n                    ))}\n                  </fieldset>\n                </Grid>\n              </Grid>\n\n              <Grid container>\n                <Grid item xs={12} className={classes.minioCertsContainer}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      MinIO CA Certificates\n                    </legend>\n\n                    {caCertificates.map((keyPair: KeyPair) => (\n                      <Grid\n                        item\n                        xs={12}\n                        key={`minio-CA-certs-${keyPair.id}`}\n                        className={classes.minioCACertsRow}\n                      >\n                        <Grid item xs={6}>\n                          <FileSelector\n                            onChange={(encodedValue, fileName) => {\n                              addFileToCaCertificates(\n                                keyPair.id,\n                                \"cert\",\n                                fileName,\n                                encodedValue\n                              );\n                            }}\n                            accept=\".cer,.crt,.cert,.pem\"\n                            id=\"tlsCert\"\n                            name=\"tlsCert\"\n                            label=\"Cert\"\n                            value={keyPair.cert}\n                          />\n                        </Grid>\n                        <Grid item xs={6}>\n                          <div className={classes.rowActions}>\n                            <div className={classes.overlayAction}>\n                              <IconButton\n                                size={\"small\"}\n                                onClick={addCaCertificate}\n                              >\n                                <AddIcon />\n                              </IconButton>\n                            </div>\n                            <div className={classes.overlayAction}>\n                              <IconButton\n                                size={\"small\"}\n                                onClick={() => {\n                                  deleteCaCertificate(keyPair.id);\n                                }}\n                              >\n                                <RemoveIcon />\n                              </IconButton>\n                            </div>\n                          </div>\n                        </Grid>\n                      </Grid>\n                    ))}\n                  </fieldset>\n                </Grid>\n              </Grid>\n            </Fragment>\n          )}\n        </Fragment>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  enableTLS: state.tenants.createTenant.fields.security.enableTLS,\n  enableAutoCert: state.tenants.createTenant.fields.security.enableAutoCert,\n  enableCustomCerts:\n    state.tenants.createTenant.fields.security.enableCustomCerts,\n  minioCertificates: state.tenants.createTenant.certificates.minioCertificates,\n  caCertificates: state.tenants.createTenant.certificates.caCertificates,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n  addFileToCaCertificates,\n  deleteCaCertificate,\n  addCaCertificate,\n  addKeyPair,\n  addFileToKeyPair,\n  deleteKeyPair,\n});\n\nexport default withStyles(styles)(connector(Security));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Paper } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  addFileClientCert,\n  addFileGemaltoCa,\n  addFileServerCert,\n  addFileVaultCa,\n  addFileVaultCert,\n  isPageValid,\n  updateAddField,\n} from \"../../actions\";\nimport {\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport FileSelector from \"../../../Common/FormComponents/FileSelector/FileSelector\";\nimport RadioGroupSelector from \"../../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport { KeyPair } from \"../../ListTenants/utils\";\nimport { ISecurityContext } from \"../../types\";\n\ninterface IEncryptionProps {\n  classes: any;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  addFileServerCert: typeof addFileServerCert;\n  addFileClientCert: typeof addFileClientCert;\n  addFileVaultCert: typeof addFileVaultCert;\n  addFileVaultCa: typeof addFileVaultCa;\n  addFileGemaltoCa: typeof addFileGemaltoCa;\n  enableEncryption: boolean;\n  encryptionType: string;\n  gemaltoEndpoint: string;\n  gemaltoToken: string;\n  gemaltoDomain: string;\n  gemaltoRetry: string;\n  awsEndpoint: string;\n  awsRegion: string;\n  awsKMSKey: string;\n  awsAccessKey: string;\n  awsSecretKey: string;\n  awsToken: string;\n  vaultEndpoint: string;\n  vaultEngine: string;\n  vaultNamespace: string;\n  vaultPrefix: string;\n  vaultAppRoleEngine: string;\n  vaultId: string;\n  vaultSecret: string;\n  vaultRetry: string;\n  vaultPing: string;\n  azureEndpoint: string;\n  azureTenantID: string;\n  azureClientID: string;\n  azureClientSecret: string;\n  gcpProjectID: string;\n  gcpEndpoint: string;\n  gcpClientEmail: string;\n  gcpClientID: string;\n  gcpPrivateKeyID: string;\n  gcpPrivateKey: string;\n  enableCustomCertsForKES: boolean;\n  enableAutoCert: boolean;\n  enableTLS: boolean;\n  enableCustomCerts: boolean;\n  minioCertificates: KeyPair[];\n  serverCertificate: KeyPair;\n  clientCertificate: KeyPair;\n  vaultCertificate: KeyPair;\n  vaultCA: KeyPair;\n  gemaltoCA: KeyPair;\n  kesSecurityContext: ISecurityContext;\n  replicas: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    encryptionTypeOptions: {\n      marginBottom: 15,\n    },\n    mutualTlsConfig: {\n      marginTop: 15,\n      \"& fieldset\": {\n        flex: 1,\n      },\n    },\n    rightSpacer: {\n      marginRight: 15,\n    },\n    responsiveContainer: {\n      \"@media (max-width: 900px)\": {\n        display: \"flex\",\n        flexFlow: \"column\",\n      },\n    },\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst Encryption = ({\n  classes,\n  updateAddField,\n  isPageValid,\n  addFileServerCert,\n  addFileClientCert,\n  addFileVaultCert,\n  addFileVaultCa,\n  addFileGemaltoCa,\n  enableEncryption,\n  enableCustomCerts,\n  encryptionType,\n  gemaltoEndpoint,\n  gemaltoToken,\n  gemaltoDomain,\n  gemaltoRetry,\n  awsEndpoint,\n  awsRegion,\n  awsKMSKey,\n  awsAccessKey,\n  awsSecretKey,\n  awsToken,\n  vaultEndpoint,\n  vaultEngine,\n  vaultNamespace,\n  vaultPrefix,\n  vaultAppRoleEngine,\n  vaultId,\n  vaultSecret,\n  vaultRetry,\n  vaultPing,\n  azureEndpoint,\n  azureTenantID,\n  azureClientID,\n  azureClientSecret,\n  gcpProjectID,\n  gcpEndpoint,\n  gcpClientEmail,\n  gcpClientID,\n  gcpPrivateKeyID,\n  gcpPrivateKey,\n  enableCustomCertsForKES,\n  enableAutoCert,\n  enableTLS,\n  minioCertificates,\n  serverCertificate,\n  clientCertificate,\n  vaultCertificate,\n  vaultCA,\n  gemaltoCA,\n  kesSecurityContext,\n  replicas,\n}: IEncryptionProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  let encryptionAvailable = false;\n  if (\n    enableTLS &&\n    (enableAutoCert ||\n      (minioCertificates &&\n        minioCertificates.filter(\n          (item) => item.encoded_key && item.encoded_cert\n        ).length > 0))\n  ) {\n    encryptionAvailable = true;\n  }\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"encryption\", field, value);\n    },\n    [updateAddField]\n  );\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  // Validation\n  useEffect(() => {\n    let encryptionValidation: IValidation[] = [];\n\n    if (enableEncryption) {\n      encryptionValidation = [\n        ...encryptionValidation,\n        {\n          fieldKey: \"replicas\",\n          required: true,\n          value: replicas,\n          customValidation: parseInt(replicas) < 1,\n          customValidationMessage: \"Replicas needs to be 1 or greater\",\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsUser\",\n          required: true,\n          value: kesSecurityContext.runAsUser,\n          customValidation:\n            kesSecurityContext.runAsUser === \"\" ||\n            parseInt(kesSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsGroup\",\n          required: true,\n          value: kesSecurityContext.runAsGroup,\n          customValidation:\n            kesSecurityContext.runAsGroup === \"\" ||\n            parseInt(kesSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_fsGroup\",\n          required: true,\n          value: kesSecurityContext.fsGroup,\n          customValidation:\n            kesSecurityContext.fsGroup === \"\" ||\n            parseInt(kesSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n\n      if (enableCustomCerts) {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"serverKey\",\n            required: !enableAutoCert,\n            value: serverCertificate.encoded_key,\n          },\n          {\n            fieldKey: \"serverCert\",\n            required: !enableAutoCert,\n            value: serverCertificate.encoded_cert,\n          },\n          {\n            fieldKey: \"clientKey\",\n            required: !enableAutoCert,\n            value: clientCertificate.encoded_key,\n          },\n          {\n            fieldKey: \"clientCert\",\n            required: !enableAutoCert,\n            value: clientCertificate.encoded_cert,\n          },\n        ];\n      }\n\n      if (encryptionType === \"vault\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"vault_endpoint\",\n            required: true,\n            value: vaultEndpoint,\n          },\n          {\n            fieldKey: \"vault_id\",\n            required: true,\n            value: vaultId,\n          },\n          {\n            fieldKey: \"vault_secret\",\n            required: true,\n            value: vaultSecret,\n          },\n          {\n            fieldKey: \"vault_ping\",\n            required: false,\n            value: vaultPing,\n            customValidation: parseInt(vaultPing) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n          {\n            fieldKey: \"vault_retry\",\n            required: false,\n            value: vaultRetry,\n            customValidation: parseInt(vaultRetry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"aws\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"aws_endpoint\",\n            required: true,\n            value: awsEndpoint,\n          },\n          {\n            fieldKey: \"aws_region\",\n            required: true,\n            value: awsRegion,\n          },\n          {\n            fieldKey: \"aws_accessKey\",\n            required: true,\n            value: awsAccessKey,\n          },\n          {\n            fieldKey: \"aws_secretKey\",\n            required: true,\n            value: awsSecretKey,\n          },\n        ];\n      }\n\n      if (encryptionType === \"gemalto\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"gemalto_endpoint\",\n            required: true,\n            value: gemaltoEndpoint,\n          },\n          {\n            fieldKey: \"gemalto_token\",\n            required: true,\n            value: gemaltoToken,\n          },\n          {\n            fieldKey: \"gemalto_domain\",\n            required: true,\n            value: gemaltoDomain,\n          },\n          {\n            fieldKey: \"gemalto_retry\",\n            required: false,\n            value: gemaltoRetry,\n            customValidation: parseInt(gemaltoRetry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"azure\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"azure_endpoint\",\n            required: true,\n            value: azureEndpoint,\n          },\n          {\n            fieldKey: \"azure_tenant_id\",\n            required: true,\n            value: azureTenantID,\n          },\n          {\n            fieldKey: \"azure_client_id\",\n            required: true,\n            value: azureClientID,\n          },\n          {\n            fieldKey: \"azure_client_secret\",\n            required: true,\n            value: azureClientSecret,\n          },\n        ];\n      }\n    }\n\n    const commonVal = commonFormValidation(encryptionValidation);\n\n    isPageValid(\"encryption\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    enableEncryption,\n    encryptionType,\n    vaultEndpoint,\n    vaultEngine,\n    vaultId,\n    vaultSecret,\n    vaultPing,\n    vaultRetry,\n    awsEndpoint,\n    awsRegion,\n    awsSecretKey,\n    awsAccessKey,\n    gemaltoEndpoint,\n    gemaltoToken,\n    gemaltoDomain,\n    gemaltoRetry,\n    gcpProjectID,\n    gcpEndpoint,\n    gcpClientEmail,\n    gcpClientID,\n    gcpPrivateKeyID,\n    gcpPrivateKey,\n    azureEndpoint,\n    azureTenantID,\n    azureClientID,\n    azureClientSecret,\n    isPageValid,\n    enableAutoCert,\n    enableCustomCerts,\n    serverCertificate.encoded_key,\n    serverCertificate.encoded_cert,\n    clientCertificate.encoded_key,\n    clientCertificate.encoded_cert,\n    kesSecurityContext,\n    replicas,\n  ]);\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Encryption</h3>\n        <span className={classes.descriptionText}>\n          How would you like to encrypt the information at rest.\n        </span>\n      </div>\n      <Grid item xs={12}>\n        <FormSwitchWrapper\n          value=\"enableEncryption\"\n          id=\"enableEncryption\"\n          name=\"enableEncryption\"\n          checked={enableEncryption}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"enableEncryption\", checked);\n          }}\n          label={\"Enable Server Side Encryption\"}\n          disabled={!encryptionAvailable}\n        />\n      </Grid>\n      {enableEncryption && (\n        <Fragment>\n          <Grid item xs={12} className={classes.encryptionTypeOptions}>\n            <RadioGroupSelector\n              currentSelection={encryptionType}\n              id=\"encryptionType\"\n              name=\"encryptionType\"\n              label=\"Encryption Options\"\n              onChange={(e) => {\n                updateField(\"encryptionType\", e.target.value);\n              }}\n              selectorOptions={[\n                { label: \"Vault\", value: \"vault\" },\n                { label: \"AWS\", value: \"aws\" },\n                { label: \"Gemalto\", value: \"gemalto\" },\n                { label: \"GCP\", value: \"gcp\" },\n                { label: \"Azure\", value: \"azure\" },\n              ]}\n            />\n          </Grid>\n          {encryptionType === \"vault\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"vault_endpoint\"\n                  name=\"vault_endpoint\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"vaultEndpoint\", e.target.value);\n                    cleanValidation(\"vault_endpoint\");\n                  }}\n                  label=\"Endpoint\"\n                  value={vaultEndpoint}\n                  error={validationErrors[\"vault_endpoint\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"vault_engine\"\n                  name=\"vault_engine\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"vaultEngine\", e.target.value);\n                    cleanValidation(\"vault_engine\");\n                  }}\n                  label=\"Engine\"\n                  value={vaultEngine}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"vault_namespace\"\n                  name=\"vault_namespace\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"vaultNamespace\", e.target.value);\n                  }}\n                  label=\"Namespace\"\n                  value={vaultNamespace}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"vault_prefix\"\n                  name=\"vault_prefix\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"vaultPrefix\", e.target.value);\n                  }}\n                  label=\"Prefix\"\n                  value={vaultPrefix}\n                />\n              </Grid>\n\n              <Grid item xs={12}>\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>App Role</legend>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"vault_approle_engine\"\n                      name=\"vault_approle_engine\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"vaultAppRoleEngine\", e.target.value);\n                      }}\n                      label=\"Engine\"\n                      value={vaultAppRoleEngine}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"vault_id\"\n                      name=\"vault_id\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"vaultId\", e.target.value);\n                        cleanValidation(\"vault_id\");\n                      }}\n                      label=\"AppRole ID\"\n                      value={vaultId}\n                      error={validationErrors[\"vault_id\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"vault_secret\"\n                      name=\"vault_secret\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"vaultSecret\", e.target.value);\n                        cleanValidation(\"vault_secret\");\n                      }}\n                      label=\"AppRole Secret\"\n                      value={vaultSecret}\n                      error={validationErrors[\"vault_secret\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      min=\"0\"\n                      id=\"vault_retry\"\n                      name=\"vault_retry\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"vaultRetry\", e.target.value);\n                        cleanValidation(\"vault_retry\");\n                      }}\n                      label=\"Retry (Seconds)\"\n                      value={vaultRetry}\n                      error={validationErrors[\"vault_retry\"] || \"\"}\n                    />\n                  </Grid>\n                </fieldset>\n              </Grid>\n\n              <Grid container className={classes.mutualTlsConfig}>\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>\n                    Mutual TLS authentication (optional)\n                  </legend>\n                  <FileSelector\n                    onChange={(encodedValue, fileName) => {\n                      addFileVaultCert(\"key\", fileName, encodedValue);\n                      cleanValidation(\"vault_key\");\n                    }}\n                    accept=\".key,.pem\"\n                    id=\"vault_key\"\n                    name=\"vault_key\"\n                    label=\"Key\"\n                    value={vaultCertificate.key}\n                  />\n                  <FileSelector\n                    onChange={(encodedValue, fileName) => {\n                      addFileVaultCert(\"cert\", fileName, encodedValue);\n                      cleanValidation(\"vault_cert\");\n                    }}\n                    accept=\".cer,.crt,.cert,.pem\"\n                    id=\"vault_cert\"\n                    name=\"vault_cert\"\n                    label=\"Cert\"\n                    value={vaultCertificate.cert}\n                  />\n                  <FileSelector\n                    onChange={(encodedValue, fileName) => {\n                      addFileVaultCa(fileName, encodedValue);\n                      cleanValidation(\"vault_ca\");\n                    }}\n                    accept=\".cer,.crt,.cert,.pem\"\n                    id=\"vault_ca\"\n                    name=\"vault_ca\"\n                    label=\"CA\"\n                    value={vaultCA.cert}\n                  />\n                </fieldset>\n              </Grid>\n              <Grid\n                item\n                xs={12}\n                className={classes.formFieldRow}\n                style={{ marginTop: 15 }}\n              >\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>Status</legend>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    min=\"0\"\n                    id=\"vault_ping\"\n                    name=\"vault_ping\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"vaultPing\", e.target.value);\n                      cleanValidation(\"vault_ping\");\n                    }}\n                    label=\"Ping (Seconds)\"\n                    value={vaultPing}\n                    error={validationErrors[\"vault_ping\"] || \"\"}\n                  />\n                </fieldset>\n              </Grid>\n            </Fragment>\n          )}\n          {encryptionType === \"azure\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"azure_endpoint\"\n                  name=\"azure_endpoint\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"azureEndpoint\", e.target.value);\n                    cleanValidation(\"azure_endpoint\");\n                  }}\n                  label=\"Endpoint\"\n                  value={azureEndpoint}\n                  error={validationErrors[\"azure_endpoint\"] || \"\"}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>\n                    Credentials\n                  </legend>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"azure_tenant_id\"\n                      name=\"azure_tenant_id\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"azureTenantID\", e.target.value);\n                        cleanValidation(\"azure_tenant_id\");\n                      }}\n                      label=\"Tenant ID\"\n                      value={azureTenantID}\n                      error={validationErrors[\"azure_tenant_id\"] || \"\"}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"azure_client_id\"\n                      name=\"azure_client_id\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"azureClientID\", e.target.value);\n                        cleanValidation(\"azure_client_id\");\n                      }}\n                      label=\"Client ID\"\n                      value={azureClientID}\n                      error={validationErrors[\"azure_client_id\"] || \"\"}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"azure_client_secret\"\n                      name=\"azure_client_secret\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"azureClientSecret\", e.target.value);\n                        cleanValidation(\"azure_client_secret\");\n                      }}\n                      label=\"Client Secret\"\n                      value={azureClientSecret}\n                      error={validationErrors[\"azure_client_secret\"] || \"\"}\n                    />\n                  </Grid>\n                </fieldset>\n              </Grid>\n            </Fragment>\n          )}\n          {encryptionType === \"gcp\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"gcp_project_id\"\n                  name=\"gcp_project_id\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"gcpProjectID\", e.target.value);\n                  }}\n                  label=\"Project ID\"\n                  value={gcpProjectID}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"gcp_endpoint\"\n                  name=\"gcp_endpoint\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"gcpEndpoint\", e.target.value);\n                  }}\n                  label=\"Endpoint\"\n                  value={gcpEndpoint}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>\n                    Credentials\n                  </legend>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gcp_client_email\"\n                      name=\"gcp_client_email\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gcpClientEmail\", e.target.value);\n                      }}\n                      label=\"Client Email\"\n                      value={gcpClientEmail}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gcp_client_id\"\n                      name=\"gcp_client_id\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gcpClientID\", e.target.value);\n                      }}\n                      label=\"Client ID\"\n                      value={gcpClientID}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gcp_private_key_id\"\n                      name=\"gcp_private_key_id\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gcpPrivateKeyID\", e.target.value);\n                      }}\n                      label=\"Private Key ID\"\n                      value={gcpPrivateKeyID}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gcp_private_key\"\n                      name=\"gcp_private_key\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gcpPrivateKey\", e.target.value);\n                      }}\n                      label=\"Private Key\"\n                      value={gcpPrivateKey}\n                    />\n                  </Grid>\n                </fieldset>\n              </Grid>\n            </Fragment>\n          )}\n          {encryptionType === \"aws\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"aws_endpoint\"\n                  name=\"aws_endpoint\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"awsEndpoint\", e.target.value);\n                    cleanValidation(\"aws_endpoint\");\n                  }}\n                  label=\"Endpoint\"\n                  value={awsEndpoint}\n                  error={validationErrors[\"aws_endpoint\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"aws_region\"\n                  name=\"aws_region\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"awsRegion\", e.target.value);\n                    cleanValidation(\"aws_region\");\n                  }}\n                  label=\"Region\"\n                  value={awsRegion}\n                  error={validationErrors[\"aws_region\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"aws_kmsKey\"\n                  name=\"aws_kmsKey\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"awsKMSKey\", e.target.value);\n                  }}\n                  label=\"KMS Key\"\n                  value={awsKMSKey}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>\n                    Credentials\n                  </legend>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"aws_accessKey\"\n                      name=\"aws_accessKey\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"awsAccessKey\", e.target.value);\n                        cleanValidation(\"aws_accessKey\");\n                      }}\n                      label=\"Access Key\"\n                      value={awsAccessKey}\n                      error={validationErrors[\"aws_accessKey\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"aws_secretKey\"\n                      name=\"aws_secretKey\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"awsSecretKey\", e.target.value);\n                        cleanValidation(\"aws_secretKey\");\n                      }}\n                      label=\"Secret Key\"\n                      value={awsSecretKey}\n                      error={validationErrors[\"aws_secretKey\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"aws_token\"\n                      name=\"aws_token\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"awsToken\", e.target.value);\n                      }}\n                      label=\"Token\"\n                      value={awsToken}\n                    />\n                  </Grid>\n                </fieldset>\n              </Grid>\n            </Fragment>\n          )}\n          {encryptionType === \"gemalto\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"gemalto_endpoint\"\n                  name=\"gemalto_endpoint\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"gemaltoEndpoint\", e.target.value);\n                    cleanValidation(\"gemalto_endpoint\");\n                  }}\n                  label=\"Endpoint\"\n                  value={gemaltoEndpoint}\n                  error={validationErrors[\"gemalto_endpoint\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid\n                item\n                xs={12}\n                style={{\n                  marginBottom: 15,\n                }}\n              >\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>\n                    Credentials\n                  </legend>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gemalto_token\"\n                      name=\"gemalto_token\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gemaltoToken\", e.target.value);\n                        cleanValidation(\"gemalto_token\");\n                      }}\n                      label=\"Token\"\n                      value={gemaltoToken}\n                      error={validationErrors[\"gemalto_token\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gemalto_domain\"\n                      name=\"gemalto_domain\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gemaltoDomain\", e.target.value);\n                        cleanValidation(\"gemalto_domain\");\n                      }}\n                      label=\"Domain\"\n                      value={gemaltoDomain}\n                      error={validationErrors[\"gemalto_domain\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      min=\"0\"\n                      id=\"gemalto_retry\"\n                      name=\"gemalto_retry\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gemaltoRetry\", e.target.value);\n                        cleanValidation(\"gemalto_retry\");\n                      }}\n                      label=\"Retry (seconds)\"\n                      value={gemaltoRetry}\n                      error={validationErrors[\"gemalto_retry\"] || \"\"}\n                    />\n                  </Grid>\n                </fieldset>\n              </Grid>\n              <Grid\n                item\n                xs={12}\n                style={{\n                  marginBottom: 15,\n                }}\n              >\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>\n                    Custom CA Root certificate verification\n                  </legend>\n\n                  <FileSelector\n                    onChange={(encodedValue, fileName) => {\n                      addFileGemaltoCa(fileName, encodedValue);\n                      cleanValidation(\"gemalto_ca\");\n                    }}\n                    accept=\".cer,.crt,.cert,.pem\"\n                    id=\"gemalto_ca\"\n                    name=\"gemalto_ca\"\n                    label=\"CA\"\n                    value={gemaltoCA.cert}\n                  />\n                </fieldset>\n              </Grid>\n            </Fragment>\n          )}\n          <div className={classes.headerElement}>\n            <h4 className={classes.h3Section}>Additional Configurations</h4>\n          </div>\n          <Grid item xs={12}>\n            <FormSwitchWrapper\n              value=\"enableCustomCertsForKES\"\n              id=\"enableCustomCertsForKES\"\n              name=\"enableCustomCertsForKES\"\n              checked={enableCustomCertsForKES || !enableAutoCert}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n\n                updateField(\"enableCustomCertsForKES\", checked);\n              }}\n              label={\"Custom Certificates\"}\n              disabled={!enableAutoCert}\n            />\n          </Grid>\n          {(enableCustomCertsForKES || !enableAutoCert) && (\n            <Fragment>\n              <Grid container>\n                <Grid item xs={12} style={{ marginBottom: 15 }}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Encryption Service Certificates\n                    </legend>\n                    <FileSelector\n                      onChange={(encodedValue, fileName) => {\n                        addFileServerCert(\"key\", fileName, encodedValue);\n                        cleanValidation(\"serverKey\");\n                      }}\n                      accept=\".key,.pem\"\n                      id=\"serverKey\"\n                      name=\"serverKey\"\n                      label=\"Key\"\n                      error={validationErrors[\"serverKey\"] || \"\"}\n                      value={serverCertificate.key}\n                      required={!enableAutoCert}\n                    />\n                    <FileSelector\n                      onChange={(encodedValue, fileName) => {\n                        addFileServerCert(\"cert\", fileName, encodedValue);\n                        cleanValidation(\"serverCert\");\n                      }}\n                      accept=\".cer,.crt,.cert,.pem\"\n                      id=\"serverCert\"\n                      name=\"serverCert\"\n                      label=\"Cert\"\n                      error={validationErrors[\"serverCert\"] || \"\"}\n                      value={serverCertificate.cert}\n                      required={!enableAutoCert}\n                    />\n                  </fieldset>\n                </Grid>\n              </Grid>\n              <Grid container style={{ marginBottom: 15 }}>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Mutual TLS authentication with MinIO\n                    </legend>\n                    <FileSelector\n                      onChange={(encodedValue, fileName) => {\n                        addFileClientCert(\"key\", fileName, encodedValue);\n                        cleanValidation(\"clientKey\");\n                      }}\n                      accept=\".key,.pem\"\n                      id=\"clientKey\"\n                      name=\"clientKey\"\n                      label=\"Key\"\n                      error={validationErrors[\"clientKey\"] || \"\"}\n                      value={clientCertificate.key}\n                      required={!enableAutoCert}\n                    />\n                    <FileSelector\n                      onChange={(encodedValue, fileName) => {\n                        addFileClientCert(\"cert\", fileName, encodedValue);\n                        cleanValidation(\"clientCert\");\n                      }}\n                      accept=\".cer,.crt,.cert,.pem\"\n                      id=\"clientCert\"\n                      name=\"clientCert\"\n                      label=\"Cert\"\n                      error={validationErrors[\"clientCert\"] || \"\"}\n                      value={clientCertificate.cert}\n                      required={!enableAutoCert}\n                    />\n                  </fieldset>\n                </Grid>\n              </Grid>\n            </Fragment>\n          )}\n          <Grid item xs={12}>\n            <Grid item xs={12} classes={classes.formFieldRow}>\n              <InputBoxWrapper\n                type=\"number\"\n                min=\"1\"\n                id=\"replicas\"\n                name=\"replicas\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  updateField(\"replicas\", e.target.value);\n                  cleanValidation(\"replicas\");\n                }}\n                label=\"Replicas\"\n                value={replicas}\n                required\n                error={validationErrors[\"replicas\"] || \"\"}\n              />\n            </Grid>\n\n            <fieldset className={classes.fieldGroup} style={{ marginTop: 15 }}>\n              <legend className={classes.descriptionText}>\n                SecurityContext for KES pods\n              </legend>\n              <Grid item xs={12} className={classes.kesSecurityContext}>\n                <div\n                  className={`${classes.multiContainer} ${classes.responsiveContainer}`}\n                >\n                  <div\n                    className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                  >\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"kes_securityContext_runAsUser\"\n                      name=\"kes_securityContext_runAsUser\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"kesSecurityContext\", {\n                          ...kesSecurityContext,\n                          runAsUser: e.target.value,\n                        });\n                        cleanValidation(\"kes_securityContext_runAsUser\");\n                      }}\n                      label=\"Run As User\"\n                      value={kesSecurityContext.runAsUser}\n                      required\n                      error={\n                        validationErrors[\"kes_securityContext_runAsUser\"] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                  <div\n                    className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                  >\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"kes_securityContext_runAsGroup\"\n                      name=\"kes_securityContext_runAsGroup\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"kesSecurityContext\", {\n                          ...kesSecurityContext,\n                          runAsGroup: e.target.value,\n                        });\n                        cleanValidation(\"kes_securityContext_runAsGroup\");\n                      }}\n                      label=\"Run As Group\"\n                      value={kesSecurityContext.runAsGroup}\n                      required\n                      error={\n                        validationErrors[\"kes_securityContext_runAsGroup\"] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                  <div\n                    className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                  >\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"kes_securityContext_fsGroup\"\n                      name=\"kes_securityContext_fsGroup\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"kesSecurityContext\", {\n                          ...kesSecurityContext,\n                          fsGroup: e.target.value,\n                        });\n                        cleanValidation(\"kes_securityContext_fsGroup\");\n                      }}\n                      label=\"FsGroup\"\n                      value={kesSecurityContext.fsGroup}\n                      required\n                      error={\n                        validationErrors[\"kes_securityContext_fsGroup\"] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                </div>\n              </Grid>\n              <br />\n              <Grid item xs={12}>\n                <div className={classes.multiContainer}>\n                  <FormSwitchWrapper\n                    value=\"kesSecurityContextRunAsNonRoot\"\n                    id=\"kes_securityContext_runAsNonRoot\"\n                    name=\"kes_securityContext_runAsNonRoot\"\n                    checked={kesSecurityContext.runAsNonRoot}\n                    onChange={(e) => {\n                      const targetD = e.target;\n                      const checked = targetD.checked;\n                      updateField(\"kesSecurityContext\", {\n                        ...kesSecurityContext,\n                        runAsNonRoot: checked,\n                      });\n                    }}\n                    label={\"Do not run as Root\"}\n                  />\n                </div>\n              </Grid>\n            </fieldset>\n          </Grid>\n        </Fragment>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  replicas: state.tenants.createTenant.fields.encryption.replicas,\n  enableEncryption:\n    state.tenants.createTenant.fields.encryption.enableEncryption,\n  encryptionType: state.tenants.createTenant.fields.encryption.encryptionType,\n  gemaltoEndpoint: state.tenants.createTenant.fields.encryption.gemaltoEndpoint,\n  gemaltoToken: state.tenants.createTenant.fields.encryption.gemaltoToken,\n  gemaltoDomain: state.tenants.createTenant.fields.encryption.gemaltoDomain,\n  gemaltoRetry: state.tenants.createTenant.fields.encryption.gemaltoRetry,\n  awsEndpoint: state.tenants.createTenant.fields.encryption.awsEndpoint,\n  awsRegion: state.tenants.createTenant.fields.encryption.awsRegion,\n  awsKMSKey: state.tenants.createTenant.fields.encryption.awsKMSKey,\n  awsAccessKey: state.tenants.createTenant.fields.encryption.awsAccessKey,\n  awsSecretKey: state.tenants.createTenant.fields.encryption.awsSecretKey,\n  awsToken: state.tenants.createTenant.fields.encryption.awsToken,\n  vaultEndpoint: state.tenants.createTenant.fields.encryption.vaultEndpoint,\n  vaultEngine: state.tenants.createTenant.fields.encryption.vaultEngine,\n  vaultNamespace: state.tenants.createTenant.fields.encryption.vaultNamespace,\n  vaultPrefix: state.tenants.createTenant.fields.encryption.vaultPrefix,\n  vaultAppRoleEngine:\n    state.tenants.createTenant.fields.encryption.vaultAppRoleEngine,\n  vaultId: state.tenants.createTenant.fields.encryption.vaultId,\n  vaultSecret: state.tenants.createTenant.fields.encryption.vaultSecret,\n  vaultRetry: state.tenants.createTenant.fields.encryption.vaultRetry,\n  vaultPing: state.tenants.createTenant.fields.encryption.vaultPing,\n  azureEndpoint: state.tenants.createTenant.fields.encryption.azureEndpoint,\n  azureTenantID: state.tenants.createTenant.fields.encryption.azureTenantID,\n  azureClientID: state.tenants.createTenant.fields.encryption.azureClientID,\n  azureClientSecret:\n    state.tenants.createTenant.fields.encryption.azureClientSecret,\n  gcpProjectID: state.tenants.createTenant.fields.encryption.gcpProjectID,\n  gcpEndpoint: state.tenants.createTenant.fields.encryption.gcpEndpoint,\n  gcpClientEmail: state.tenants.createTenant.fields.encryption.gcpClientEmail,\n  gcpClientID: state.tenants.createTenant.fields.encryption.gcpClientID,\n  gcpPrivateKeyID: state.tenants.createTenant.fields.encryption.gcpPrivateKeyID,\n  gcpPrivateKey: state.tenants.createTenant.fields.encryption.gcpPrivateKey,\n  enableCustomCertsForKES:\n    state.tenants.createTenant.fields.encryption.enableCustomCertsForKES,\n  enableAutoCert: state.tenants.createTenant.fields.security.enableAutoCert,\n  enableTLS: state.tenants.createTenant.fields.security.enableTLS,\n  minioCertificates: state.tenants.createTenant.certificates.minioCertificates,\n  serverCertificate: state.tenants.createTenant.certificates.serverCertificate,\n  clientCertificate: state.tenants.createTenant.certificates.clientCertificate,\n  vaultCertificate: state.tenants.createTenant.certificates.vaultCertificate,\n  vaultCA: state.tenants.createTenant.certificates.vaultCA,\n  gemaltoCA: state.tenants.createTenant.certificates.gemaltoCA,\n  enableCustomCerts:\n    state.tenants.createTenant.fields.security.enableCustomCerts,\n  kesSecurityContext:\n    state.tenants.createTenant.fields.encryption.kesSecurityContext,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n  addFileServerCert,\n  addFileClientCert,\n  addFileVaultCert,\n  addFileVaultCa,\n  addFileGemaltoCa,\n});\n\nexport default withStyles(styles)(connector(Encryption));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, IconButton, Paper, SelectChangeEvent } from \"@mui/material\";\nimport { AppState } from \"../../../../../store\";\nimport {\n  addNewToleration,\n  isPageValid,\n  removeToleration,\n  setKeyValuePairs,\n  setTolerationInfo,\n  updateAddField,\n} from \"../../actions\";\nimport { setModalErrorSnackMessage } from \"../../../../../actions\";\nimport {\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport {\n  ErrorResponseHandler,\n  ITolerationModel,\n} from \"../../../../../common/types\";\nimport { LabelKeyPair } from \"../../types\";\nimport RadioGroupSelector from \"../../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport api from \"../../../../../common/api\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport AddIcon from \"../../../../../icons/AddIcon\";\nimport RemoveIcon from \"../../../../../icons/RemoveIcon\";\nimport SelectWrapper from \"../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport TolerationSelector from \"../../../Common/TolerationSelector/TolerationSelector\";\n\ninterface IAffinityProps {\n  classes: any;\n  podAffinity: string;\n  nodeSelectorLabels: string;\n  withPodAntiAffinity: boolean;\n  keyValuePairs: LabelKeyPair[];\n  tolerations: ITolerationModel[];\n  setModalErrorSnackMessage: typeof setModalErrorSnackMessage;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  setKeyValuePairs: typeof setKeyValuePairs;\n  setTolerationInfo: typeof setTolerationInfo;\n  addNewToleration: typeof addNewToleration;\n  removeToleration: typeof removeToleration;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    overlayAction: {\n      marginLeft: 10,\n      display: \"flex\",\n      alignItems: \"center\",\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    affinityConfigField: {\n      display: \"flex\",\n    },\n    affinityFieldLabel: {\n      display: \"flex\",\n      flexFlow: \"column\",\n      flex: 1,\n    },\n    radioField: {\n      display: \"flex\",\n      alignItems: \"flex-start\",\n      marginTop: 10,\n      \"& div:first-child\": {\n        display: \"flex\",\n        flexFlow: \"column\",\n        alignItems: \"baseline\",\n        textAlign: \"left !important\",\n      },\n    },\n    affinityLabelKey: {\n      \"& div:first-child\": {\n        marginBottom: 0,\n      },\n    },\n    affinityLabelValue: {\n      marginLeft: 10,\n      \"& div:first-child\": {\n        marginBottom: 0,\n      },\n    },\n    rowActions: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    fieldContainer: {\n      marginBottom: 0,\n    },\n    affinityRow: {\n      marginBottom: 10,\n      display: \"flex\",\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\ninterface OptionPair {\n  label: string;\n  value: string;\n}\n\nconst Affinity = ({\n  classes,\n  podAffinity,\n  nodeSelectorLabels,\n  withPodAntiAffinity,\n  setModalErrorSnackMessage,\n  updateAddField,\n  keyValuePairs,\n  setKeyValuePairs,\n  isPageValid,\n  tolerations,\n  setTolerationInfo,\n  addNewToleration,\n  removeToleration,\n}: IAffinityProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const [loading, setLoading] = useState<boolean>(true);\n  const [keyValueMap, setKeyValueMap] = useState<{ [key: string]: string[] }>(\n    {}\n  );\n  const [keyOptions, setKeyOptions] = useState<OptionPair[]>([]);\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"affinity\", field, value);\n    },\n    [updateAddField]\n  );\n\n  useEffect(() => {\n    if (loading) {\n      api\n        .invoke(\"GET\", `/api/v1/nodes/labels`)\n        .then((res: { [key: string]: string[] }) => {\n          setLoading(false);\n          setKeyValueMap(res);\n          let keys: OptionPair[] = [];\n          for (let k in res) {\n            keys.push({\n              label: k,\n              value: k,\n            });\n          }\n          setKeyOptions(keys);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setLoading(false);\n          setModalErrorSnackMessage(err);\n          setKeyValueMap({});\n        });\n    }\n  }, [setModalErrorSnackMessage, loading]);\n\n  useEffect(() => {\n    if (keyValuePairs) {\n      const vlr = keyValuePairs\n        .filter((kvp) => kvp.key !== \"\")\n        .map((kvp) => `${kvp.key}=${kvp.value}`)\n        .filter((kvs, i, a) => a.indexOf(kvs) === i);\n      const vl = vlr.join(\"&\");\n      updateField(\"nodeSelectorLabels\", vl);\n    }\n  }, [keyValuePairs, updateField]);\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (podAffinity === \"nodeSelector\") {\n      let valid = true;\n\n      const splittedLabels = nodeSelectorLabels.split(\"&\");\n\n      if (splittedLabels.length === 1 && splittedLabels[0] === \"\") {\n        valid = false;\n      }\n\n      splittedLabels.forEach((item: string, index: number) => {\n        const splitItem = item.split(\"=\");\n\n        if (splitItem.length !== 2) {\n          valid = false;\n        }\n\n        if (index + 1 !== splittedLabels.length) {\n          if (splitItem[0] === \"\" || splitItem[1] === \"\") {\n            valid = false;\n          }\n        }\n      });\n\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"labels\",\n          required: true,\n          value: nodeSelectorLabels,\n          customValidation: !valid,\n          customValidationMessage:\n            \"You need to add at least one label key-pair\",\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    isPageValid(\"affinity\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [isPageValid, podAffinity, nodeSelectorLabels]);\n\n  const updateToleration = (index: number, field: string, value: any) => {\n    const alterToleration = { ...tolerations[index], [field]: value };\n\n    setTolerationInfo(index, alterToleration);\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Pod Placement</h3>\n        <span className={classes.descriptionText}>\n          Configure how pods will be assigned to nodes\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.affinityConfigField}>\n        <Grid item className={classes.affinityFieldLabel}>\n          <div className={classes.label}>Type</div>\n          <div\n            className={`${classes.descriptionText} ${classes.affinityHelpText}`}\n          >\n            MinIO supports multiple configurations for Pod Affinity\n          </div>\n          <Grid item className={classes.radioField}>\n            <RadioGroupSelector\n              currentSelection={podAffinity}\n              id=\"affinity-options\"\n              name=\"affinity-options\"\n              label={\" \"}\n              onChange={(e) => {\n                updateField(\"podAffinity\", e.target.value);\n              }}\n              selectorOptions={[\n                { label: \"None\", value: \"none\" },\n                { label: \"Default (Pod Anti-Affinity)\", value: \"default\" },\n                { label: \"Node Selector\", value: \"nodeSelector\" },\n              ]}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n      {podAffinity === \"nodeSelector\" && (\n        <Fragment>\n          <br />\n          <Grid item xs={12}>\n            <FormSwitchWrapper\n              value=\"with_pod_anti_affinity\"\n              id=\"with_pod_anti_affinity\"\n              name=\"with_pod_anti_affinity\"\n              checked={withPodAntiAffinity}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n\n                updateField(\"withPodAntiAffinity\", checked);\n              }}\n              label={\"With Pod Anti-Affinity\"}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <h3>Labels</h3>\n            <span className={classes.error}>{validationErrors[\"labels\"]}</span>\n            <Grid container>\n              {keyValuePairs &&\n                keyValuePairs.map((kvp, i) => {\n                  return (\n                    <Grid\n                      item\n                      xs={12}\n                      className={classes.affinityRow}\n                      key={`affinity-keyVal-${i.toString()}`}\n                    >\n                      <Grid item xs={5} className={classes.affinityLabelKey}>\n                        {keyOptions.length > 0 && (\n                          <SelectWrapper\n                            onChange={(e: SelectChangeEvent<string>) => {\n                              const newKey = e.target.value as string;\n                              const arrCp: LabelKeyPair[] = Object.assign(\n                                [],\n                                keyValuePairs\n                              );\n\n                              arrCp[i].key = e.target.value as string;\n                              arrCp[i].value = keyValueMap[newKey][0];\n                              setKeyValuePairs(arrCp);\n                            }}\n                            id=\"select-access-policy\"\n                            name=\"select-access-policy\"\n                            label={\"\"}\n                            value={kvp.key}\n                            options={keyOptions}\n                          />\n                        )}\n                        {keyOptions.length === 0 && (\n                          <InputBoxWrapper\n                            id={`nodeselector-key-${i.toString()}`}\n                            label={\"\"}\n                            name={`nodeselector-${i.toString()}`}\n                            value={kvp.key}\n                            onChange={(e) => {\n                              const arrCp: LabelKeyPair[] = Object.assign(\n                                [],\n                                keyValuePairs\n                              );\n                              arrCp[i].key = e.target.value;\n                              setKeyValuePairs(arrCp);\n                            }}\n                            index={i}\n                            placeholder={\"Key\"}\n                          />\n                        )}\n                      </Grid>\n                      <Grid item xs={5} className={classes.affinityLabelValue}>\n                        {keyOptions.length > 0 && (\n                          <SelectWrapper\n                            onChange={(e: SelectChangeEvent<string>) => {\n                              const arrCp: LabelKeyPair[] = Object.assign(\n                                [],\n                                keyValuePairs\n                              );\n                              arrCp[i].value = e.target.value as string;\n                              setKeyValuePairs(arrCp);\n                            }}\n                            id=\"select-access-policy\"\n                            name=\"select-access-policy\"\n                            label={\"\"}\n                            value={kvp.value}\n                            options={\n                              keyValueMap[kvp.key]\n                                ? keyValueMap[kvp.key].map((v) => {\n                                    return { label: v, value: v };\n                                  })\n                                : []\n                            }\n                          />\n                        )}\n                        {keyOptions.length === 0 && (\n                          <InputBoxWrapper\n                            id={`nodeselector-value-${i.toString()}`}\n                            label={\"\"}\n                            name={`nodeselector-${i.toString()}`}\n                            value={kvp.value}\n                            onChange={(e) => {\n                              const arrCp: LabelKeyPair[] = Object.assign(\n                                [],\n                                keyValuePairs\n                              );\n                              arrCp[i].value = e.target.value;\n                              setKeyValuePairs(arrCp);\n                            }}\n                            index={i}\n                            placeholder={\"value\"}\n                          />\n                        )}\n                      </Grid>\n                      <Grid item xs={2} className={classes.rowActions}>\n                        <div className={classes.overlayAction}>\n                          <IconButton\n                            size={\"small\"}\n                            onClick={() => {\n                              const arrCp = Object.assign([], keyValuePairs);\n                              if (keyOptions.length > 0) {\n                                arrCp.push({\n                                  key: keyOptions[0].value,\n                                  value: keyValueMap[keyOptions[0].value][0],\n                                });\n                              } else {\n                                arrCp.push({ key: \"\", value: \"\" });\n                              }\n\n                              setKeyValuePairs(arrCp);\n                            }}\n                          >\n                            <AddIcon />\n                          </IconButton>\n                        </div>\n                        {keyValuePairs.length > 1 && (\n                          <div className={classes.overlayAction}>\n                            <IconButton\n                              size={\"small\"}\n                              onClick={() => {\n                                const arrCp = keyValuePairs.filter(\n                                  (item, index) => index !== i\n                                );\n                                setKeyValuePairs(arrCp);\n                              }}\n                            >\n                              <RemoveIcon />\n                            </IconButton>\n                          </div>\n                        )}\n                      </Grid>\n                    </Grid>\n                  );\n                })}\n            </Grid>\n          </Grid>\n        </Fragment>\n      )}\n      <Grid item xs={12} className={classes.affinityConfigField}>\n        <Grid item className={classes.affinityFieldLabel}>\n          <h3>Tolerations</h3>\n          <span className={classes.error}>\n            {validationErrors[\"tolerations\"]}\n          </span>\n          <Grid container>\n            {tolerations &&\n              tolerations.map((tol, i) => {\n                return (\n                  <Grid\n                    item\n                    xs={12}\n                    className={classes.affinityRow}\n                    key={`affinity-keyVal-${i.toString()}`}\n                  >\n                    <TolerationSelector\n                      effect={tol.effect}\n                      onEffectChange={(value) => {\n                        updateToleration(i, \"effect\", value);\n                      }}\n                      tolerationKey={tol.key}\n                      onTolerationKeyChange={(value) => {\n                        updateToleration(i, \"key\", value);\n                      }}\n                      operator={tol.operator}\n                      onOperatorChange={(value) => {\n                        updateToleration(i, \"operator\", value);\n                      }}\n                      value={tol.value}\n                      onValueChange={(value) => {\n                        updateToleration(i, \"value\", value);\n                      }}\n                      tolerationSeconds={tol.tolerationSeconds?.seconds || 0}\n                      onSecondsChange={(value) => {\n                        updateToleration(i, \"tolerationSeconds\", {\n                          seconds: value,\n                        });\n                      }}\n                      index={i}\n                    />\n                    <div className={classes.overlayAction}>\n                      <IconButton\n                        size={\"small\"}\n                        onClick={addNewToleration}\n                        disabled={i !== tolerations.length - 1}\n                      >\n                        <AddIcon />\n                      </IconButton>\n                    </div>\n\n                    <div className={classes.overlayAction}>\n                      <IconButton\n                        size={\"small\"}\n                        onClick={() => removeToleration(i)}\n                        disabled={tolerations.length <= 1}\n                      >\n                        <RemoveIcon />\n                      </IconButton>\n                    </div>\n                  </Grid>\n                );\n              })}\n          </Grid>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => {\n  const createTenant = state.tenants.createTenant;\n\n  return {\n    podAffinity: createTenant.fields.affinity.podAffinity,\n    nodeSelectorLabels: createTenant.fields.affinity.nodeSelectorLabels,\n    withPodAntiAffinity: createTenant.fields.affinity.withPodAntiAffinity,\n    keyValuePairs: createTenant.nodeSelectorPairs,\n    tolerations: createTenant.tolerations,\n  };\n};\n\nconst connector = connect(mapState, {\n  setModalErrorSnackMessage,\n  updateAddField,\n  isPageValid,\n  setKeyValuePairs,\n  setTolerationInfo,\n  addNewToleration,\n  removeToleration,\n});\n\nexport default withStyles(styles)(connector(Affinity));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, Paper } from \"@mui/material\";\nimport {\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\n\ninterface IImagesProps {\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  storageClasses: any;\n  classes: any;\n  customImage: boolean;\n  imageName: string;\n  customDockerhub: boolean;\n  imageRegistry: string;\n  imageRegistryUsername: string;\n  imageRegistryPassword: string;\n  exposeMinIO: boolean;\n  exposeConsole: boolean;\n  prometheusCustom: boolean;\n  tenantCustom: boolean;\n  logSearchCustom: boolean;\n  logSearchVolumeSize: string;\n  logSearchSizeFactor: string;\n  prometheusVolumeSize: string;\n  prometheusSizeFactor: string;\n  logSearchSelectedStorageClass: string;\n  logSearchImage: string;\n  kesImage: string;\n  logSearchPostgresImage: string;\n  logSearchPostgresInitImage: string;\n  prometheusSelectedStorageClass: string;\n  prometheusImage: string;\n  prometheusSidecarImage: string;\n  prometheusInitImage: string;\n  selectedStorageClass: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst Images = ({\n  classes,\n  storageClasses,\n  customImage,\n  imageName,\n  customDockerhub,\n  imageRegistry,\n  imageRegistryUsername,\n  imageRegistryPassword,\n  exposeMinIO,\n  exposeConsole,\n  prometheusCustom,\n  tenantCustom,\n  logSearchCustom,\n  logSearchVolumeSize,\n  logSearchSizeFactor,\n  logSearchImage,\n  kesImage,\n  logSearchPostgresImage,\n  logSearchPostgresInitImage,\n  prometheusVolumeSize,\n  prometheusSizeFactor,\n  logSearchSelectedStorageClass,\n  prometheusSelectedStorageClass,\n  prometheusImage,\n  prometheusSidecarImage,\n  prometheusInitImage,\n  updateAddField,\n  isPageValid,\n  selectedStorageClass,\n}: IImagesProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"configure\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (prometheusCustom) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"prometheus_storage_class\",\n          required: true,\n          value: prometheusSelectedStorageClass,\n          customValidation: prometheusSelectedStorageClass === \"\",\n          customValidationMessage: \"Field cannot be empty\",\n        },\n        {\n          fieldKey: \"prometheus_volume_size\",\n          required: true,\n          value: prometheusVolumeSize,\n          customValidation:\n            prometheusVolumeSize === \"\" || parseInt(prometheusVolumeSize) <= 0,\n          customValidationMessage: `Volume size must be present and be greatter than 0`,\n        },\n      ];\n    }\n    if (logSearchCustom) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"log_search_storage_class\",\n          required: true,\n          value: logSearchSelectedStorageClass,\n          customValidation: logSearchSelectedStorageClass === \"\",\n          customValidationMessage: \"Field cannot be empty\",\n        },\n        {\n          fieldKey: \"log_search_volume_size\",\n          required: true,\n          value: logSearchVolumeSize,\n          customValidation:\n            logSearchVolumeSize === \"\" || parseInt(logSearchVolumeSize) <= 0,\n          customValidationMessage: `Volume size must be present and be greatter than 0`,\n        },\n      ];\n    }\n\n    if (customImage) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"image\",\n          required: false,\n          value: imageName,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage: \"Format must be of form: 'minio/minio:VERSION'\",\n        },\n        {\n          fieldKey: \"logSearchImage\",\n          required: false,\n          value: logSearchImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'minio/operator:VERSION'\",\n        },\n        {\n          fieldKey: \"kesImage\",\n          required: false,\n          value: kesImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage: \"Format must be of form: 'minio/kes:VERSION'\",\n        },\n        {\n          fieldKey: \"logSearchPostgresImage\",\n          required: false,\n          value: logSearchPostgresImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'library/postgres:VERSION'\",\n        },\n        {\n          fieldKey: \"logSearchPostgresInitImage\",\n          required: false,\n          value: logSearchPostgresInitImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'library/busybox:VERSION'\",\n        },\n        {\n          fieldKey: \"prometheusImage\",\n          required: false,\n          value: prometheusImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'minio/prometheus:VERSION'\",\n        },\n        {\n          fieldKey: \"prometheusSidecarImage\",\n          required: false,\n          value: prometheusSidecarImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'project/container:VERSION'\",\n        },\n        {\n          fieldKey: \"prometheusInitImage\",\n          required: false,\n          value: prometheusInitImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'library/busybox:VERSION'\",\n        },\n      ];\n      if (customDockerhub) {\n        customAccountValidation = [\n          ...customAccountValidation,\n          {\n            fieldKey: \"registry\",\n            required: true,\n            value: imageRegistry,\n          },\n          {\n            fieldKey: \"registryUsername\",\n            required: true,\n            value: imageRegistryUsername,\n          },\n          {\n            fieldKey: \"registryPassword\",\n            required: true,\n            value: imageRegistryPassword,\n          },\n        ];\n      }\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    isPageValid(\"configure\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    customImage,\n    imageName,\n    logSearchImage,\n    kesImage,\n    logSearchPostgresImage,\n    logSearchPostgresInitImage,\n    prometheusImage,\n    prometheusSidecarImage,\n    prometheusInitImage,\n    customDockerhub,\n    imageRegistry,\n    imageRegistryUsername,\n    imageRegistryPassword,\n    isPageValid,\n    prometheusCustom,\n    tenantCustom,\n    logSearchCustom,\n    prometheusSelectedStorageClass,\n    prometheusVolumeSize,\n    logSearchSelectedStorageClass,\n    logSearchVolumeSize,\n  ]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Container Images</h3>\n        <span className={classes.descriptionText}>\n          Specify the container images used by the Tenant and it's features.\n        </span>\n      </div>\n\n      <Fragment>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"image\"\n            name=\"image\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"imageName\", e.target.value);\n              cleanValidation(\"image\");\n            }}\n            label=\"MinIO\"\n            value={imageName}\n            error={validationErrors[\"image\"] || \"\"}\n            placeholder=\"E.g. minio/minio:RELEASE.2022-02-26T02-54-46Z\"\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"kesImage\"\n            name=\"kesImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"kesImage\", e.target.value);\n              cleanValidation(\"kesImage\");\n            }}\n            label=\"KES\"\n            value={kesImage}\n            error={validationErrors[\"kesImage\"] || \"\"}\n            placeholder=\"E.g. minio/kes:v0.17.6\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <h4>Log Search</h4>\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"logSearchImage\"\n            name=\"logSearchImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"logSearchImage\", e.target.value);\n              cleanValidation(\"logSearchImage\");\n            }}\n            label=\"API\"\n            value={logSearchImage}\n            error={validationErrors[\"logSearchImage\"] || \"\"}\n            placeholder=\"E.g. minio/operator:v4.4.10\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"logSearchPostgresImage\"\n            name=\"logSearchPostgresImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"logSearchPostgresImage\", e.target.value);\n              cleanValidation(\"logSearchPostgresImage\");\n            }}\n            label=\"PostgreSQL\"\n            value={logSearchPostgresImage}\n            error={validationErrors[\"logSearchPostgresImage\"] || \"\"}\n            placeholder=\"E.g. library/postgres:13\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"logSearchPostgresInitImage\"\n            name=\"logSearchPostgresInitImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"logSearchPostgresInitImage\", e.target.value);\n              cleanValidation(\"logSearchPostgresInitImage\");\n            }}\n            label=\"PostgreSQL Init\"\n            value={logSearchPostgresInitImage}\n            error={validationErrors[\"logSearchPostgresInitImage\"] || \"\"}\n            placeholder=\"E.g. library/busybox:1.33.1\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <h4>Monitoring</h4>\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"prometheusImage\"\n            name=\"prometheusImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"prometheusImage\", e.target.value);\n              cleanValidation(\"prometheusImage\");\n            }}\n            label=\"Prometheus\"\n            value={prometheusImage}\n            error={validationErrors[\"prometheusImage\"] || \"\"}\n            placeholder=\"E.g. quay.io/prometheus/prometheus:latest\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"prometheusSidecarImage\"\n            name=\"prometheusSidecarImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"prometheusSidecarImage\", e.target.value);\n              cleanValidation(\"prometheusSidecarImage\");\n            }}\n            label=\"Prometheus Sidecar\"\n            value={prometheusSidecarImage}\n            error={validationErrors[\"prometheusSidecarImage\"] || \"\"}\n            placeholder=\"E.g. quay.io/prometheus/prometheus:latest\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"prometheusInitImage\"\n            name=\"prometheusInitImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"prometheusInitImage\", e.target.value);\n              cleanValidation(\"prometheusInitImage\");\n            }}\n            label=\"Prometheus Init\"\n            value={prometheusInitImage}\n            error={validationErrors[\"prometheusInitImage\"] || \"\"}\n            placeholder=\"E.g. quay.io/prometheus/prometheus:latest\"\n          />\n        </Grid>\n      </Fragment>\n\n      {customImage && (\n        <Fragment>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <h4>Custom Container Registry</h4>\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <FormSwitchWrapper\n              value=\"custom_docker_hub\"\n              id=\"custom_docker_hub\"\n              name=\"custom_docker_hub\"\n              checked={customDockerhub}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n\n                updateField(\"customDockerhub\", checked);\n              }}\n              label={\"Use a private container registry\"}\n            />\n          </Grid>\n        </Fragment>\n      )}\n      {customDockerhub && (\n        <Fragment>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"registry\"\n              name=\"registry\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"imageRegistry\", e.target.value);\n              }}\n              label=\"Endpoint\"\n              value={imageRegistry}\n              error={validationErrors[\"registry\"] || \"\"}\n              placeholder=\"E.g. https://index.docker.io/v1/\"\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"registryUsername\"\n              name=\"registryUsername\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"imageRegistryUsername\", e.target.value);\n              }}\n              label=\"Username\"\n              value={imageRegistryUsername}\n              error={validationErrors[\"registryUsername\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"registryPassword\"\n              name=\"registryPassword\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"imageRegistryPassword\", e.target.value);\n              }}\n              label=\"Password\"\n              value={imageRegistryPassword}\n              error={validationErrors[\"registryPassword\"] || \"\"}\n              required\n            />\n          </Grid>\n        </Fragment>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  storageClasses: state.tenants.createTenant.storageClasses,\n  customImage: state.tenants.createTenant.fields.configure.customImage,\n  imageName: state.tenants.createTenant.fields.configure.imageName,\n  customDockerhub: state.tenants.createTenant.fields.configure.customDockerhub,\n  imageRegistry: state.tenants.createTenant.fields.configure.imageRegistry,\n  imageRegistryUsername:\n    state.tenants.createTenant.fields.configure.imageRegistryUsername,\n  imageRegistryPassword:\n    state.tenants.createTenant.fields.configure.imageRegistryPassword,\n  exposeMinIO: state.tenants.createTenant.fields.configure.exposeMinIO,\n  exposeConsole: state.tenants.createTenant.fields.configure.exposeConsole,\n  prometheusCustom:\n    state.tenants.createTenant.fields.configure.prometheusEnabled,\n  tenantCustom: state.tenants.createTenant.fields.configure.tenantCustom,\n  logSearchCustom: state.tenants.createTenant.fields.configure.logSearchEnabled,\n  logSearchVolumeSize:\n    state.tenants.createTenant.fields.configure.logSearchVolumeSize,\n  logSearchSizeFactor:\n    state.tenants.createTenant.fields.configure.logSearchSizeFactor,\n  prometheusVolumeSize:\n    state.tenants.createTenant.fields.configure.prometheusVolumeSize,\n  prometheusSizeFactor:\n    state.tenants.createTenant.fields.configure.prometheusSizeFactor,\n  logSearchSelectedStorageClass:\n    state.tenants.createTenant.fields.configure.logSearchSelectedStorageClass,\n  logSearchImage: state.tenants.createTenant.fields.configure.logSearchImage,\n  kesImage: state.tenants.createTenant.fields.configure.kesImage,\n  logSearchPostgresImage:\n    state.tenants.createTenant.fields.configure.logSearchPostgresImage,\n  logSearchPostgresInitImage:\n    state.tenants.createTenant.fields.configure.logSearchPostgresInitImage,\n  prometheusSelectedStorageClass:\n    state.tenants.createTenant.fields.configure.prometheusSelectedStorageClass,\n  prometheusImage: state.tenants.createTenant.fields.configure.prometheusImage,\n  prometheusSidecarImage:\n    state.tenants.createTenant.fields.configure.prometheusSidecarImage,\n  prometheusInitImage:\n    state.tenants.createTenant.fields.configure.prometheusInitImage,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(Images));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { DialogContentText, LinearProgress } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  deleteDialogStyles,\n  modalBasic,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport { setErrorSnackMessage } from \"../../../../../../actions\";\nimport { ErrorResponseHandler } from \"../../../../../../common/types\";\nimport api from \"../../../../../../common/api\";\nimport ConfirmDialog from \"../../../../Common/ModalWrapper/ConfirmDialog\";\nimport { ConfirmModalIcon } from \"../../../../../../icons\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    wrapText: {\n      maxWidth: \"200px\",\n      whiteSpace: \"normal\",\n      wordWrap: \"break-word\",\n    },\n    ...modalBasic,\n    ...deleteDialogStyles,\n  });\n\ninterface IAddNamespace {\n  classes: any;\n  namespace: string;\n  addNamespaceOpen: boolean;\n  closeAddNamespaceModalAndRefresh: (reloadNamespaceData: boolean) => void;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n}\n\nconst AddNamespaceModal = ({\n  classes,\n  namespace,\n  addNamespaceOpen,\n  closeAddNamespaceModalAndRefresh,\n  setErrorSnackMessage,\n}: IAddNamespace) => {\n  const [addNamespaceLoading, setAddNamespaceLoading] =\n    useState<boolean>(false);\n\n  useEffect(() => {\n    if (addNamespaceLoading) {\n      api\n        .invoke(\"POST\", \"/api/v1/namespace\", {\n          name: namespace,\n        })\n        .then((res) => {\n          setAddNamespaceLoading(false);\n          closeAddNamespaceModalAndRefresh(true);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setAddNamespaceLoading(false);\n          setErrorSnackMessage(err);\n        });\n    }\n  }, [\n    addNamespaceLoading,\n    closeAddNamespaceModalAndRefresh,\n    namespace,\n    setErrorSnackMessage,\n  ]);\n\n  const addNamespace = () => {\n    setAddNamespaceLoading(true);\n  };\n\n  return (\n    <ConfirmDialog\n      title={`New namespace`}\n      confirmText={\"Create\"}\n      confirmButtonProps={{\n        color: \"primary\",\n        variant: \"contained\",\n      }}\n      isOpen={addNamespaceOpen}\n      titleIcon={<ConfirmModalIcon />}\n      isLoading={addNamespaceLoading}\n      onConfirm={addNamespace}\n      onClose={() => {\n        closeAddNamespaceModalAndRefresh(false);\n      }}\n      confirmationContent={\n        <React.Fragment>\n          {addNamespaceLoading && <LinearProgress />}\n          <DialogContentText>\n            Are you sure you want to add a namespace called\n            <br />\n            <b className={classes.wrapText}>{namespace}</b>?\n          </DialogContentText>\n        </React.Fragment>\n      }\n    />\n  );\n};\n\nconst mapDispatchToProps = {\n  setErrorSnackMessage,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default withStyles(styles)(connector(AddNamespaceModal));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { AppState } from \"../../../../../store\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport {\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { niceBytes } from \"../../../../../common/utils\";\nimport { Opts } from \"../../ListTenants/utils\";\nimport { IResourcesSize } from \"../../ListTenants/types\";\nimport { IErasureCodeCalc } from \"../../../../../common/types\";\n\nimport { Divider } from \"@mui/material\";\nimport { IntegrationConfiguration } from \"./TenantResources/utils\";\n\ninterface ISizePreviewProps {\n  classes: any;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  volumeSize: string;\n  sizeFactor: string;\n  drivesPerServer: string;\n  nodes: string;\n  memoryNode: string;\n  ecParity: string;\n  ecParityChoices: Opts[];\n  cleanECChoices: string[];\n  resourcesSize: IResourcesSize;\n  distribution: any;\n  ecParityCalc: IErasureCodeCalc;\n  limitSize: any;\n  selectedStorageClass: string;\n  cpuToUse: string;\n  integrationSelection: IntegrationConfiguration;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 4,\n    },\n    table: {\n      \"& .MuiTableCell-root\": {\n        fontSize: 13,\n      },\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst SizePreview = ({\n  classes,\n  nodes,\n  memoryNode,\n  ecParity,\n  distribution,\n  ecParityCalc,\n  cpuToUse,\n  integrationSelection,\n}: ISizePreviewProps) => {\n  const usableInformation = ecParityCalc.storageFactors.find(\n    (element) => element.erasureCode === ecParity\n  );\n\n  return (\n    <div className={classes.root}>\n      <h4>Resource Allocation</h4>\n      <Divider />\n      <Table className={classes.table} aria-label=\"simple table\" size={\"small\"}>\n        <TableBody>\n          <TableRow>\n            <TableCell scope=\"row\">Number of Servers</TableCell>\n            <TableCell align=\"right\">\n              {parseInt(nodes) > 0 ? nodes : \"-\"}\n            </TableCell>\n          </TableRow>\n          {integrationSelection.typeSelection === \"\" &&\n            integrationSelection.storageClass === \"\" && (\n              <Fragment>\n                <TableRow>\n                  <TableCell scope=\"row\">Drives per Server</TableCell>\n                  <TableCell align=\"right\">\n                    {distribution ? distribution.disks : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell scope=\"row\">Drive Capacity</TableCell>\n                  <TableCell align=\"right\">\n                    {distribution ? niceBytes(distribution.pvSize) : \"-\"}\n                  </TableCell>\n                </TableRow>\n              </Fragment>\n            )}\n\n          <TableRow>\n            <TableCell scope=\"row\">Total Volumes</TableCell>\n            <TableCell align=\"right\">\n              {distribution ? distribution.persistentVolumes : \"-\"}\n            </TableCell>\n          </TableRow>\n          {integrationSelection.typeSelection === \"\" &&\n            integrationSelection.storageClass === \"\" && (\n              <Fragment>\n                <TableRow>\n                  <TableCell scope=\"row\">Memory per Node</TableCell>\n                  <TableCell align=\"right\">{memoryNode} Gi</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell style={{ borderBottom: 0 }} scope=\"row\">\n                    CPU Selection\n                  </TableCell>\n                  <TableCell style={{ borderBottom: 0 }} align=\"right\">\n                    {cpuToUse}\n                  </TableCell>\n                </TableRow>\n              </Fragment>\n            )}\n        </TableBody>\n      </Table>\n      {ecParityCalc.error === 0 && usableInformation && (\n        <Fragment>\n          <h4>Erasure Code Configuration</h4>\n          <Divider />\n          <Table\n            className={classes.table}\n            aria-label=\"simple table\"\n            size={\"small\"}\n          >\n            <TableBody>\n              <TableRow>\n                <TableCell scope=\"row\">EC Parity</TableCell>\n                <TableCell align=\"right\">\n                  {ecParity !== \"\" ? ecParity : \"-\"}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell scope=\"row\">Raw Capacity</TableCell>\n                <TableCell align=\"right\">\n                  {niceBytes(ecParityCalc.rawCapacity)}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell scope=\"row\">Usable Capacity</TableCell>\n                <TableCell align=\"right\">\n                  {niceBytes(usableInformation.maxCapacity)}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell style={{ borderBottom: 0 }} scope=\"row\">\n                  Server Failures Tolerated\n                </TableCell>\n                <TableCell style={{ borderBottom: 0 }} align=\"right\">\n                  {distribution\n                    ? Math.floor(\n                        usableInformation.maxFailureTolerations /\n                          distribution.disks\n                      )\n                    : \"-\"}\n                </TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </Fragment>\n      )}\n      {integrationSelection.typeSelection !== \"\" &&\n        integrationSelection.storageClass !== \"\" && (\n          <Fragment>\n            <h4>Single Instance Configuration</h4>\n            <Divider />\n            <Table\n              className={classes.table}\n              aria-label=\"simple table\"\n              size={\"small\"}\n            >\n              <TableBody>\n                <TableRow>\n                  <TableCell scope=\"row\">CPU</TableCell>\n                  <TableCell align=\"right\">\n                    {integrationSelection.CPU !== 0\n                      ? integrationSelection.CPU\n                      : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell scope=\"row\">Memory</TableCell>\n                  <TableCell align=\"right\">\n                    {integrationSelection.memory !== 0\n                      ? `${integrationSelection.memory} Gi`\n                      : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell scope=\"row\">Drives per Server</TableCell>\n                  <TableCell align=\"right\">\n                    {integrationSelection.drivesPerServer !== 0\n                      ? `${integrationSelection.drivesPerServer}`\n                      : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell style={{ borderBottom: 0 }} scope=\"row\">\n                    Drive Size\n                  </TableCell>\n                  <TableCell style={{ borderBottom: 0 }} align=\"right\">\n                    {integrationSelection.driveSize.driveSize}\n                    {integrationSelection.driveSize.sizeUnit}\n                  </TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </Fragment>\n        )}\n    </div>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  volumeSize: state.tenants.createTenant.fields.tenantSize.volumeSize,\n  sizeFactor: state.tenants.createTenant.fields.tenantSize.sizeFactor,\n  drivesPerServer: state.tenants.createTenant.fields.tenantSize.drivesPerServer,\n  nodes: state.tenants.createTenant.fields.tenantSize.nodes,\n  memoryNode:\n    state.tenants.createTenant.fields.tenantSize.resourcesMemoryRequest,\n  ecParity: state.tenants.createTenant.fields.tenantSize.ecParity,\n  ecParityChoices: state.tenants.createTenant.fields.tenantSize.ecParityChoices,\n  cleanECChoices: state.tenants.createTenant.fields.tenantSize.cleanECChoices,\n  resourcesSize: state.tenants.createTenant.fields.tenantSize.resourcesSize,\n  distribution: state.tenants.createTenant.fields.tenantSize.distribution,\n  ecParityCalc: state.tenants.createTenant.fields.tenantSize.ecParityCalc,\n  limitSize: state.tenants.createTenant.fields.tenantSize.limitSize,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n  cpuToUse: state.tenants.createTenant.fields.tenantSize.resourcesCPURequest,\n  integrationSelection:\n    state.tenants.createTenant.fields.tenantSize.integrationSelection,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(SizePreview));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, {\n  Fragment,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport get from \"lodash/get\";\nimport debounce from \"lodash/debounce\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport { setModalErrorSnackMessage } from \"../../../../../../actions\";\nimport {\n  isPageValid,\n  setLimitSize,\n  setStorageType,\n  setStorageClassesList,\n  updateAddField,\n} from \"../../../actions\";\nimport {\n  getLimitSizes,\n  IQuotaElement,\n  IQuotas,\n  Opts,\n} from \"../../../ListTenants/utils\";\nimport { AppState } from \"../../../../../../store\";\nimport { commonFormValidation } from \"../../../../../../utils/validationFunctions\";\nimport { clearValidationError } from \"../../../utils\";\nimport { ErrorResponseHandler } from \"../../../../../../common/types\";\nimport api from \"../../../../../../common/api\";\nimport InputBoxWrapper from \"../../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport SelectWrapper from \"../../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport AddIcon from \"../../../../../../icons/AddIcon\";\nimport AddNamespaceModal from \"../helpers/AddNamespaceModal\";\nimport SizePreview from \"../SizePreview\";\nimport TenantSize from \"./TenantSize\";\nimport { Paper, SelectChangeEvent } from \"@mui/material\";\nimport { IMkEnvs, mkPanelConfigurations } from \"./utils\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    sizePreview: {\n      position: \"fixed\",\n      marginLeft: 10,\n      background: \"#FFFFFF\",\n      border: \"1px solid #EAEAEA\",\n      padding: 2,\n    },\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\ninterface INameTenantMainScreen {\n  classes: any;\n  storageClasses: Opts[];\n  setModalErrorSnackMessage: typeof setModalErrorSnackMessage;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  setStorageClassesList: typeof setStorageClassesList;\n  setLimitSize: typeof setLimitSize;\n  tenantName: string;\n  namespace: string;\n  selectedStorageClass: string;\n  selectedStorageType: string;\n  formToRender?: IMkEnvs;\n  features?: string[];\n  setStorageType: typeof setStorageType;\n}\n\nconst NameTenantMain = ({\n  classes,\n  storageClasses,\n  tenantName,\n  namespace,\n  selectedStorageClass,\n  selectedStorageType,\n  formToRender = IMkEnvs.default,\n  updateAddField,\n  setStorageClassesList,\n  setLimitSize,\n  isPageValid,\n  setModalErrorSnackMessage,\n  features,\n  setStorageType,\n}: INameTenantMainScreen) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const [emptyNamespace, setEmptyNamespace] = useState<boolean>(true);\n  const [loadingNamespaceInfo, setLoadingNamespaceInfo] =\n    useState<boolean>(false);\n  const [showCreateButton, setShowCreateButton] = useState<boolean>(false);\n  const [openAddNSConfirm, setOpenAddNSConfirm] = useState<boolean>(false);\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: string) => {\n      updateAddField(\"nameTenant\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Storage classes retrieval\n  const getNamespaceInformation = useCallback(() => {\n    setShowCreateButton(false);\n    // Empty tenantValidation\n    api\n      .invoke(\"GET\", `/api/v1/namespaces/${namespace}/tenants`)\n      .then((res: any[]) => {\n        const tenantsList = get(res, \"tenants\", []);\n\n        if (tenantsList && tenantsList.length > 0) {\n          setEmptyNamespace(false);\n          setLoadingNamespaceInfo(false);\n          return;\n        }\n        setEmptyNamespace(true);\n\n        // Storagequotas retrieval\n        api\n          .invoke(\n            \"GET\",\n            `/api/v1/namespaces/${namespace}/resourcequotas/${namespace}-storagequota`\n          )\n          .then((res: IQuotas) => {\n            const elements: IQuotaElement[] = get(res, \"elements\", []);\n            setLimitSize(getLimitSizes(res));\n\n            const newStorage = elements.map((storageClass: any) => {\n              const name = get(storageClass, \"name\", \"\").split(\n                \".storageclass.storage.k8s.io/requests.storage\"\n              )[0];\n\n              return { label: name, value: name };\n            });\n\n            setStorageClassesList(newStorage);\n\n            const stExists = newStorage.findIndex(\n              (storageClass) => storageClass.value === selectedStorageClass\n            );\n\n            if (newStorage.length > 0 && stExists === -1) {\n              updateField(\"selectedStorageClass\", newStorage[0].value);\n            } else if (newStorage.length === 0) {\n              updateField(\"selectedStorageClass\", \"\");\n              setStorageClassesList([]);\n            }\n            setLoadingNamespaceInfo(false);\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setLoadingNamespaceInfo(false);\n            setShowCreateButton(true);\n            updateField(\"selectedStorageClass\", \"\");\n            setStorageClassesList([]);\n            console.error(\"Namespace error: \", err);\n          });\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setModalErrorSnackMessage({\n          errorMessage: \"Error validating if namespace already has tenants\",\n          detailedError: err.detailedError,\n        });\n      });\n  }, [\n    namespace,\n    setLimitSize,\n    setModalErrorSnackMessage,\n    setStorageClassesList,\n    updateField,\n    selectedStorageClass,\n  ]);\n\n  const debounceNamespace = useMemo(\n    () => debounce(getNamespaceInformation, 500),\n    [getNamespaceInformation]\n  );\n\n  useEffect(() => {\n    if (namespace !== \"\") {\n      debounceNamespace();\n      setLoadingNamespaceInfo(true);\n\n      // Cancel previous debounce calls during useEffect cleanup.\n      return debounceNamespace.cancel;\n    }\n  }, [debounceNamespace, namespace]);\n\n  // Validation\n  useEffect(() => {\n    let customNamespaceError = false;\n    let errorMessage = \"\";\n\n    if (!emptyNamespace && !loadingNamespaceInfo) {\n      customNamespaceError = true;\n      errorMessage = \"You can only create one tenant per namespace\";\n    } else if (\n      storageClasses.length < 1 &&\n      emptyNamespace &&\n      !loadingNamespaceInfo\n    ) {\n      customNamespaceError = true;\n      errorMessage = \"Please enter a valid namespace\";\n    }\n\n    const commonValidation = commonFormValidation([\n      {\n        fieldKey: \"tenant-name\",\n        required: true,\n        pattern: /^[a-z0-9-]{3,63}$/,\n        customPatternMessage:\n          \"Name only can contain lowercase letters, numbers and '-'. Min. Length: 3\",\n        value: tenantName,\n      },\n      {\n        fieldKey: \"namespace\",\n        required: true,\n        value: namespace,\n        customValidation: customNamespaceError,\n        customValidationMessage: errorMessage,\n      },\n    ]);\n\n    const isValid =\n      !(\"tenant-name\" in commonValidation) &&\n      !(\"namespace\" in commonValidation) &&\n      ((formToRender === IMkEnvs.default && storageClasses.length > 0) ||\n        (formToRender !== IMkEnvs.default && selectedStorageType !== \"\"));\n\n    isPageValid(\"nameTenant\", isValid);\n\n    setValidationErrors(commonValidation);\n  }, [\n    storageClasses,\n    namespace,\n    tenantName,\n    isPageValid,\n    emptyNamespace,\n    loadingNamespaceInfo,\n    selectedStorageType,\n    formToRender,\n  ]);\n\n  const frmValidationCleanup = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  const addNamespace = () => {\n    setOpenAddNSConfirm(true);\n  };\n\n  const closeAddNamespace = (refresh: boolean) => {\n    setOpenAddNSConfirm(false);\n\n    if (refresh) {\n      debounceNamespace();\n    }\n  };\n\n  return (\n    <Fragment>\n      {openAddNSConfirm && (\n        <AddNamespaceModal\n          addNamespaceOpen={openAddNSConfirm}\n          closeAddNamespaceModalAndRefresh={closeAddNamespace}\n          namespace={namespace}\n        />\n      )}\n      <Grid container>\n        <Grid item xs={8} md={9}>\n          <Paper className={classes.paperWrapper} sx={{ minHeight: 550 }}>\n            <Grid container>\n              <Grid item xs={12}>\n                <div className={classes.headerElement}>\n                  <h3 className={classes.h3Section}>Name</h3>\n                  <span className={classes.descriptionText}>\n                    How would you like to name this new tenant?\n                  </span>\n                </div>\n                <div className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"tenant-name\"\n                    name=\"tenant-name\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"tenantName\", e.target.value);\n                      frmValidationCleanup(\"tenant-name\");\n                    }}\n                    label=\"Name\"\n                    value={tenantName}\n                    required\n                    error={validationErrors[\"tenant-name\"] || \"\"}\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"namespace\"\n                  name=\"namespace\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"namespace\", e.target.value);\n                    frmValidationCleanup(\"namespace\");\n                  }}\n                  label=\"Namespace\"\n                  value={namespace}\n                  error={validationErrors[\"namespace\"] || \"\"}\n                  overlayId={\"add-namespace\"}\n                  overlayIcon={showCreateButton ? <AddIcon /> : null}\n                  overlayAction={addNamespace}\n                  required\n                />\n              </Grid>\n              {formToRender === IMkEnvs.default ? (\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <SelectWrapper\n                    id=\"storage_class\"\n                    name=\"storage_class\"\n                    onChange={(e: SelectChangeEvent<string>) => {\n                      updateField(\n                        \"selectedStorageClass\",\n                        e.target.value as string\n                      );\n                    }}\n                    label=\"Storage Class\"\n                    value={selectedStorageClass}\n                    options={storageClasses}\n                    disabled={storageClasses.length < 1}\n                  />\n                </Grid>\n              ) : (\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <SelectWrapper\n                    id=\"storage_type\"\n                    name=\"storage_type\"\n                    onChange={(e: SelectChangeEvent<string>) => {\n                      setStorageType(e.target.value as string, features);\n                    }}\n                    label={get(\n                      mkPanelConfigurations,\n                      `${formToRender}.variantSelectorLabel`,\n                      \"Storage Type\"\n                    )}\n                    value={selectedStorageType}\n                    options={get(\n                      mkPanelConfigurations,\n                      `${formToRender}.variantSelectorValues`,\n                      []\n                    )}\n                  />\n                </Grid>\n              )}\n              {formToRender === IMkEnvs.default ? (\n                <TenantSize />\n              ) : (\n                get(\n                  mkPanelConfigurations,\n                  `${formToRender}.sizingComponent`,\n                  null\n                )\n              )}\n            </Grid>\n          </Paper>\n        </Grid>\n        <Grid item xs={4} md={3}>\n          <div className={classes.sizePreview}>\n            <SizePreview />\n          </div>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  tenantName: state.tenants.createTenant.fields.nameTenant.tenantName,\n  namespace: state.tenants.createTenant.fields.nameTenant.namespace,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n  selectedStorageType:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageType,\n  storageClasses: state.tenants.createTenant.storageClasses,\n  features: state.console.session.features,\n});\n\nconst connector = connect(mapState, {\n  setModalErrorSnackMessage,\n  updateAddField,\n  setStorageClassesList,\n  setLimitSize,\n  isPageValid,\n  setStorageType,\n});\n\nexport default withStyles(styles)(connector(NameTenantMain));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport get from \"lodash/get\";\nimport NameTenantMain from \"./NameTenantMain\";\nimport { IMkEnvs, resourcesConfigurations } from \"./utils\";\nimport { AppState } from \"../../../../../../store\";\n\ninterface ITenantResources {\n  features?: string[];\n}\n\nconst TenantResources = ({ features }: ITenantResources) => {\n  const [formRender, setFormRender] = useState<IMkEnvs | null>(null);\n\n  useEffect(() => {\n    let setConfiguration = IMkEnvs.default;\n\n    if (features && features.length !== 0) {\n      const possibleVariables = Object.keys(resourcesConfigurations);\n\n      possibleVariables.forEach((element) => {\n        if (features.includes(element)) {\n          setConfiguration = get(\n            resourcesConfigurations,\n            element,\n            IMkEnvs.default\n          );\n        }\n      });\n    }\n\n    setFormRender(setConfiguration);\n  }, [features]);\n\n  if (formRender === null) {\n    return null;\n  }\n\n  return <NameTenantMain formToRender={formRender} />;\n};\n\nconst mapState = (state: AppState) => ({\n  features: state.console.session.features,\n});\n\nconst connector = connect(mapState, null);\n\nexport default connector(TenantResources);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, Paper, SelectChangeEvent } from \"@mui/material\";\nimport {\n  createTenantCommon,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport SelectWrapper from \"../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport { ISecurityContext } from \"../../types\";\nimport InputUnitMenu from \"../../../Common/FormComponents/InputUnitMenu/InputUnitMenu\";\n\ninterface IConfigureProps {\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  storageClasses: any;\n  classes: any;\n  logSearchEnabled: boolean;\n  logSearchVolumeSize: string;\n  logSearchSizeFactor: string;\n  logSearchSelectedStorageClass: string;\n  logSearchImage: string;\n  logSearchPostgresImage: string;\n  logSearchPostgresInitImage: string;\n  selectedStorageClass: string;\n  tenantSecurityContext: ISecurityContext;\n  logSearchSecurityContext: ISecurityContext;\n  logSearchPostgresSecurityContext: ISecurityContext;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    configSectionItem: {\n      marginRight: 15,\n\n      \"& .multiContainer\": {\n        border: \"1px solid red\",\n      },\n    },\n    containerItem: {\n      marginRight: 15,\n    },\n    fieldGroup: {\n      ...createTenantCommon.fieldGroup,\n      paddingTop: 15,\n      marginBottom: 25,\n    },\n    responsiveSectionItem: {\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n        alignItems: \"flex-start\",\n\n        \"& div > div\": {\n          marginBottom: 5,\n          marginRight: 0,\n        },\n      },\n    },\n\n    logSearchEnabledFields: {\n      marginLeft: 20, // 2nd Level(15+15)\n      padding: 10,\n      width: \"90%\",\n      margin: \"auto\",\n    },\n    fieldSpaceTop: {\n      marginTop: 15,\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst ConfigLogSearch = ({\n  classes,\n  storageClasses,\n  logSearchEnabled,\n  logSearchVolumeSize,\n  logSearchSizeFactor,\n  logSearchImage,\n  logSearchPostgresImage,\n  logSearchPostgresInitImage,\n  logSearchSelectedStorageClass,\n  updateAddField,\n  isPageValid,\n  selectedStorageClass,\n  tenantSecurityContext,\n  logSearchSecurityContext,\n  logSearchPostgresSecurityContext,\n}: IConfigureProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  const configureSTClasses = [\n    { label: \"Default\", value: \"default\" },\n    ...storageClasses,\n  ];\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"configure\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (logSearchEnabled) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"log_search_storage_class\",\n          required: true,\n          value: logSearchSelectedStorageClass,\n          customValidation: logSearchSelectedStorageClass === \"\",\n          customValidationMessage: \"Field cannot be empty\",\n        },\n        {\n          fieldKey: \"log_search_volume_size\",\n          required: true,\n          value: logSearchVolumeSize,\n          customValidation:\n            logSearchVolumeSize === \"\" || parseInt(logSearchVolumeSize) <= 0,\n          customValidationMessage: `Volume size must be present and be greatter than 0`,\n        },\n        {\n          fieldKey: \"logSearch_securityContext_runAsUser\",\n          required: true,\n          value: logSearchSecurityContext.runAsUser,\n          customValidation:\n            logSearchSecurityContext.runAsUser === \"\" ||\n            parseInt(logSearchSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"logSearch_securityContext_runAsGroup\",\n          required: true,\n          value: logSearchSecurityContext.runAsGroup,\n          customValidation:\n            logSearchSecurityContext.runAsGroup === \"\" ||\n            parseInt(logSearchSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"logSearch_securityContext_fsGroup\",\n          required: true,\n          value: logSearchSecurityContext.fsGroup,\n          customValidation:\n            logSearchSecurityContext.fsGroup === \"\" ||\n            parseInt(logSearchSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"postgres_securityContext_runAsUser\",\n          required: true,\n          value: logSearchPostgresSecurityContext.runAsUser,\n          customValidation:\n            logSearchPostgresSecurityContext.runAsUser === \"\" ||\n            parseInt(logSearchPostgresSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"postgres_securityContext_runAsGroup\",\n          required: true,\n          value: logSearchSecurityContext.runAsGroup,\n          customValidation:\n            logSearchPostgresSecurityContext.runAsGroup === \"\" ||\n            parseInt(logSearchPostgresSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"postgres_securityContext_fsGroup\",\n          required: true,\n          value: logSearchPostgresSecurityContext.fsGroup,\n          customValidation:\n            logSearchPostgresSecurityContext.fsGroup === \"\" ||\n            parseInt(logSearchPostgresSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    isPageValid(\"configure\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    logSearchImage,\n    logSearchPostgresImage,\n    logSearchPostgresInitImage,\n    isPageValid,\n    logSearchEnabled,\n    logSearchSelectedStorageClass,\n    logSearchVolumeSize,\n    tenantSecurityContext,\n    logSearchSecurityContext,\n    logSearchPostgresSecurityContext,\n  ]);\n\n  useEffect(() => {\n    // New default values in current selection is invalid\n    if (storageClasses.length > 0) {\n      const filterLogSearch = storageClasses.filter(\n        (item: any) => item.value === logSearchSelectedStorageClass\n      );\n      if (filterLogSearch.length === 0) {\n        updateField(\"logSearchSelectedStorageClass\", \"default\");\n      }\n    }\n  }, [\n    logSearchSelectedStorageClass,\n    selectedStorageClass,\n    storageClasses,\n    updateField,\n  ]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Audit Log</h3>\n        <span className={classes.descriptionText}>\n          Audit log deploys a small PostgreSQL database and stores access logs of\n          all calls into the tenant.\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"logSearchConfig\"\n          id=\"log-search-enabled\"\n          name=\"log_search_enabled\"\n          checked={logSearchEnabled}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"logSearchEnabled\", checked);\n          }}\n          label={\"Enabled\"}\n        />\n      </Grid>\n      {logSearchEnabled && (\n        <Grid xs={12} className={classes.logSearchEnabledFields}>\n          <Grid item xs={12}>\n            <SelectWrapper\n              id=\"log_search_storage_class\"\n              name=\"log_search_storage_class\"\n              onChange={(e: SelectChangeEvent<string>) => {\n                updateField(\n                  \"logSearchSelectedStorageClass\",\n                  e.target.value as string\n                );\n              }}\n              label=\"Log Search Storage Class\"\n              value={logSearchSelectedStorageClass}\n              options={configureSTClasses}\n              disabled={configureSTClasses.length < 1}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <div className={classes.multiContainer}>\n              <InputBoxWrapper\n                type=\"number\"\n                id=\"log_search_volume_size\"\n                name=\"log_search_volume_size\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  updateField(\"logSearchVolumeSize\", e.target.value);\n                  cleanValidation(\"log_search_volume_size\");\n                }}\n                label=\"Storage Size\"\n                overlayObject={\n                  <InputUnitMenu\n                    id={\"size-unit\"}\n                    onUnitChange={() => {}}\n                    unitSelected={\"Gi\"}\n                    unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n                    disabled={true}\n                  />\n                }\n                value={logSearchVolumeSize}\n                required\n                error={validationErrors[\"log_search_volume_size\"] || \"\"}\n                min=\"0\"\n              />\n            </div>\n          </Grid>\n\n          <fieldset\n            className={`${classes.fieldGroup} ${classes.fieldSpaceTop}`}\n          >\n            <legend className={classes.descriptionText}>\n              SecurityContext for LogSearch\n            </legend>\n\n            <Grid item xs={12}>\n              <div\n                className={`${classes.multiContainer} ${classes.responsiveSectionItem}`}\n              >\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"logSearch_securityContext_runAsUser\"\n                    name=\"logSearch_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"logSearchSecurityContext\", {\n                        ...logSearchSecurityContext,\n                        runAsUser: e.target.value,\n                      });\n                      cleanValidation(\"logSearch_securityContext_runAsUser\");\n                    }}\n                    label=\"Run As User\"\n                    value={logSearchSecurityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\"logSearch_securityContext_runAsUser\"] ||\n                      \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"logSearch_securityContext_runAsGroup\"\n                    name=\"logSearch_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"logSearchSecurityContext\", {\n                        ...logSearchSecurityContext,\n                        runAsGroup: e.target.value,\n                      });\n                      cleanValidation(\"logSearch_securityContext_runAsGroup\");\n                    }}\n                    label=\"Run As Group\"\n                    value={logSearchSecurityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\n                        \"logSearch_securityContext_runAsGroup\"\n                      ] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"logSearch_securityContext_fsGroup\"\n                    name=\"logSearch_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"logSearchSecurityContext\", {\n                        ...logSearchSecurityContext,\n                        fsGroup: e.target.value,\n                      });\n                      cleanValidation(\"logSearch_securityContext_fsGroup\");\n                    }}\n                    label=\"FsGroup\"\n                    value={logSearchSecurityContext.fsGroup}\n                    required\n                    error={\n                      validationErrors[\"logSearch_securityContext_fsGroup\"] ||\n                      \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <br />\n            <Grid item xs={12}>\n              <div className={classes.multiContainer}>\n                <FormSwitchWrapper\n                  value=\"logSearchSecurityContextRunAsNonRoot\"\n                  id=\"logSearch_securityContext_runAsNonRoot\"\n                  name=\"logSearch_securityContext_runAsNonRoot\"\n                  checked={logSearchSecurityContext.runAsNonRoot}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    updateField(\"logSearchSecurityContext\", {\n                      ...logSearchSecurityContext,\n                      runAsNonRoot: checked,\n                    });\n                  }}\n                  label={\"Do not run as Root\"}\n                />\n              </div>\n            </Grid>\n          </fieldset>\n          <fieldset className={classes.fieldGroup}>\n            <legend className={classes.descriptionText}>\n              SecurityContext for PostgreSQL\n            </legend>\n\n            <Grid item xs={12}>\n              <div\n                className={`${classes.multiContainer} ${classes.responsiveSectionItem}`}\n              >\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"postgres_securityContext_runAsUser\"\n                    name=\"postgres_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"logSearchPostgresSecurityContext\", {\n                        ...logSearchPostgresSecurityContext,\n                        runAsUser: e.target.value,\n                      });\n                      cleanValidation(\"postgres_securityContext_runAsUser\");\n                    }}\n                    label=\"Run As User\"\n                    value={logSearchPostgresSecurityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\"postgres_securityContext_runAsUser\"] ||\n                      \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"postgres_securityContext_runAsGroup\"\n                    name=\"postgres_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"logSearchPostgresSecurityContext\", {\n                        ...logSearchPostgresSecurityContext,\n                        runAsGroup: e.target.value,\n                      });\n                      cleanValidation(\"postgres_securityContext_runAsGroup\");\n                    }}\n                    label=\"Run As Group\"\n                    value={logSearchPostgresSecurityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\"postgres_securityContext_runAsGroup\"] ||\n                      \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"postgres_securityContext_fsGroup\"\n                    name=\"postgres_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"logSearchPostgresSecurityContext\", {\n                        ...logSearchPostgresSecurityContext,\n                        fsGroup: e.target.value,\n                      });\n                      cleanValidation(\"postgres_securityContext_fsGroup\");\n                    }}\n                    label=\"FsGroup\"\n                    value={logSearchPostgresSecurityContext.fsGroup}\n                    required\n                    error={\n                      validationErrors[\"postgres_securityContext_fsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <br />\n            <Grid item xs={12}>\n              <div className={classes.multiContainer}>\n                <FormSwitchWrapper\n                  value=\"postgresSecurityContextRunAsNonRoot\"\n                  id=\"postgres_securityContext_runAsNonRoot\"\n                  name=\"postgres_securityContext_runAsNonRoot\"\n                  checked={logSearchPostgresSecurityContext.runAsNonRoot}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    updateField(\"logSearchPostgresSecurityContext\", {\n                      ...logSearchPostgresSecurityContext,\n                      runAsNonRoot: checked,\n                    });\n                  }}\n                  label={\"Do not run as Root\"}\n                />\n              </div>\n            </Grid>\n          </fieldset>\n        </Grid>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  storageClasses: state.tenants.createTenant.storageClasses,\n  logSearchEnabled:\n    state.tenants.createTenant.fields.configure.logSearchEnabled,\n  logSearchVolumeSize:\n    state.tenants.createTenant.fields.configure.logSearchVolumeSize,\n  logSearchSizeFactor:\n    state.tenants.createTenant.fields.configure.logSearchSizeFactor,\n  logSearchSelectedStorageClass:\n    state.tenants.createTenant.fields.configure.logSearchSelectedStorageClass,\n  logSearchImage: state.tenants.createTenant.fields.configure.logSearchImage,\n  logSearchPostgresImage:\n    state.tenants.createTenant.fields.configure.logSearchPostgresImage,\n  logSearchPostgresInitImage:\n    state.tenants.createTenant.fields.configure.logSearchPostgresInitImage,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n  tenantSecurityContext:\n    state.tenants.createTenant.fields.configure.tenantSecurityContext,\n  logSearchSecurityContext:\n    state.tenants.createTenant.fields.configure.logSearchSecurityContext,\n  logSearchPostgresSecurityContext:\n    state.tenants.createTenant.fields.configure\n      .logSearchPostgresSecurityContext,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(ConfigLogSearch));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, Paper, SelectChangeEvent } from \"@mui/material\";\nimport {\n  createTenantCommon,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport SelectWrapper from \"../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport { ISecurityContext } from \"../../types\";\nimport InputUnitMenu from \"../../../Common/FormComponents/InputUnitMenu/InputUnitMenu\";\n\ninterface IConfigureProps {\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  storageClasses: any;\n  classes: any;\n  prometheusEnabled: boolean;\n  prometheusVolumeSize: string;\n  prometheusSizeFactor: string;\n  prometheusSelectedStorageClass: string;\n  prometheusImage: string;\n  prometheusSidecarImage: string;\n  prometheusInitImage: string;\n  selectedStorageClass: string;\n  tenantSecurityContext: ISecurityContext;\n  prometheusSecurityContext: ISecurityContext;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    configSectionItem: {\n      marginRight: 15,\n\n      \"& .multiContainer\": {\n        border: \"1px solid red\",\n      },\n    },\n    containerItem: {\n      marginRight: 15,\n    },\n    fieldGroup: {\n      ...createTenantCommon.fieldGroup,\n      paddingTop: 15,\n      marginBottom: 25,\n    },\n    responsiveSectionItem: {\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n        alignItems: \"flex-start\",\n\n        \"& div > div\": {\n          marginBottom: 5,\n          marginRight: 0,\n        },\n      },\n    },\n    fieldSpaceTop: {\n      marginTop: 15,\n    },\n    prometheusEnabledFields: {\n      marginLeft: 20, // 2nd Level(15+15)\n      padding: 10,\n      width: \"90%\",\n      margin: \"auto\",\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst ConfigPrometheus = ({\n  classes,\n  storageClasses,\n  prometheusEnabled,\n  prometheusVolumeSize,\n  prometheusSizeFactor,\n  prometheusSelectedStorageClass,\n  prometheusImage,\n  prometheusSidecarImage,\n  prometheusInitImage,\n  updateAddField,\n  isPageValid,\n  selectedStorageClass,\n  tenantSecurityContext,\n  prometheusSecurityContext,\n}: IConfigureProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  const configureSTClasses = [\n    { label: \"Default\", value: \"default\" },\n    ...storageClasses,\n  ];\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"configure\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (prometheusEnabled) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"prometheus_storage_class\",\n          required: true,\n          value: prometheusSelectedStorageClass,\n          customValidation: prometheusSelectedStorageClass === \"\",\n          customValidationMessage: \"Field cannot be empty\",\n        },\n        {\n          fieldKey: \"prometheus_volume_size\",\n          required: true,\n          value: prometheusVolumeSize,\n          customValidation:\n            prometheusVolumeSize === \"\" || parseInt(prometheusVolumeSize) <= 0,\n          customValidationMessage: `Volume size must be present and be greater than 0`,\n        },\n        {\n          fieldKey: \"prometheus_securityContext_runAsUser\",\n          required: true,\n          value: prometheusSecurityContext.runAsUser,\n          customValidation:\n            prometheusSecurityContext.runAsUser === \"\" ||\n            parseInt(prometheusSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"prometheus_securityContext_runAsGroup\",\n          required: true,\n          value: prometheusSecurityContext.runAsGroup,\n          customValidation:\n            prometheusSecurityContext.runAsGroup === \"\" ||\n            parseInt(prometheusSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"prometheus_securityContext_fsGroup\",\n          required: true,\n          value: prometheusSecurityContext.fsGroup,\n          customValidation:\n            prometheusSecurityContext.fsGroup === \"\" ||\n            parseInt(prometheusSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    isPageValid(\"configure\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    prometheusImage,\n    prometheusSidecarImage,\n    prometheusInitImage,\n    isPageValid,\n    prometheusEnabled,\n    prometheusSelectedStorageClass,\n    prometheusVolumeSize,\n    tenantSecurityContext,\n    prometheusSecurityContext,\n  ]);\n\n  useEffect(() => {\n    // New default values in current selection is invalid\n    if (storageClasses.length > 0) {\n      const filterPrometheus = storageClasses.filter(\n        (item: any) => item.value === prometheusSelectedStorageClass\n      );\n      if (filterPrometheus.length === 0) {\n        updateField(\"prometheusSelectedStorageClass\", \"default\");\n      }\n    }\n  }, [\n    prometheusSelectedStorageClass,\n    selectedStorageClass,\n    storageClasses,\n    updateField,\n  ]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Monitoring</h3>\n        <span className={classes.descriptionText}>\n          A small Prometheus will be deployed to keep metrics about the tenant.\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"prometheusConfig\"\n          id=\"prometheus_configuration\"\n          name=\"prometheus_configuration\"\n          checked={prometheusEnabled}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"prometheusEnabled\", checked);\n          }}\n          label={\"Enabled\"}\n        />\n      </Grid>\n      {prometheusEnabled && (\n        <Grid xs={12} className={classes.prometheusEnabledFields}>\n          <Grid item xs={12}>\n            <SelectWrapper\n              id=\"prometheus_storage_class\"\n              name=\"prometheus_storage_class\"\n              onChange={(e: SelectChangeEvent<string>) => {\n                updateField(\n                  \"prometheusSelectedStorageClass\",\n                  e.target.value as string\n                );\n              }}\n              label=\"Prometheus Storage Class\"\n              value={prometheusSelectedStorageClass}\n              options={configureSTClasses}\n              disabled={configureSTClasses.length < 1}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <div className={classes.multiContainer}>\n              <InputBoxWrapper\n                type=\"number\"\n                id=\"prometheus_volume_size\"\n                name=\"prometheus_volume_size\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  updateField(\"prometheusVolumeSize\", e.target.value);\n                  cleanValidation(\"prometheus_volume_size\");\n                }}\n                label=\"Storage Size\"\n                overlayObject={\n                  <InputUnitMenu\n                    id={\"size-unit\"}\n                    onUnitChange={() => {}}\n                    unitSelected={\"Gi\"}\n                    unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n                    disabled={true}\n                  />\n                }\n                value={prometheusVolumeSize}\n                required\n                error={validationErrors[\"prometheus_volume_size\"] || \"\"}\n                min=\"0\"\n              />\n            </div>\n          </Grid>\n          <fieldset\n            className={`${classes.fieldGroup} ${classes.fieldSpaceTop}`}\n          >\n            <legend className={classes.descriptionText}>\n              SecurityContext for Prometheus\n            </legend>\n            <Grid item xs={12} className={classes.configSectionItem}>\n              <div\n                className={`${classes.multiContainer} ${classes.responsiveSectionItem}`}\n              >\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"prometheus_securityContext_runAsUser\"\n                    name=\"prometheus_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"prometheusSecurityContext\", {\n                        ...prometheusSecurityContext,\n                        runAsUser: e.target.value,\n                      });\n                      cleanValidation(\"prometheus_securityContext_runAsUser\");\n                    }}\n                    label=\"Run As User\"\n                    value={prometheusSecurityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\n                        \"prometheus_securityContext_runAsUser\"\n                      ] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"prometheus_securityContext_runAsGroup\"\n                    name=\"prometheus_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"prometheusSecurityContext\", {\n                        ...prometheusSecurityContext,\n                        runAsGroup: e.target.value,\n                      });\n                      cleanValidation(\"prometheus_securityContext_runAsGroup\");\n                    }}\n                    label=\"Run As Group\"\n                    value={prometheusSecurityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\n                        \"prometheus_securityContext_runAsGroup\"\n                      ] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"prometheus_securityContext_fsGroup\"\n                    name=\"prometheus_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"prometheusSecurityContext\", {\n                        ...prometheusSecurityContext,\n                        fsGroup: e.target.value,\n                      });\n                      cleanValidation(\"prometheus_securityContext_fsGroup\");\n                    }}\n                    label=\"FsGroup\"\n                    value={prometheusSecurityContext.fsGroup}\n                    required\n                    error={\n                      validationErrors[\"prometheus_securityContext_fsGroup\"] ||\n                      \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <Grid item xs={12} className={classes.configSectionItem}>\n              <div\n                className={`${classes.multiContainer} ${classes.fieldSpaceTop}`}\n              >\n                <FormSwitchWrapper\n                  value=\"prometheusSecurityContextRunAsNonRoot\"\n                  id=\"prometheus_securityContext_runAsNonRoot\"\n                  name=\"prometheus_securityContext_runAsNonRoot\"\n                  checked={prometheusSecurityContext.runAsNonRoot}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    updateField(\"prometheusSecurityContext\", {\n                      ...prometheusSecurityContext,\n                      runAsNonRoot: checked,\n                    });\n                  }}\n                  label={\"Do not run as Root\"}\n                />\n              </div>\n            </Grid>\n          </fieldset>\n        </Grid>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  storageClasses: state.tenants.createTenant.storageClasses,\n  prometheusEnabled:\n    state.tenants.createTenant.fields.configure.prometheusEnabled,\n  prometheusVolumeSize:\n    state.tenants.createTenant.fields.configure.prometheusVolumeSize,\n  prometheusSizeFactor:\n    state.tenants.createTenant.fields.configure.prometheusSizeFactor,\n  prometheusSelectedStorageClass:\n    state.tenants.createTenant.fields.configure.prometheusSelectedStorageClass,\n  prometheusImage: state.tenants.createTenant.fields.configure.prometheusImage,\n  prometheusSidecarImage:\n    state.tenants.createTenant.fields.configure.prometheusSidecarImage,\n  prometheusInitImage:\n    state.tenants.createTenant.fields.configure.prometheusInitImage,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n  tenantSecurityContext:\n    state.tenants.createTenant.fields.configure.tenantSecurityContext,\n  prometheusSecurityContext:\n    state.tenants.createTenant.fields.configure.prometheusSecurityContext,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(ConfigPrometheus));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport get from \"lodash/get\";\nimport { connect } from \"react-redux\";\nimport Grid from \"@mui/material/Grid\";\nimport { LinearProgress } from \"@mui/material\";\n\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  modalBasic,\n  settingsCommon,\n  wizardCommon,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport api from \"../../../../common/api\";\nimport { generatePoolName, getBytes } from \"../../../../common/utils\";\nimport GenericWizard from \"../../Common/GenericWizard/GenericWizard\";\nimport { IWizardElement } from \"../../Common/GenericWizard/types\";\nimport { NewServiceAccount } from \"../../Common/CredentialsPrompt/types\";\nimport {\n  ErrorResponseHandler,\n  ITenantCreator,\n  ITolerationModel,\n} from \"../../../../common/types\";\nimport { KeyPair } from \"../ListTenants/utils\";\n\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport { getDefaultAffinity, getNodeSelector } from \"../TenantDetails/utils\";\nimport CredentialsPrompt from \"../../Common/CredentialsPrompt/CredentialsPrompt\";\nimport { AppState } from \"../../../../store\";\nimport { ICertificatesItems, IFieldStore } from \"../types\";\nimport { resetAddTenantForm, updateAddField } from \"../actions\";\nimport Configure from \"./Steps/Configure\";\nimport IdentityProvider from \"./Steps/IdentityProvider\";\nimport Security from \"./Steps/Security\";\nimport Encryption from \"./Steps/Encryption\";\nimport Affinity from \"./Steps/Affinity\";\nimport PageHeader from \"../../Common/PageHeader/PageHeader\";\nimport history from \"../../../../history\";\nimport Images from \"./Steps/Images\";\nimport PageLayout from \"../../Common/Layout/PageLayout\";\nimport BackLink from \"../../../../common/BackLink\";\nimport TenantResources from \"./Steps/TenantResources/TenantResources\";\nimport ConfigLogSearch from \"./Steps/ConfigLogSearch\";\nimport ConfigPrometheus from \"./Steps/ConfigPrometheus\";\nimport {\n  IMkEnvs,\n  resourcesConfigurations,\n} from \"./Steps/TenantResources/utils\";\nimport HelpBox from \"../../../../common/HelpBox\";\nimport { StorageIcon } from \"../../../../icons\";\n\ninterface IAddTenantProps {\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n  resetAddTenantForm: typeof resetAddTenantForm;\n  updateAddField: typeof updateAddField;\n  fields: IFieldStore;\n  certificates: ICertificatesItems;\n  selectedStorageClass: string;\n  namespace: string;\n  validPages: string[];\n  classes: any;\n  features?: string[];\n  tolerations: ITolerationModel[];\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    pageBox: {\n      border: \"1px solid #EAEAEA\",\n    },\n    ...modalBasic,\n    ...wizardCommon,\n    ...settingsCommon,\n  });\n\nconst AddTenant = ({\n  classes,\n  fields,\n  certificates,\n  selectedStorageClass,\n  namespace,\n  validPages,\n  setErrorSnackMessage,\n  resetAddTenantForm,\n  features,\n  tolerations,\n}: IAddTenantProps) => {\n  // Modals\n  const [showNewCredentials, setShowNewCredentials] = useState<boolean>(false);\n  const [createdAccount, setCreatedAccount] =\n    useState<NewServiceAccount | null>(null);\n\n  // Fields\n  const [addSending, setAddSending] = useState<boolean>(false);\n  const [formRender, setFormRender] = useState<IMkEnvs | null>(null);\n\n  useEffect(() => {\n    let setConfiguration = IMkEnvs.default;\n\n    if (features && features.length !== 0) {\n      const possibleVariables = Object.keys(resourcesConfigurations);\n\n      possibleVariables.forEach((element) => {\n        if (features.includes(element)) {\n          setConfiguration = get(\n            resourcesConfigurations,\n            element,\n            IMkEnvs.default\n          );\n        }\n      });\n    }\n\n    setFormRender(setConfiguration);\n  }, [features]);\n\n  /* Send Information to backend */\n  useEffect(() => {\n    const tenantName = fields.nameTenant.tenantName;\n    const selectedStorageClass = fields.nameTenant.selectedStorageClass;\n    const imageName = fields.configure.imageName;\n    const customDockerhub = fields.configure.customDockerhub;\n    const imageRegistry = fields.configure.imageRegistry;\n    const imageRegistryUsername = fields.configure.imageRegistryUsername;\n    const imageRegistryPassword = fields.configure.imageRegistryPassword;\n    const exposeMinIO = fields.configure.exposeMinIO;\n    const exposeConsole = fields.configure.exposeConsole;\n    const idpSelection = fields.identityProvider.idpSelection;\n    const openIDConfigurationURL =\n      fields.identityProvider.openIDConfigurationURL;\n    const openIDClientID = fields.identityProvider.openIDClientID;\n    const openIDClaimName = fields.identityProvider.openIDClaimName;\n    const openIDCallbackURL = fields.identityProvider.openIDCallbackURL;\n    const openIDScopes = fields.identityProvider.openIDScopes;\n    const openIDSecretID = fields.identityProvider.openIDSecretID;\n    const ADURL = fields.identityProvider.ADURL;\n    const ADSkipTLS = fields.identityProvider.ADSkipTLS;\n    const ADServerInsecure = fields.identityProvider.ADServerInsecure;\n    const ADGroupSearchBaseDN = fields.identityProvider.ADGroupSearchBaseDN;\n    const ADGroupSearchFilter = fields.identityProvider.ADGroupSearchFilter;\n    const ADUserDNs = fields.identityProvider.ADUserDNs;\n    const ADLookupBindDN = fields.identityProvider.ADLookupBindDN;\n    const ADLookupBindPassword = fields.identityProvider.ADLookupBindPassword;\n    const ADUserDNSearchBaseDN = fields.identityProvider.ADUserDNSearchBaseDN;\n    const ADUserDNSearchFilter = fields.identityProvider.ADUserDNSearchFilter;\n    const ADServerStartTLS = fields.identityProvider.ADServerStartTLS;\n    const accessKeys = fields.identityProvider.accessKeys;\n    const secretKeys = fields.identityProvider.secretKeys;\n    const minioCertificates = certificates.minioCertificates;\n    const caCertificates = certificates.caCertificates;\n    const consoleCaCertificates = certificates.consoleCaCertificates;\n    const consoleCertificate = certificates.consoleCertificate;\n    const serverCertificate = certificates.serverCertificate;\n    const clientCertificate = certificates.clientCertificate;\n    const vaultCertificate = certificates.vaultCertificate;\n    const vaultCA = certificates.vaultCA;\n    const gemaltoCA = certificates.gemaltoCA;\n    const enableEncryption = fields.encryption.enableEncryption;\n    const encryptionType = fields.encryption.encryptionType;\n    const gemaltoEndpoint = fields.encryption.gemaltoEndpoint;\n    const gemaltoToken = fields.encryption.gemaltoToken;\n    const gemaltoDomain = fields.encryption.gemaltoDomain;\n    const gemaltoRetry = fields.encryption.gemaltoRetry;\n    const awsEndpoint = fields.encryption.awsEndpoint;\n    const awsRegion = fields.encryption.awsRegion;\n    const awsKMSKey = fields.encryption.awsKMSKey;\n    const awsAccessKey = fields.encryption.awsAccessKey;\n    const awsSecretKey = fields.encryption.awsSecretKey;\n    const awsToken = fields.encryption.awsToken;\n    const vaultEndpoint = fields.encryption.vaultEndpoint;\n    const vaultEngine = fields.encryption.vaultEngine;\n    const vaultNamespace = fields.encryption.vaultNamespace;\n    const vaultPrefix = fields.encryption.vaultPrefix;\n    const vaultAppRoleEngine = fields.encryption.vaultAppRoleEngine;\n    const vaultId = fields.encryption.vaultId;\n    const vaultSecret = fields.encryption.vaultSecret;\n    const vaultRetry = fields.encryption.vaultRetry;\n    const vaultPing = fields.encryption.vaultPing;\n    const azureEndpoint = fields.encryption.azureEndpoint;\n    const azureTenantID = fields.encryption.azureTenantID;\n    const azureClientID = fields.encryption.azureClientID;\n    const azureClientSecret = fields.encryption.azureClientSecret;\n    const gcpProjectID = fields.encryption.gcpProjectID;\n    const gcpEndpoint = fields.encryption.gcpEndpoint;\n    const gcpClientEmail = fields.encryption.gcpClientEmail;\n    const gcpClientID = fields.encryption.gcpClientID;\n    const gcpPrivateKeyID = fields.encryption.gcpPrivateKeyID;\n    const gcpPrivateKey = fields.encryption.gcpPrivateKey;\n    const enableAutoCert = fields.security.enableAutoCert;\n    const enableTLS = fields.security.enableTLS;\n    const ecParity = fields.tenantSize.ecParity;\n    const distribution = fields.tenantSize.distribution;\n    const tenantCustom = fields.configure.tenantCustom;\n    const logSearchEnabled = fields.configure.logSearchEnabled;\n    const prometheusEnabled = fields.configure.prometheusEnabled;\n    const logSearchVolumeSize = fields.configure.logSearchVolumeSize;\n    const logSearchSelectedStorageClass =\n      fields.configure.logSearchSelectedStorageClass;\n    const logSearchImage = fields.configure.logSearchImage;\n    const kesImage = fields.configure.kesImage;\n    const logSearchPostgresImage = fields.configure.logSearchPostgresImage;\n    const logSearchPostgresInitImage =\n      fields.configure.logSearchPostgresInitImage;\n    const prometheusImage = fields.configure.prometheusImage;\n    const prometheusSidecarImage = fields.configure.prometheusSidecarImage;\n    const prometheusInitImage = fields.configure.prometheusInitImage;\n    const prometheusSelectedStorageClass =\n      fields.configure.prometheusSelectedStorageClass;\n    const prometheusVolumeSize = fields.configure.prometheusVolumeSize;\n    const affinityType = fields.affinity.podAffinity;\n    const nodeSelectorLabels = fields.affinity.nodeSelectorLabels;\n    const withPodAntiAffinity = fields.affinity.withPodAntiAffinity;\n\n    const tenantSecurityContext = fields.configure.tenantSecurityContext;\n    const logSearchSecurityContext = fields.configure.logSearchSecurityContext;\n    const logSearchPostgresSecurityContext =\n      fields.configure.logSearchPostgresSecurityContext;\n    const prometheusSecurityContext =\n      fields.configure.prometheusSecurityContext;\n    const kesSecurityContext = fields.encryption.kesSecurityContext;\n    const kesReplicas = fields.encryption.replicas;\n\n    if (addSending) {\n      const tolerationValues = tolerations.filter(\n        (toleration) => toleration.key.trim() !== \"\"\n      );\n\n      const poolName = generatePoolName([]);\n\n      let affinityObject = {};\n\n      switch (affinityType) {\n        case \"default\":\n          affinityObject = {\n            affinity: getDefaultAffinity(tenantName, poolName),\n          };\n          break;\n        case \"nodeSelector\":\n          affinityObject = {\n            affinity: getNodeSelector(\n              nodeSelectorLabels,\n              withPodAntiAffinity,\n              tenantName,\n              poolName\n            ),\n          };\n          break;\n      }\n\n      const erasureCode = ecParity.split(\":\")[1];\n\n      let dataSend: ITenantCreator = {\n        name: tenantName,\n        namespace: namespace,\n        access_key: \"\",\n        secret_key: \"\",\n        access_keys: [],\n        secret_keys: [],\n        enable_tls: enableTLS && enableAutoCert,\n        enable_console: true,\n        enable_prometheus: true,\n        service_name: \"\",\n        image: imageName,\n        expose_minio: exposeMinIO,\n        expose_console: exposeConsole,\n        pools: [\n          {\n            name: poolName,\n            servers: distribution.nodes,\n            volumes_per_server: distribution.disks,\n            volume_configuration: {\n              size: distribution.pvSize,\n              storage_class_name: selectedStorageClass,\n            },\n            securityContext: tenantCustom ? tenantSecurityContext : null,\n            ...affinityObject,\n            tolerations: tolerationValues,\n          },\n        ],\n        erasureCodingParity: parseInt(erasureCode, 10),\n      };\n\n      // Set Resources\n      if (\n        fields.tenantSize.resourcesCPURequest !== \"\" ||\n        fields.tenantSize.resourcesCPULimit !== \"\" ||\n        fields.tenantSize.resourcesMemoryRequest !== \"\" ||\n        fields.tenantSize.resourcesMemoryLimit !== \"\"\n      ) {\n        dataSend.pools[0].resources = {};\n        // requests\n        if (\n          fields.tenantSize.resourcesCPURequest !== \"\" ||\n          fields.tenantSize.resourcesMemoryRequest !== \"\"\n        ) {\n          dataSend.pools[0].resources.requests = {};\n          if (fields.tenantSize.resourcesCPURequest !== \"\") {\n            dataSend.pools[0].resources.requests.cpu = parseInt(\n              fields.tenantSize.resourcesCPURequest\n            );\n          }\n          if (fields.tenantSize.resourcesMemoryRequest !== \"\") {\n            dataSend.pools[0].resources.requests.memory = parseInt(\n              getBytes(fields.tenantSize.resourcesMemoryRequest, \"Gi\", true)\n            );\n          }\n        }\n        // limits\n        if (\n          fields.tenantSize.resourcesCPULimit !== \"\" ||\n          fields.tenantSize.resourcesMemoryLimit !== \"\"\n        ) {\n          dataSend.pools[0].resources.limits = {};\n          if (fields.tenantSize.resourcesCPULimit !== \"\") {\n            dataSend.pools[0].resources.limits.cpu = parseInt(\n              fields.tenantSize.resourcesCPULimit\n            );\n          }\n          if (fields.tenantSize.resourcesMemoryLimit !== \"\") {\n            dataSend.pools[0].resources.limits.memory = parseInt(\n              getBytes(fields.tenantSize.resourcesMemoryLimit, \"Gi\", true)\n            );\n          }\n        }\n      }\n      if (customDockerhub) {\n        dataSend = {\n          ...dataSend,\n          image_registry: {\n            registry: imageRegistry,\n            username: imageRegistryUsername,\n            password: imageRegistryPassword,\n          },\n        };\n      }\n\n      if (logSearchEnabled) {\n        dataSend = {\n          ...dataSend,\n          logSearchConfiguration: {\n            storageClass:\n              logSearchSelectedStorageClass === \"default\"\n                ? \"\"\n                : logSearchSelectedStorageClass,\n            storageSize: parseInt(logSearchVolumeSize),\n            image: logSearchImage,\n            postgres_image: logSearchPostgresImage,\n            postgres_init_image: logSearchPostgresInitImage,\n            securityContext: logSearchSecurityContext,\n            postgres_securityContext: logSearchPostgresSecurityContext,\n          },\n        };\n      }\n\n      if (prometheusEnabled) {\n        dataSend = {\n          ...dataSend,\n          prometheusConfiguration: {\n            storageClass:\n              prometheusSelectedStorageClass === \"default\"\n                ? \"\"\n                : prometheusSelectedStorageClass,\n            storageSize: parseInt(prometheusVolumeSize),\n            image: prometheusImage,\n            sidecar_image: prometheusSidecarImage,\n            init_image: prometheusInitImage,\n            securityContext: prometheusSecurityContext,\n          },\n        };\n      }\n\n      let tenantCerts: any = null;\n      let consoleCerts: any = null;\n      let caCerts: any = null;\n      let consoleCaCerts: any = null;\n\n      if (caCertificates.length > 0) {\n        caCerts = {\n          ca_certificates: caCertificates\n            .map((keyPair: KeyPair) => keyPair.encoded_cert)\n            .filter((keyPair) => keyPair),\n        };\n      }\n\n      if (consoleCaCertificates.length > 0) {\n        consoleCaCerts = {\n          console_ca_certificates: consoleCaCertificates\n            .map((keyPair: KeyPair) => keyPair.encoded_cert)\n            .filter((keyPair) => keyPair),\n        };\n      }\n\n      if (enableTLS && minioCertificates.length > 0) {\n        tenantCerts = {\n          minio: minioCertificates\n            .map((keyPair: KeyPair) => ({\n              crt: keyPair.encoded_cert,\n              key: keyPair.encoded_key,\n            }))\n            .filter((keyPair) => keyPair.crt && keyPair.key),\n        };\n      }\n\n      if (\n        enableTLS &&\n        consoleCertificate.encoded_cert !== \"\" &&\n        consoleCertificate.encoded_key !== \"\"\n      ) {\n        consoleCerts = {\n          console: {\n            crt: consoleCertificate.encoded_cert,\n            key: consoleCertificate.encoded_key,\n          },\n        };\n      }\n\n      if (tenantCerts || consoleCerts || caCerts || consoleCaCerts) {\n        dataSend = {\n          ...dataSend,\n          tls: {\n            ...tenantCerts,\n            ...consoleCerts,\n            ...caCerts,\n            ...consoleCaCerts,\n          },\n        };\n      }\n\n      if (enableEncryption) {\n        let insertEncrypt = {};\n\n        switch (encryptionType) {\n          case \"gemalto\":\n            let gemaltoCAIntroduce = {};\n\n            if (gemaltoCA.encoded_cert !== \"\") {\n              gemaltoCAIntroduce = {\n                ca: gemaltoCA.encoded_cert,\n              };\n            }\n            insertEncrypt = {\n              gemalto: {\n                keysecure: {\n                  endpoint: gemaltoEndpoint,\n                  credentials: {\n                    token: gemaltoToken,\n                    domain: gemaltoDomain,\n                    retry: parseInt(gemaltoRetry),\n                  },\n                  tls: {\n                    ...gemaltoCAIntroduce,\n                  },\n                },\n              },\n            };\n            break;\n          case \"aws\":\n            insertEncrypt = {\n              aws: {\n                secretsmanager: {\n                  endpoint: awsEndpoint,\n                  region: awsRegion,\n                  kmskey: awsKMSKey,\n                  credentials: {\n                    accesskey: awsAccessKey,\n                    secretkey: awsSecretKey,\n                    token: awsToken,\n                  },\n                },\n              },\n            };\n            break;\n          case \"azure\":\n            insertEncrypt = {\n              azure: {\n                keyvault: {\n                  endpoint: azureEndpoint,\n                  credentials: {\n                    tenant_id: azureTenantID,\n                    client_id: azureClientID,\n                    client_secret: azureClientSecret,\n                  },\n                },\n              },\n            };\n            break;\n          case \"gcp\":\n            insertEncrypt = {\n              gcp: {\n                secretmanager: {\n                  project_id: gcpProjectID,\n                  endpoint: gcpEndpoint,\n                  credentials: {\n                    client_email: gcpClientEmail,\n                    client_id: gcpClientID,\n                    private_key_id: gcpPrivateKeyID,\n                    private_key: gcpPrivateKey,\n                  },\n                },\n              },\n            };\n            break;\n          case \"vault\":\n            let vaultKeyPair = null;\n            let vaultCAInsert = null;\n            if (\n              vaultCertificate.encoded_key !== \"\" &&\n              vaultCertificate.encoded_cert !== \"\"\n            ) {\n              vaultKeyPair = {\n                key: vaultCertificate.encoded_key,\n                crt: vaultCertificate.encoded_cert,\n              };\n            }\n            if (vaultCA.encoded_cert !== \"\") {\n              vaultCAInsert = {\n                ca: vaultCA.encoded_cert,\n              };\n            }\n            let vaultTLS = null;\n            if (vaultKeyPair || vaultCAInsert) {\n              vaultTLS = {\n                tls: {\n                  ...vaultKeyPair,\n                  ...vaultCAInsert,\n                },\n              };\n            }\n            insertEncrypt = {\n              vault: {\n                endpoint: vaultEndpoint,\n                engine: vaultEngine,\n                namespace: vaultNamespace,\n                prefix: vaultPrefix,\n                approle: {\n                  engine: vaultAppRoleEngine,\n                  id: vaultId,\n                  secret: vaultSecret,\n                  retry: parseInt(vaultRetry),\n                },\n                ...vaultTLS,\n                status: {\n                  ping: parseInt(vaultPing),\n                },\n              },\n            };\n            break;\n        }\n\n        let encryptionServerKeyPair: any = {};\n        let encryptionClientKeyPair: any = {};\n\n        if (\n          clientCertificate.encoded_key !== \"\" &&\n          clientCertificate.encoded_cert !== \"\"\n        ) {\n          encryptionClientKeyPair = {\n            client: {\n              key: clientCertificate.encoded_key,\n              crt: clientCertificate.encoded_cert,\n            },\n          };\n        }\n\n        if (\n          serverCertificate.encoded_key !== \"\" &&\n          serverCertificate.encoded_cert !== \"\"\n        ) {\n          encryptionServerKeyPair = {\n            server: {\n              key: serverCertificate.encoded_key,\n              crt: serverCertificate.encoded_cert,\n            },\n          };\n        }\n\n        dataSend = {\n          ...dataSend,\n          encryption: {\n            replicas: kesReplicas,\n            securityContext: kesSecurityContext,\n            image: kesImage,\n            ...encryptionClientKeyPair,\n            ...encryptionServerKeyPair,\n            ...insertEncrypt,\n          },\n        };\n      }\n\n      let dataIDP: any = {};\n      switch (idpSelection) {\n        case \"Built-in\":\n          let keyarray = [];\n          for (let i = 0; i < accessKeys.length; i++) {\n            keyarray.push({\n              access_key: accessKeys[i],\n              secret_key: secretKeys[i],\n            });\n          }\n          dataIDP = {\n            keys: keyarray,\n          };\n          break;\n        case \"OpenID\":\n          dataIDP = {\n            oidc: {\n              configuration_url: openIDConfigurationURL,\n              client_id: openIDClientID,\n              secret_id: openIDSecretID,\n              claim_name: openIDClaimName,\n              callback_url: openIDCallbackURL,\n              scopes: openIDScopes,\n            },\n          };\n          break;\n        case \"AD\":\n          dataIDP = {\n            active_directory: {\n              url: ADURL,\n              skip_tls_verification: ADSkipTLS,\n              server_insecure: ADServerInsecure,\n              group_search_base_dn: ADGroupSearchBaseDN,\n              group_search_filter: ADGroupSearchFilter,\n              user_dns: ADUserDNs,\n              lookup_bind_dn: ADLookupBindDN,\n              lookup_bind_password: ADLookupBindPassword,\n              user_dn_search_base_dn: ADUserDNSearchBaseDN,\n              user_dn_search_filter: ADUserDNSearchFilter,\n              server_start_tls: ADServerStartTLS,\n            },\n          };\n          break;\n      }\n\n      dataSend = {\n        ...dataSend,\n        idp: { ...dataIDP },\n      };\n      api\n        .invoke(\"POST\", `/api/v1/tenants`, dataSend)\n        .then((res) => {\n          const consoleSAList = get(res, \"console\", []);\n\n          let newSrvAcc: NewServiceAccount = {\n            idp: get(res, \"externalIDP\", false),\n            console: [],\n          };\n\n          if (consoleSAList) {\n            if (Array.isArray(consoleSAList)) {\n              const consoleItem = consoleSAList.map((consoleKey) => {\n                return {\n                  accessKey: consoleKey.access_key,\n                  secretKey: consoleKey.secret_key,\n                  api: \"s3v4\",\n                  path: \"auto\",\n                  url: consoleKey.url,\n                };\n              });\n\n              newSrvAcc.console = consoleItem;\n            } else {\n              newSrvAcc = {\n                console: {\n                  accessKey: res.console.access_key,\n                  secretKey: res.console.secret_key,\n                  url: res.console.url,\n                },\n              };\n            }\n          }\n          setAddSending(false);\n          setShowNewCredentials(true);\n          setCreatedAccount(newSrvAcc);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setAddSending(false);\n          setErrorSnackMessage(err);\n        });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [addSending]);\n\n  const cancelButton = {\n    label: \"Cancel\",\n    type: \"other\",\n    enabled: true,\n    action: () => {\n      resetAddTenantForm();\n      history.push(\"/tenants\");\n    },\n  };\n  const requiredPages = [\n    \"nameTenant\",\n    \"tenantSize\",\n    \"configure\",\n    \"affinity\",\n    \"identityProvider\",\n    \"security\",\n    \"encryption\",\n  ];\n  const createButton = {\n    label: \"Create\",\n    type: \"submit\",\n    enabled:\n      !addSending &&\n      selectedStorageClass !== \"\" &&\n      requiredPages.every((v) => validPages.includes(v)),\n    action: () => {\n      setAddSending(true);\n    },\n  };\n\n  const wizardSteps: IWizardElement[] = [\n    {\n      label: \"Setup\",\n      componentRender: <TenantResources />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Configure\",\n      advancedOnly: true,\n      componentRender: <Configure />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Images\",\n      advancedOnly: true,\n      componentRender: <Images />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Pod Placement\",\n      advancedOnly: true,\n      componentRender: <Affinity />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Identity Provider\",\n      advancedOnly: true,\n      componentRender: <IdentityProvider />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Security\",\n      advancedOnly: true,\n      componentRender: <Security />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Encryption\",\n      advancedOnly: true,\n      componentRender: <Encryption />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Audit Log\",\n      advancedOnly: true,\n      componentRender: <ConfigLogSearch />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Monitoring\",\n      advancedOnly: true,\n      componentRender: <ConfigPrometheus />,\n      buttons: [cancelButton, createButton],\n    },\n  ];\n\n  let filteredWizardSteps = wizardSteps;\n\n  const closeCredentialsModal = () => {\n    resetAddTenantForm();\n    history.push(\"/tenants\");\n  };\n\n  return (\n    <Fragment>\n      {showNewCredentials && (\n        <CredentialsPrompt\n          newServiceAccount={createdAccount}\n          open={showNewCredentials}\n          closeModal={() => {\n            closeCredentialsModal();\n          }}\n          entity=\"Tenant\"\n        />\n      )}\n      <PageHeader\n        label={\n          <BackLink\n            to={\"/tenants\"}\n            label={\"Tenants\"}\n            executeOnClick={resetAddTenantForm}\n          />\n        }\n      />\n\n      <PageLayout>\n        {addSending && (\n          <Grid item xs={12}>\n            <LinearProgress />\n          </Grid>\n        )}\n        <Grid item xs={12} className={classes.pageBox}>\n          <GenericWizard wizardSteps={filteredWizardSteps} />\n        </Grid>\n        {formRender === IMkEnvs.aws && (\n          <Grid item xs={12} style={{ marginTop: 16 }}>\n            <HelpBox\n              title={\"EBS Volume Configuration.\"}\n              iconComponent={<StorageIcon />}\n              help={\n                <Fragment>\n                  <b>Performance Optimized</b>: Uses the <i>gp3</i> EBS storage\n                  class class configured at 1,000Mi/s throughput and 16,000\n                  IOPS, however the minimum volume size for this type of EBS\n                  volume is <b>32Gi</b>.\n                  <br />\n                  <br />\n                  <b>Storage Optimized</b>: Uses the <i>sc1</i> EBS storage\n                  class, however the minimum volume size for this type of EBS\n                  volume is &nbsp;\n                  <b>16Ti</b> to unlock their maximum throughput speed of\n                  250Mi/s.\n                </Fragment>\n              }\n            />\n          </Grid>\n        )}\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  namespace: state.tenants.createTenant.fields.nameTenant.namespace,\n  validPages: state.tenants.createTenant.validPages,\n  fields: state.tenants.createTenant.fields,\n  certificates: state.tenants.createTenant.certificates,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n  features: state.console.session.features,\n  tolerations: state.tenants.createTenant.tolerations,\n});\n\nconst connector = connect(mapState, {\n  setErrorSnackMessage,\n  updateAddField,\n  resetAddTenantForm,\n});\n\nexport default withStyles(styles)(connector(AddTenant));\n","import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport { Theme } from \"@mui/material/styles\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    errorBlock: {\n      color: theme.palette?.error.main || \"#C83B51\",\n    },\n  });\n\ninterface IErrorBlockProps {\n  classes: any;\n  errorMessage: string;\n  withBreak?: boolean;\n}\n\nconst ErrorBlock = ({\n  classes,\n  errorMessage,\n  withBreak = true,\n}: IErrorBlockProps) => {\n  return (\n    <React.Fragment>\n      {withBreak && <br />}\n      <Typography component=\"p\" variant=\"body1\" className={classes.errorBlock}>\n        {errorMessage}\n      </Typography>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(ErrorBlock);\n"],"names":["withStyles","theme","createStyles","root","border","borderRadius","backgroundColor","paddingLeft","paddingTop","paddingBottom","paddingRight","leftItems","fontSize","fontWeight","marginBottom","display","alignItems","marginRight","height","width","helpText","classes","iconComponent","title","help","className","container","item","xs","flexFlow","padding","inputWithCopy","background","inputLabel","fieldBasic","label","value","OutlinedInput","readOnly","endAdornment","InputAdornment","position","text","BoxIconButton","tooltip","onClick","onMouseDown","edge","download","filename","element","document","createElement","setAttribute","encodeURIComponent","style","body","appendChild","click","removeChild","warningBlock","color","margin","credentialTitle","buttonContainer","textAlign","marginTop","credentialsPanel","overflowY","maxHeight","promptTitle","buttonSpacer","promptIcon","newServiceAccount","open","closeModal","entity","consoleCreds","get","idp","ModalWrapper","modalOpen","onClose","titleIcon","Grid","formScrollable","Array","isArray","map","credentialsPair","index","accessKey","secretKey","WarnIcon","RBIconButton","id","consoleExtras","itemMap","url","api","path","JSON","stringify","icon","variant","length","allCredentials","tooltipHelper","valueString","maxWidth","whiteSpace","overflow","textOverflow","fileInputField","fileInputStyles","textBoxContainer","onChange","name","disabled","required","error","accept","useState","showFileSelector","setShowSelector","fieldBottom","fieldContainer","errorInField","InputLabel","htmlFor","fieldLabelError","tooltipContainer","Tooltip","placement","HelpIcon","type","e","fileName","evt","callback","file","target","files","reader","FileReader","readAsDataURL","onload","fileBase64","result","fileArray","toString","split","fileProcess","data","IconButton","component","disableRipple","disableFocusRipple","size","Cancel","ErrorBlock","errorMessage","fileReselect","AttachFile","connector","connect","state","modalSnackMessage","system","modalSnackBar","setModalSnackMessage","deleteDialogStyles","content","customDialogSize","snackBarCommon","children","wideLimit","noContentPadding","openSnackbar","setOpenSnackbar","useEffect","message","customSize","paper","fullWidth","detailedErrorMsg","scroll","event","reason","titleText","closeContainer","closeButton","isModal","snackBarModal","ContentProps","snackBar","errorSnackBar","autoHideDuration","exposeMinIO","tenants","createTenant","fields","configure","exposeConsole","tenantCustom","tenantSecurityContext","updateAddField","isPageValid","configSectionItem","tenantCustomizationFields","marginLeft","containerItem","fieldGroup","createTenantCommon","responsiveSectionItem","fieldSpaceTop","modalBasic","wizardCommon","validationErrors","setValidationErrors","updateField","useCallback","field","customAccountValidation","fieldKey","runAsUser","customValidation","parseInt","customValidationMessage","runAsGroup","fsGroup","commonVal","commonFormValidation","Object","keys","cleanValidation","fieldName","clearValidationError","Paper","paperWrapper","headerElement","h3Section","descriptionText","FormSwitchWrapper","checked","multiContainer","InputBoxWrapper","min","runAsNonRoot","idpSelection","identityProvider","accessKeys","secretKeys","openIDConfigurationURL","openIDClientID","openIDSecretID","openIDCallbackURL","openIDClaimName","openIDScopes","ADURL","ADSkipTLS","ADServerInsecure","ADGroupSearchBaseDN","ADGroupSearchFilter","ADUserDNs","ADLookupBindDN","ADLookupBindPassword","ADUserDNSearchBaseDN","ADUserDNSearchFilter","ADServerStartTLS","shortened","gridTemplateColumns","gridGap","buttonTray","overlayAction","protocolRadioOptions","adUserDnRows","formFieldStyles","updateUserField","newUserField","updatePwordField","updateADUserField","newADUserDNsField","customIDPValidation","i","push","pattern","customPatternMessage","inputs","_","Fragment","placeholder","Add","splice","RemoveIcon","getRandomString","Casino","Delete","RadioGroupSelector","currentSelection","selectorOptions","formFieldRow","Typography","gutterBottom","enableTLS","security","enableAutoCert","enableCustomCerts","minioCertificates","certificates","caCertificates","addFileToCaCertificates","deleteCaCertificate","addCaCertificate","addKeyPair","addFileToKeyPair","deleteKeyPair","minioCertificateRows","justifyContent","borderBottom","flex","fileItem","minWidth","minioCertsContainer","minioCACertsRow","rowActions","keyPair","FileSelector","encodedValue","cert","key","AddIcon","replicas","encryption","enableEncryption","encryptionType","gemaltoEndpoint","gemaltoToken","gemaltoDomain","gemaltoRetry","awsEndpoint","awsRegion","awsKMSKey","awsAccessKey","awsSecretKey","awsToken","vaultEndpoint","vaultEngine","vaultNamespace","vaultPrefix","vaultAppRoleEngine","vaultId","vaultSecret","vaultRetry","vaultPing","azureEndpoint","azureTenantID","azureClientID","azureClientSecret","gcpProjectID","gcpEndpoint","gcpClientEmail","gcpClientID","gcpPrivateKeyID","gcpPrivateKey","enableCustomCertsForKES","serverCertificate","clientCertificate","vaultCertificate","vaultCA","gemaltoCA","kesSecurityContext","addFileServerCert","addFileClientCert","addFileVaultCert","addFileVaultCa","addFileGemaltoCa","encryptionTypeOptions","mutualTlsConfig","rightSpacer","responsiveContainer","encryptionAvailable","filter","encoded_key","encoded_cert","encryptionValidation","podAffinity","affinity","nodeSelectorLabels","withPodAntiAffinity","keyValuePairs","nodeSelectorPairs","tolerations","setModalErrorSnackMessage","setKeyValuePairs","setTolerationInfo","addNewToleration","removeToleration","affinityConfigField","affinityFieldLabel","radioField","affinityLabelKey","affinityLabelValue","affinityRow","loading","setLoading","keyValueMap","setKeyValueMap","keyOptions","setKeyOptions","then","res","k","catch","err","vl","kvp","kvs","a","indexOf","join","valid","splittedLabels","forEach","splitItem","updateToleration","alterToleration","affinityHelpText","SelectWrapper","newKey","arrCp","assign","options","v","tol","TolerationSelector","effect","onEffectChange","tolerationKey","onTolerationKeyChange","operator","onOperatorChange","onValueChange","tolerationSeconds","seconds","onSecondsChange","storageClasses","customImage","imageName","customDockerhub","imageRegistry","imageRegistryUsername","imageRegistryPassword","prometheusCustom","prometheusEnabled","logSearchCustom","logSearchEnabled","logSearchVolumeSize","logSearchSizeFactor","prometheusVolumeSize","prometheusSizeFactor","logSearchSelectedStorageClass","logSearchImage","kesImage","logSearchPostgresImage","logSearchPostgresInitImage","prometheusSelectedStorageClass","prometheusImage","prometheusSidecarImage","prometheusInitImage","selectedStorageClass","nameTenant","mapDispatchToProps","setErrorSnackMessage","wrapText","wordWrap","namespace","addNamespaceOpen","closeAddNamespaceModalAndRefresh","addNamespaceLoading","setAddNamespaceLoading","ConfirmDialog","confirmText","confirmButtonProps","isOpen","isLoading","onConfirm","confirmationContent","LinearProgress","DialogContentText","volumeSize","tenantSize","sizeFactor","drivesPerServer","nodes","memoryNode","resourcesMemoryRequest","ecParity","ecParityChoices","cleanECChoices","resourcesSize","distribution","ecParityCalc","limitSize","cpuToUse","resourcesCPURequest","integrationSelection","table","usableInformation","storageFactors","find","erasureCode","Divider","Table","TableBody","TableRow","TableCell","scope","align","typeSelection","storageClass","disks","niceBytes","pvSize","persistentVolumes","rawCapacity","maxCapacity","Math","floor","maxFailureTolerations","CPU","memory","driveSize","sizeUnit","tenantName","selectedStorageType","features","console","session","setStorageClassesList","setLimitSize","setStorageType","sizePreview","formToRender","IMkEnvs","emptyNamespace","setEmptyNamespace","loadingNamespaceInfo","setLoadingNamespaceInfo","showCreateButton","setShowCreateButton","openAddNSConfirm","setOpenAddNSConfirm","getNamespaceInformation","tenantsList","elements","getLimitSizes","newStorage","stExists","findIndex","detailedError","debounceNamespace","useMemo","debounce","cancel","customNamespaceError","commonValidation","isValid","frmValidationCleanup","refresh","md","sx","minHeight","overlayId","overlayIcon","mkPanelConfigurations","TenantSize","formRender","setFormRender","setConfiguration","resourcesConfigurations","includes","logSearchSecurityContext","logSearchPostgresSecurityContext","logSearchEnabledFields","configureSTClasses","overlayObject","InputUnitMenu","onUnitChange","unitSelected","unitsList","prometheusSecurityContext","prometheusEnabledFields","validPages","resetAddTenantForm","pageBox","settingsCommon","showNewCredentials","setShowNewCredentials","createdAccount","setCreatedAccount","addSending","setAddSending","consoleCaCertificates","consoleCertificate","affinityType","kesReplicas","tolerationValues","toleration","trim","poolName","generatePoolName","affinityObject","getDefaultAffinity","getNodeSelector","dataSend","access_key","secret_key","access_keys","secret_keys","enable_tls","enable_console","enable_prometheus","service_name","image","expose_minio","expose_console","pools","servers","volumes_per_server","volume_configuration","storage_class_name","securityContext","erasureCodingParity","resourcesCPULimit","resourcesMemoryLimit","resources","requests","cpu","getBytes","limits","image_registry","registry","username","password","logSearchConfiguration","storageSize","postgres_image","postgres_init_image","postgres_securityContext","prometheusConfiguration","sidecar_image","init_image","tenantCerts","consoleCerts","caCerts","consoleCaCerts","ca_certificates","console_ca_certificates","minio","crt","tls","insertEncrypt","gemaltoCAIntroduce","ca","gemalto","keysecure","endpoint","credentials","token","domain","retry","aws","secretsmanager","region","kmskey","accesskey","secretkey","azure","keyvault","tenant_id","client_id","client_secret","gcp","secretmanager","project_id","client_email","private_key_id","private_key","vaultKeyPair","vaultCAInsert","vaultTLS","vault","engine","prefix","approle","secret","status","ping","encryptionServerKeyPair","encryptionClientKeyPair","client","server","dataIDP","keyarray","oidc","configuration_url","secret_id","claim_name","callback_url","scopes","active_directory","skip_tls_verification","server_insecure","group_search_base_dn","group_search_filter","user_dns","lookup_bind_dn","lookup_bind_password","user_dn_search_base_dn","user_dn_search_filter","server_start_tls","consoleSAList","newSrvAcc","consoleItem","consoleKey","cancelButton","enabled","action","history","createButton","every","filteredWizardSteps","componentRender","buttons","advancedOnly","CredentialsPrompt","PageHeader","BackLink","to","executeOnClick","PageLayout","GenericWizard","wizardSteps","HelpBox","errorBlock","palette","main","withBreak"],"sourceRoot":""}