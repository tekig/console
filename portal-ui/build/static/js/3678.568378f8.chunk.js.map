{"version":3,"file":"static/js/3678.568378f8.chunk.js","mappings":"uSA+JMA,EAAqB,CACzBC,0BAAAA,EAAAA,IAGIC,GAAYC,EAAAA,EAAAA,IAAQ,KAAMH,GAEhC,UAAeE,GAAUE,EAAAA,EAAAA,IAzHV,SAACC,GAAD,OACbC,EAAAA,EAAAA,IAAa,kBACRC,EAAAA,IACAC,EAAAA,OAsHkBJ,EAnHC,SAAC,GAQL,IAPpBK,EAOmB,EAPnBA,UACAC,EAMmB,EANnBA,WACAC,EAKmB,EALnBA,WACAC,EAImB,EAJnBA,QACAX,EAGmB,EAHnBA,0BACAY,EAEmB,EAFnBA,QACAC,EACmB,EADnBA,cAEA,GAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAsCF,EAAAA,EAAAA,WAAkB,GAAxD,eAAOG,EAAP,KAAoBC,EAApB,KAEMC,EAAW,UAAMT,EAAN,aAAoBU,EAAAA,EAAAA,IAAeX,IAM9CY,EAAgB,WACpB,IAAIC,EAAa,GACjB,GAAmB,KAAfb,EAAmB,CACrB,IAAMc,GAAoBH,EAAAA,EAAAA,IAAeX,GACzCa,EAAaC,EAAkBC,SAAS,KACpCD,EADS,UAENA,EAFM,KAMf,IAA6C,IAAzCV,EAAcY,WAFC,SAACC,GAAD,OACjBA,EAAOC,OAASL,EAAaP,KAC/B,CAOA,IAAMa,EAAO,mBAAelB,EAAf,oBAAoCmB,EAAAA,EAAAA,IAAe,GAAD,OAC1DP,GAD0D,OAC7CP,IADL,KAGbe,EAAAA,EAAAA,KAAaF,GACbjB,SAVEX,EAA0B,CACxB+B,aAAc,uDACdC,cAAe,OAWrBC,EAAAA,EAAAA,YAAU,WACR,IAAIC,GAAQ,EACkB,IAA1BnB,EAAQoB,OAAOC,SACjBF,GAAQ,GAEVhB,EAAegB,KACd,CAACnB,IAYJ,OACE,SAAC,WAAD,WACE,SAAC,IAAD,CACEP,UAAWA,EACX6B,MAAM,8BACN1B,QAASA,EACT2B,WAAW,SAAC,KAAD,IAJb,UAME,UAAC,KAAD,CAAMC,WAAS,EAAf,WACE,UAAC,KAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,UAAW9B,EAAQ+B,aAAtC,2BACiBxB,MAEjB,SAAC,KAAD,CAAMqB,MAAI,EAACC,GAAI,GAAIC,UAAW9B,EAAQ+B,aAAtC,UACE,SAAC,IAAD,CACEC,MAAO7B,EACP8B,MAAO,kBACPC,GAAI,aACJnB,KAAM,aACNoB,YAAa,4BACbC,SA7BQ,SAACC,GACnBjC,EAAWiC,EAAEC,OAAON,QA6BVO,WA1BO,SAACF,GACH,UAAXA,EAAEG,MAAgC,KAAZrC,GACxBM,KAyBQgC,UAAQ,OAGZ,UAAC,KAAD,CAAMb,MAAI,EAACC,GAAI,GAAIC,UAAW9B,EAAQ0C,eAAtC,WACE,SAAC,IAAD,CACEC,KAAK,SACLC,MAAM,UACNC,QAAQ,WACRC,QA3EM,WAChB1C,EAAW,KAsEH,oBAQA,SAAC,IAAD,CACEuC,KAAK,SACLE,QAAQ,YACRD,MAAM,UACNG,UAAW1C,EACXyC,QAASrC,EALX","sources":["screens/Console/Buckets/ListBuckets/Objects/ListObjects/CreateFolderModal.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport ModalWrapper from \"../../../../Common/ModalWrapper/ModalWrapper\";\nimport { Button, Grid } from \"@mui/material\";\nimport InputBoxWrapper from \"../../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  formFieldStyles,\n  modalStyleUtils,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport { connect } from \"react-redux\";\nimport history from \"../../../../../../history\";\nimport { decodeFileName, encodeFileName } from \"../../../../../../common/utils\";\nimport { setModalErrorSnackMessage } from \"../../../../../../actions\";\nimport { BucketObject } from \"./types\";\nimport { CreateNewPathIcon } from \"../../../../../../icons\";\n\ninterface ICreateFolder {\n  classes: any;\n  modalOpen: boolean;\n  bucketName: string;\n  folderName: string;\n  setModalErrorSnackMessage: typeof setModalErrorSnackMessage;\n  onClose: () => any;\n  existingFiles: BucketObject[];\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...modalStyleUtils,\n    ...formFieldStyles,\n  });\n\nconst CreateFolderModal = ({\n  modalOpen,\n  folderName,\n  bucketName,\n  onClose,\n  setModalErrorSnackMessage,\n  classes,\n  existingFiles,\n}: ICreateFolder) => {\n  const [pathUrl, setPathUrl] = useState(\"\");\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\n\n  const currentPath = `${bucketName}/${decodeFileName(folderName)}`;\n\n  const resetForm = () => {\n    setPathUrl(\"\");\n  };\n\n  const createProcess = () => {\n    let folderPath = \"\";\n    if (folderName !== \"\") {\n      const decodedFolderName = decodeFileName(folderName);\n      folderPath = decodedFolderName.endsWith(\"/\")\n        ? decodedFolderName\n        : `${decodedFolderName}/`;\n    }\n    const sharesName = (record: BucketObject) =>\n      record.name === folderPath + pathUrl;\n    if (existingFiles.findIndex(sharesName) !== -1) {\n      setModalErrorSnackMessage({\n        errorMessage: \"Folder cannot have the same name as an existing file\",\n        detailedError: \"\",\n      });\n      return;\n    }\n    const newPath = `/buckets/${bucketName}/browse/${encodeFileName(\n      `${folderPath}${pathUrl}`\n    )}/`;\n    history.push(newPath);\n    onClose();\n  };\n\n  useEffect(() => {\n    let valid = true;\n    if (pathUrl.trim().length === 0) {\n      valid = false;\n    }\n    setIsFormValid(valid);\n  }, [pathUrl]);\n\n  const inputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setPathUrl(e.target.value);\n  };\n\n  const keyPressed = (e: any) => {\n    if (e.code === \"Enter\" && pathUrl !== \"\") {\n      createProcess();\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <ModalWrapper\n        modalOpen={modalOpen}\n        title=\"Choose or create a new path\"\n        onClose={onClose}\n        titleIcon={<CreateNewPathIcon />}\n      >\n        <Grid container>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            Current Path: {currentPath}\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              value={pathUrl}\n              label={\"New Folder Path\"}\n              id={\"folderPath\"}\n              name={\"folderPath\"}\n              placeholder={\"Enter the new Folder Path\"}\n              onChange={inputChange}\n              onKeyPress={keyPressed}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.modalButtonBar}>\n            <Button\n              type=\"button\"\n              color=\"primary\"\n              variant=\"outlined\"\n              onClick={resetForm}\n            >\n              Clear\n            </Button>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={!isFormValid}\n              onClick={createProcess}\n            >\n              Create\n            </Button>\n          </Grid>\n        </Grid>\n      </ModalWrapper>\n    </React.Fragment>\n  );\n};\n\nconst mapDispatchToProps = {\n  setModalErrorSnackMessage,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default connector(withStyles(styles)(CreateFolderModal));\n"],"names":["mapDispatchToProps","setModalErrorSnackMessage","connector","connect","withStyles","theme","createStyles","modalStyleUtils","formFieldStyles","modalOpen","folderName","bucketName","onClose","classes","existingFiles","useState","pathUrl","setPathUrl","isFormValid","setIsFormValid","currentPath","decodeFileName","createProcess","folderPath","decodedFolderName","endsWith","findIndex","record","name","newPath","encodeFileName","history","errorMessage","detailedError","useEffect","valid","trim","length","title","titleIcon","container","item","xs","className","formFieldRow","value","label","id","placeholder","onChange","e","target","onKeyPress","code","required","modalButtonBar","type","color","variant","onClick","disabled"],"sourceRoot":""}